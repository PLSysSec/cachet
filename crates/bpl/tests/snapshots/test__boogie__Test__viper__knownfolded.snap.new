---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Func(
        FuncDecl {
            attrs: [],
            ident: "state",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "Heap",
                    ),
                    type_: App(
                        TypeApp {
                            head: "HeapType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "Mask",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MaskType",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Ref",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Heap",
                        ],
                        type_: App(
                            TypeApp {
                                head: "HeapType",
                                tail: None,
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "null",
                ],
                type_: App(
                    TypeApp {
                        head: "Ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Field",
                    type_params: [
                        "A",
                        "B",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "NormalField",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "HeapType",
                    type_params: [],
                    type_: Some(
                        Map(
                            MapType {
                                type_params: [
                                    "A",
                                    "B",
                                ],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "Ref",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "Field",
                                            tail: Some(
                                                App(
                                                    TypeApp {
                                                        head: "A",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "B",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        },
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "B",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$allocated",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "NormalField",
                                    tail: Some(
                                        AtomApp(
                                            TypeApp {
                                                head: Bool,
                                                tail: None,
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "NormalField",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "Ref",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "Heap",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                        Var(
                                                            "f",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "Heap",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "o",
                                                    ),
                                                    Var(
                                                        "$allocated",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "Heap",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "o",
                                                                        ),
                                                                        Var(
                                                                            "f",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    Var(
                                                        "$allocated",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "succHeap",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "Heap0",
                    ),
                    type_: App(
                        TypeApp {
                            head: "HeapType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "Heap1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "HeapType",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "succHeapTrans",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "Heap0",
                    ),
                    type_: App(
                        TypeApp {
                            head: "HeapType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "Heap1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "HeapType",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "IdenticalOnKnownLocations",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "Heap",
                    ),
                    type_: App(
                        TypeApp {
                            head: "HeapType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "ExhaleHeap",
                    ),
                    type_: App(
                        TypeApp {
                            head: "HeapType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "Mask",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MaskType",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "IsPredicateField",
            type_params: [
                "A",
                "B",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f_1",
                    ),
                    type_: Atom(
                        Paren(
                            App(
                                TypeApp {
                                    head: "Field",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "A",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "B",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "IsWandField",
            type_params: [
                "A",
                "B",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f_1",
                    ),
                    type_: Atom(
                        Paren(
                            App(
                                TypeApp {
                                    head: "Field",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "A",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "B",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "getPredicateId",
            type_params: [
                "A",
                "B",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f_1",
                    ),
                    type_: Atom(
                        Paren(
                            App(
                                TypeApp {
                                    head: "Field",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "A",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "B",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "A",
                            "B",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ExhaleHeap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Mask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f_2",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "A",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "B",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "IdenticalOnKnownLocations",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "ExhaleHeap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "ExhaleHeap",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                        Var(
                                                            "f_2",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IdenticalOnKnownLocations",
                                        args: [
                                            Var(
                                                "Heap",
                                            ),
                                            Var(
                                                "ExhaleHeap",
                                            ),
                                            Var(
                                                "Mask",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "HasDirectPerm",
                                                args: [
                                                    Var(
                                                        "Mask",
                                                    ),
                                                    Var(
                                                        "o",
                                                    ),
                                                    Var(
                                                        "f_2",
                                                    ),
                                                ],
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "Heap",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "o",
                                                                    ),
                                                                    Var(
                                                                        "f_2",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "ExhaleHeap",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "o",
                                                                    ),
                                                                    Var(
                                                                        "f_2",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "C",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ExhaleHeap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Mask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "pm_f",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "C",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "FrameType",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "IdenticalOnKnownLocations",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "ExhaleHeap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "IsPredicateField",
                                            args: [
                                                Var(
                                                    "pm_f",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "ExhaleHeap",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "null",
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "PredicateMaskField",
                                                                args: [
                                                                    Var(
                                                                        "pm_f",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IdenticalOnKnownLocations",
                                        args: [
                                            Var(
                                                "Heap",
                                            ),
                                            Var(
                                                "ExhaleHeap",
                                            ),
                                            Var(
                                                "Mask",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "HasDirectPerm",
                                                        args: [
                                                            Var(
                                                                "Mask",
                                                            ),
                                                            Var(
                                                                "null",
                                                            ),
                                                            Var(
                                                                "pm_f",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsPredicateField",
                                                        args: [
                                                            Var(
                                                                "pm_f",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "Heap",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "PredicateMaskField",
                                                                            args: [
                                                                                Var(
                                                                                    "pm_f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "ExhaleHeap",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "PredicateMaskField",
                                                                            args: [
                                                                                Var(
                                                                                    "pm_f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "C",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ExhaleHeap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Mask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "pm_f",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "C",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "FrameType",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "IdenticalOnKnownLocations",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "ExhaleHeap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "ExhaleHeap",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "null",
                                                        ),
                                                        Var(
                                                            "pm_f",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "IsPredicateField",
                                            args: [
                                                Var(
                                                    "pm_f",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IdenticalOnKnownLocations",
                                        args: [
                                            Var(
                                                "Heap",
                                            ),
                                            Var(
                                                "ExhaleHeap",
                                            ),
                                            Var(
                                                "Mask",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "HasDirectPerm",
                                                        args: [
                                                            Var(
                                                                "Mask",
                                                            ),
                                                            Var(
                                                                "null",
                                                            ),
                                                            Var(
                                                                "pm_f",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsPredicateField",
                                                        args: [
                                                            Var(
                                                                "pm_f",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: ForAll,
                                                body: QuantBody {
                                                    type_params: [
                                                        "A",
                                                        "B",
                                                    ],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "o2",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "Ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "f_2",
                                                                    ],
                                                                    type_: Atom(
                                                                        Paren(
                                                                            App(
                                                                                TypeApp {
                                                                                    head: "Field",
                                                                                    tail: Some(
                                                                                        App(
                                                                                            TypeApp {
                                                                                                head: "A",
                                                                                                tail: Some(
                                                                                                    App(
                                                                                                        TypeApp {
                                                                                                            head: "B",
                                                                                                            tail: None,
                                                                                                        },
                                                                                                    ),
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [
                                                        Trigger(
                                                            [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "ExhaleHeap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "o2",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_2",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                    expr: Implies(
                                                        ImpliesExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "PredicateMaskField",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pm_f",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "o2",
                                                                                ),
                                                                                Var(
                                                                                    "f_2",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "o2",
                                                                                        ),
                                                                                        Var(
                                                                                            "f_2",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "ExhaleHeap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "o2",
                                                                                        ),
                                                                                        Var(
                                                                                            "f_2",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "C",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ExhaleHeap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Mask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "pm_f",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "C",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "FrameType",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "IdenticalOnKnownLocations",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "ExhaleHeap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "IsWandField",
                                            args: [
                                                Var(
                                                    "pm_f",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "ExhaleHeap",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "null",
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "WandMaskField",
                                                                args: [
                                                                    Var(
                                                                        "pm_f",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IdenticalOnKnownLocations",
                                        args: [
                                            Var(
                                                "Heap",
                                            ),
                                            Var(
                                                "ExhaleHeap",
                                            ),
                                            Var(
                                                "Mask",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "HasDirectPerm",
                                                        args: [
                                                            Var(
                                                                "Mask",
                                                            ),
                                                            Var(
                                                                "null",
                                                            ),
                                                            Var(
                                                                "pm_f",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsWandField",
                                                        args: [
                                                            Var(
                                                                "pm_f",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "Heap",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "WandMaskField",
                                                                            args: [
                                                                                Var(
                                                                                    "pm_f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "ExhaleHeap",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "WandMaskField",
                                                                            args: [
                                                                                Var(
                                                                                    "pm_f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "C",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ExhaleHeap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Mask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "pm_f",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "C",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "FrameType",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "IdenticalOnKnownLocations",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "ExhaleHeap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "IsWandField",
                                            args: [
                                                Var(
                                                    "pm_f",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IdenticalOnKnownLocations",
                                        args: [
                                            Var(
                                                "Heap",
                                            ),
                                            Var(
                                                "ExhaleHeap",
                                            ),
                                            Var(
                                                "Mask",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "HasDirectPerm",
                                                        args: [
                                                            Var(
                                                                "Mask",
                                                            ),
                                                            Var(
                                                                "null",
                                                            ),
                                                            Var(
                                                                "pm_f",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsWandField",
                                                        args: [
                                                            Var(
                                                                "pm_f",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: ForAll,
                                                body: QuantBody {
                                                    type_params: [
                                                        "A",
                                                        "B",
                                                    ],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "o2",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "Ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "f_2",
                                                                    ],
                                                                    type_: Atom(
                                                                        Paren(
                                                                            App(
                                                                                TypeApp {
                                                                                    head: "Field",
                                                                                    tail: Some(
                                                                                        App(
                                                                                            TypeApp {
                                                                                                head: "A",
                                                                                                tail: Some(
                                                                                                    App(
                                                                                                        TypeApp {
                                                                                                            head: "B",
                                                                                                            tail: None,
                                                                                                        },
                                                                                                    ),
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [
                                                        Trigger(
                                                            [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "ExhaleHeap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "o2",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_2",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                    expr: Implies(
                                                        ImpliesExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "WandMaskField",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pm_f",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "o2",
                                                                                ),
                                                                                Var(
                                                                                    "f_2",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "o2",
                                                                                        ),
                                                                                        Var(
                                                                                            "f_2",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "ExhaleHeap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "o2",
                                                                                        ),
                                                                                        Var(
                                                                                            "f_2",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ExhaleHeap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Mask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "IdenticalOnKnownLocations",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "ExhaleHeap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "ExhaleHeap",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                        Var(
                                                            "$allocated",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IdenticalOnKnownLocations",
                                        args: [
                                            Var(
                                                "Heap",
                                            ),
                                            Var(
                                                "ExhaleHeap",
                                            ),
                                            Var(
                                                "Mask",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "Heap",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "o",
                                                            ),
                                                            Var(
                                                                "$allocated",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "ExhaleHeap",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "o",
                                                            ),
                                                            Var(
                                                                "$allocated",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "A",
                            "B",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f_2",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "A",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "B",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "B",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "Heap",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                        Var(
                                                            "f_2",
                                                        ),
                                                    ],
                                                    value: Some(
                                                        Var(
                                                            "v",
                                                        ),
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: FuncCall(
                            FuncCall {
                                target: "succHeap",
                                args: [
                                    Var(
                                        "Heap",
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "Heap",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                        Var(
                                                            "f_2",
                                                        ),
                                                    ],
                                                    value: Some(
                                                        Var(
                                                            "v",
                                                        ),
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ExhaleHeap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Mask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "IdenticalOnKnownLocations",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "ExhaleHeap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IdenticalOnKnownLocations",
                                        args: [
                                            Var(
                                                "Heap",
                                            ),
                                            Var(
                                                "ExhaleHeap",
                                            ),
                                            Var(
                                                "Mask",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "succHeap",
                                        args: [
                                            Var(
                                                "Heap",
                                            ),
                                            Var(
                                                "ExhaleHeap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "succHeap",
                                            args: [
                                                Var(
                                                    "Heap0",
                                                ),
                                                Var(
                                                    "Heap1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "succHeap",
                                        args: [
                                            Var(
                                                "Heap0",
                                            ),
                                            Var(
                                                "Heap1",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "succHeapTrans",
                                        args: [
                                            Var(
                                                "Heap0",
                                            ),
                                            Var(
                                                "Heap1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap2",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "succHeapTrans",
                                            args: [
                                                Var(
                                                    "Heap0",
                                                ),
                                                Var(
                                                    "Heap1",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "succHeap",
                                            args: [
                                                Var(
                                                    "Heap1",
                                                ),
                                                Var(
                                                    "Heap2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "succHeapTrans",
                                                args: [
                                                    Var(
                                                        "Heap0",
                                                    ),
                                                    Var(
                                                        "Heap1",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "succHeap",
                                                args: [
                                                    Var(
                                                        "Heap1",
                                                    ),
                                                    Var(
                                                        "Heap2",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "succHeapTrans",
                                        args: [
                                            Var(
                                                "Heap0",
                                            ),
                                            Var(
                                                "Heap2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Perm",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Real,
                        ),
                    ),
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "MaskType",
                    type_params: [],
                    type_: Some(
                        Map(
                            MapType {
                                type_params: [
                                    "A",
                                    "B",
                                ],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "Ref",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "Field",
                                            tail: Some(
                                                App(
                                                    TypeApp {
                                                        head: "A",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "B",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        },
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "Perm",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Mask",
                        ],
                        type_: App(
                            TypeApp {
                                head: "MaskType",
                                tail: None,
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "ZeroMask",
                ],
                type_: App(
                    TypeApp {
                        head: "MaskType",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "A",
                            "B",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o_1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f_3",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "A",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "B",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "ZeroMask",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o_1",
                                                        ),
                                                        Var(
                                                            "f_3",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "ZeroMask",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "o_1",
                                                    ),
                                                    Var(
                                                        "f_3",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "NoPerm",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "PMaskType",
                    type_params: [],
                    type_: Some(
                        Map(
                            MapType {
                                type_params: [
                                    "A",
                                    "B",
                                ],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "Ref",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "Field",
                                            tail: Some(
                                                App(
                                                    TypeApp {
                                                        head: "A",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "B",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "ZeroPMask",
                ],
                type_: App(
                    TypeApp {
                        head: "PMaskType",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "A",
                            "B",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o_1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f_3",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "A",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "B",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "ZeroPMask",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o_1",
                                                        ),
                                                        Var(
                                                            "f_3",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "ZeroPMask",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "o_1",
                                                    ),
                                                    Var(
                                                        "f_3",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "PredicateMaskField",
            type_params: [
                "A",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f_4",
                    ),
                    type_: Atom(
                        Paren(
                            App(
                                TypeApp {
                                    head: "Field",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "A",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "FrameType",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "A",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "PMaskType",
                                                tail: None,
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "WandMaskField",
            type_params: [
                "A",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f_4",
                    ),
                    type_: Atom(
                        Paren(
                            App(
                                TypeApp {
                                    head: "Field",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "A",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "FrameType",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "A",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "PMaskType",
                                                tail: None,
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "NoPerm",
                ],
                type_: App(
                    TypeApp {
                        head: "Perm",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "NoPerm",
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "000000000",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "FullPerm",
                ],
                type_: App(
                    TypeApp {
                        head: "Perm",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "FullPerm",
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "1",
                            fract: Some(
                                "000000000",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Perm",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Real,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Real,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Perm",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "GoodMask",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "Mask",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MaskType",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Mask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "state",
                                        args: [
                                            Var(
                                                "Heap",
                                            ),
                                            Var(
                                                "Mask",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "GoodMask",
                                        args: [
                                            Var(
                                                "Mask",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "A",
                            "B",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Mask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o_1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f_3",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "A",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "B",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "GoodMask",
                                            args: [
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "Mask",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o_1",
                                                        ),
                                                        Var(
                                                            "f_3",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "GoodMask",
                                        args: [
                                            Var(
                                                "Mask",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "Mask",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "o_1",
                                                                    ),
                                                                    Var(
                                                                        "f_3",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Ge,
                                                rhs: Var(
                                                    "NoPerm",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Implies(
                                            ImpliesExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "GoodMask",
                                                                        args: [
                                                                            Var(
                                                                                "Mask",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Neg(
                                                                    NegExpr {
                                                                        op: Logical,
                                                                        expr: FuncCall(
                                                                            FuncCall {
                                                                                target: "IsPredicateField",
                                                                                args: [
                                                                                    Var(
                                                                                        "f_3",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Neg(
                                                            NegExpr {
                                                                op: Logical,
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "IsWandField",
                                                                        args: [
                                                                            Var(
                                                                                "f_3",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "Mask",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "o_1",
                                                                            ),
                                                                            Var(
                                                                                "f_3",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "FullPerm",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "HasDirectPerm",
            type_params: [
                "A",
                "B",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "Mask",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MaskType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "o_1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f_3",
                    ),
                    type_: Atom(
                        Paren(
                            App(
                                TypeApp {
                                    head: "Field",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "A",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "B",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "A",
                            "B",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Mask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o_1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f_3",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "A",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "B",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "HasDirectPerm",
                                            args: [
                                                Var(
                                                    "Mask",
                                                ),
                                                Var(
                                                    "o_1",
                                                ),
                                                Var(
                                                    "f_3",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "HasDirectPerm",
                                        args: [
                                            Var(
                                                "Mask",
                                            ),
                                            Var(
                                                "o_1",
                                            ),
                                            Var(
                                                "f_3",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "Mask",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "o_1",
                                                            ),
                                                            Var(
                                                                "f_3",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Gt,
                                        rhs: Var(
                                            "NoPerm",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "sumMask",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "ResultMask",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MaskType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "SummandMask1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MaskType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "SummandMask2",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MaskType",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "A",
                            "B",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ResultMask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "SummandMask1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "SummandMask2",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o_1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f_3",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "A",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "B",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "sumMask",
                                            args: [
                                                Var(
                                                    "ResultMask",
                                                ),
                                                Var(
                                                    "SummandMask1",
                                                ),
                                                Var(
                                                    "SummandMask2",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "ResultMask",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o_1",
                                                        ),
                                                        Var(
                                                            "f_3",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "sumMask",
                                            args: [
                                                Var(
                                                    "ResultMask",
                                                ),
                                                Var(
                                                    "SummandMask1",
                                                ),
                                                Var(
                                                    "SummandMask2",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "SummandMask1",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o_1",
                                                        ),
                                                        Var(
                                                            "f_3",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "sumMask",
                                            args: [
                                                Var(
                                                    "ResultMask",
                                                ),
                                                Var(
                                                    "SummandMask1",
                                                ),
                                                Var(
                                                    "SummandMask2",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "SummandMask2",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o_1",
                                                        ),
                                                        Var(
                                                            "f_3",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "sumMask",
                                        args: [
                                            Var(
                                                "ResultMask",
                                            ),
                                            Var(
                                                "SummandMask1",
                                            ),
                                            Var(
                                                "SummandMask2",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "ResultMask",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "o_1",
                                                            ),
                                                            Var(
                                                                "f_3",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "SummandMask1",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "o_1",
                                                                    ),
                                                                    Var(
                                                                        "f_3",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Add,
                                                rhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "SummandMask2",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "o_1",
                                                                    ),
                                                                    Var(
                                                                        "f_3",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "neverTriggered1",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y_1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Ref",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "neverTriggered2",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y_1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Ref",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "invRecv1",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x_1_1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b_1_1",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Ref",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "invRecv2",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x_1_1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b_1_1",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Ref",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "qpRange1",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x_1_1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b_1_1",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "qpRange2",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x_1_1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b_1_1",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "FrameType",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "EmptyFrame",
                ],
                type_: App(
                    TypeApp {
                        head: "FrameType",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "FrameFragment",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "FrameType",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "ConditionalFrame",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "p",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Perm",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f_5",
                    ),
                    type_: App(
                        TypeApp {
                            head: "FrameType",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "FrameType",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "dummyFunction",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "CombineFrames",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a_1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "FrameType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b_1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "FrameType",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "FrameType",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "p",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Perm",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f_5",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "FrameType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "ConditionalFrame",
                                            args: [
                                                Var(
                                                    "p",
                                                ),
                                                Var(
                                                    "f_5",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "ConditionalFrame",
                                        args: [
                                            Var(
                                                "p",
                                            ),
                                            Var(
                                                "f_5",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: IfThenElse(
                                    IfThenElseExpr {
                                        cond: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "p",
                                                ),
                                                op: Gt,
                                                rhs: Dec(
                                                    Dec {
                                                        whole: "0",
                                                        fract: Some(
                                                            "000000000",
                                                        ),
                                                        exp: None,
                                                    },
                                                ),
                                            },
                                        ),
                                        then: Var(
                                            "f_5",
                                        ),
                                        else_: Var(
                                            "EmptyFrame",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "InsidePredicate",
            type_params: [
                "A",
                "B",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "p",
                    ),
                    type_: Atom(
                        Paren(
                            App(
                                TypeApp {
                                    head: "Field",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "A",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "FrameType",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v_1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "FrameType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "q",
                    ),
                    type_: Atom(
                        Paren(
                            App(
                                TypeApp {
                                    head: "Field",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "B",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "FrameType",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "w",
                    ),
                    type_: App(
                        TypeApp {
                            head: "FrameType",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "A",
                            "B",
                            "C",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "p",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "A",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "FrameType",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v_1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "FrameType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "q",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "B",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "FrameType",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "FrameType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "C",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "FrameType",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "u",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "FrameType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "InsidePredicate",
                                            args: [
                                                Var(
                                                    "p",
                                                ),
                                                Var(
                                                    "v_1",
                                                ),
                                                Var(
                                                    "q",
                                                ),
                                                Var(
                                                    "w",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "InsidePredicate",
                                            args: [
                                                Var(
                                                    "q",
                                                ),
                                                Var(
                                                    "w",
                                                ),
                                                Var(
                                                    "r",
                                                ),
                                                Var(
                                                    "u",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "InsidePredicate",
                                                args: [
                                                    Var(
                                                        "p",
                                                    ),
                                                    Var(
                                                        "v_1",
                                                    ),
                                                    Var(
                                                        "q",
                                                    ),
                                                    Var(
                                                        "w",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "InsidePredicate",
                                                args: [
                                                    Var(
                                                        "q",
                                                    ),
                                                    Var(
                                                        "w",
                                                    ),
                                                    Var(
                                                        "r",
                                                    ),
                                                    Var(
                                                        "u",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "InsidePredicate",
                                        args: [
                                            Var(
                                                "p",
                                            ),
                                            Var(
                                                "v_1",
                                            ),
                                            Var(
                                                "r",
                                            ),
                                            Var(
                                                "u",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "A",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "p",
                                        ],
                                        type_: Atom(
                                            Paren(
                                                App(
                                                    TypeApp {
                                                        head: "Field",
                                                        tail: Some(
                                                            App(
                                                                TypeApp {
                                                                    head: "A",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "FrameType",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v_1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "FrameType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "FrameType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "InsidePredicate",
                                            args: [
                                                Var(
                                                    "p",
                                                ),
                                                Var(
                                                    "v_1",
                                                ),
                                                Var(
                                                    "p",
                                                ),
                                                Var(
                                                    "w",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Neg(
                            NegExpr {
                                op: Logical,
                                expr: FuncCall(
                                    FuncCall {
                                        target: "InsidePredicate",
                                        args: [
                                            Var(
                                                "p",
                                            ),
                                            Var(
                                                "v_1",
                                            ),
                                            Var(
                                                "p",
                                            ),
                                            Var(
                                                "w",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Set",
                    type_params: [
                        "T",
                    ],
                    type_: Some(
                        Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "T",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Card",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Card",
                                            args: [
                                                Var(
                                                    "s",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "0",
                                ),
                                op: Le,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Card",
                                        args: [
                                            Var(
                                                "s",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Empty",
            type_params: [
                "T",
            ],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Set#Empty",
                                                    args: [],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Set#Empty",
                                                args: [],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Card",
                                            args: [
                                                Var(
                                                    "s",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Equiv(
                                    EquivExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "Set#Card",
                                                        args: [
                                                            Var(
                                                                "s",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "s",
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "Set#Empty",
                                                        args: [],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "Set#Card",
                                                        args: [
                                                            Var(
                                                                "s",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Neq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: Exists,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "x",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "T",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "s",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Singleton",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Singleton",
                                            args: [
                                                Var(
                                                    "r",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "Set#Singleton",
                                        args: [
                                            Var(
                                                "r",
                                            ),
                                        ],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "r",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Set#Singleton",
                                                    args: [
                                                        Var(
                                                            "r",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Set#Singleton",
                                                args: [
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "r",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "o",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Card",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "Set#Singleton",
                                                        args: [
                                                            Var(
                                                                "r",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Card",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "Set#Singleton",
                                                    args: [
                                                        Var(
                                                            "r",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "1",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#UnionOne",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Set#UnionOne",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Set#UnionOne",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "o",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "a",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "o",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#UnionOne",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "Set#UnionOne",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#UnionOne",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "a",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "a",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Set#UnionOne",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Card",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "Set#UnionOne",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "a",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Set#Card",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Set#UnionOne",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Set#Card",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Card",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "Set#UnionOne",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "a",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Set#Card",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Set#UnionOne",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Term(
                                            Term {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "Set#Card",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Union",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Set#Union",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Set#Union",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "a",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "o",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Or,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "b",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "o",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Union",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "a",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "a",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Set#Union",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Union",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "b",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "b",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Set#Union",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Intersection",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Set#Intersection",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Intersection",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "a",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Intersection",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "b",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Set#Intersection",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "a",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "o",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "b",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "o",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Union",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "Set#Union",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Union",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "Set#Union",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Union",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Union",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "Set#Union",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Union",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "Set#Union",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Union",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Intersection",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "Set#Intersection",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Intersection",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "Set#Intersection",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Intersection",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Intersection",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "Set#Intersection",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Intersection",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "Set#Intersection",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Intersection",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Card",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "Set#Union",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Card",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "Set#Intersection",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Term(
                                    Term {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Set#Card",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Set#Union",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "b",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Add,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Set#Card",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Set#Intersection",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "b",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Set#Card",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Add,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Set#Card",
                                                args: [
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Difference",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Set#Difference",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Difference",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "a",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Set#Difference",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "a",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "o",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "b",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "o",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Difference",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "b",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "b",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Array(
                                            ArrayExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "Set#Difference",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Card",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "Set#Difference",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Term(
                                            Term {
                                                lhs: Term(
                                                    Term {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "Set#Card",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "Set#Difference",
                                                                            args: [
                                                                                Var(
                                                                                    "a",
                                                                                ),
                                                                                Var(
                                                                                    "b",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Add,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "Set#Card",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "Set#Difference",
                                                                            args: [
                                                                                Var(
                                                                                    "b",
                                                                                ),
                                                                                Var(
                                                                                    "a",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: Add,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "Set#Card",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "Set#Intersection",
                                                                    args: [
                                                                        Var(
                                                                            "a",
                                                                        ),
                                                                        Var(
                                                                            "b",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Set#Card",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Set#Union",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "b",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Set#Card",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Set#Difference",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "b",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Term(
                                            Term {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "Set#Card",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Sub,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "Set#Card",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "Set#Intersection",
                                                                    args: [
                                                                        Var(
                                                                            "a",
                                                                        ),
                                                                        Var(
                                                                            "b",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Subset",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Subset",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Subset",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "o",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "T",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [
                                                Trigger(
                                                    [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "a",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "o",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                Trigger(
                                                    [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "b",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "o",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "a",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "o",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "b",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "o",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Equal",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Equal",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Equal",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "o",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "T",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [
                                                Trigger(
                                                    [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "a",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "o",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                Trigger(
                                                    [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "b",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "o",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            expr: Equiv(
                                                EquivExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "a",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "o",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "b",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "o",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Equal",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Equal",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Math#min",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Math#min",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Math#min",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "a",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Math#min",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "b",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "a",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Math#min",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Math#min",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Math#min",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "a",
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Math#min",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Math#clip",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Math#clip",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "a",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Math#clip",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "a",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Math#clip",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Lt,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Math#clip",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "MultiSet",
                    type_params: [
                        "T",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "MultiSet#Select",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "ms",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ms",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Select",
                                            args: [
                                                Var(
                                                    "ms",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Select",
                                        args: [
                                            Var(
                                                "ms",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Ge,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "MultiSet#Card",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Card",
                                            args: [
                                                Var(
                                                    "s",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "0",
                                ),
                                op: Le,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Card",
                                        args: [
                                            Var(
                                                "s",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "MultiSet#Empty",
            type_params: [
                "T",
            ],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "MultiSet",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Select",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Empty",
                                                        args: [],
                                                    },
                                                ),
                                                Var(
                                                    "o",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Select",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "MultiSet#Empty",
                                                    args: [],
                                                },
                                            ),
                                            Var(
                                                "o",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Card",
                                            args: [
                                                Var(
                                                    "s",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Equiv(
                                    EquivExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Card",
                                                        args: [
                                                            Var(
                                                                "s",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "s",
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Empty",
                                                        args: [],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Card",
                                                        args: [
                                                            Var(
                                                                "s",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Neq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: Exists,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "x",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "T",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "0",
                                                            ),
                                                            op: Lt,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "MultiSet#Select",
                                                                    args: [
                                                                        Var(
                                                                            "s",
                                                                        ),
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "MultiSet#Singleton",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "MultiSet",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Select",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Singleton",
                                                        args: [
                                                            Var(
                                                                "r",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "o",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Equiv(
                                    EquivExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Select",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "MultiSet#Singleton",
                                                                    args: [
                                                                        Var(
                                                                            "r",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            Var(
                                                                "o",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "r",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "o",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Equiv(
                                    EquivExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Select",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "MultiSet#Singleton",
                                                                    args: [
                                                                        Var(
                                                                            "r",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            Var(
                                                                "o",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "r",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "o",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Singleton",
                                            args: [
                                                Var(
                                                    "r",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Card",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#Singleton",
                                                            args: [
                                                                Var(
                                                                    "r",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Select",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#Singleton",
                                                            args: [
                                                                Var(
                                                                    "r",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Singleton",
                                            args: [
                                                Var(
                                                    "r",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Singleton",
                                        args: [
                                            Var(
                                                "r",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#UnionOne",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "MultiSet#Empty",
                                                    args: [],
                                                },
                                            ),
                                            Var(
                                                "r",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "MultiSet#UnionOne",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "MultiSet",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Select",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#UnionOne",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "o",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#UnionOne",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Select",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "o",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Select",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "MultiSet#UnionOne",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "o",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: IfThenElse(
                                    IfThenElseExpr {
                                        cond: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "o",
                                                ),
                                            },
                                        ),
                                        then: Term(
                                            Term {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Select",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "o",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                        else_: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Select",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Card",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#UnionOne",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#UnionOne",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Card",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Card",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "MultiSet#UnionOne",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Card",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Add,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#UnionOne",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Select",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#UnionOne",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Gt,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Card",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#UnionOne",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Gt,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "MultiSet#Union",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "MultiSet",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Select",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Union",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "o",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Union",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Select",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "o",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Select",
                                            args: [
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "o",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Select",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "MultiSet#Union",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "o",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Select",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Add,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Select",
                                                args: [
                                                    Var(
                                                        "b",
                                                    ),
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Card",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Union",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Card",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Union",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Card",
                                            args: [
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Union",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Card",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "MultiSet#Union",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Card",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Add,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Card",
                                                args: [
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "MultiSet#Intersection",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "MultiSet",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Select",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Intersection",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "o",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Select",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "MultiSet#Intersection",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "o",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Math#min",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "MultiSet#Select",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "o",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "MultiSet#Select",
                                                    args: [
                                                        Var(
                                                            "b",
                                                        ),
                                                        Var(
                                                            "o",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Intersection",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Intersection",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Intersection",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "MultiSet#Intersection",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Intersection",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Intersection",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Intersection",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Intersection",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "MultiSet#Intersection",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Intersection",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "MultiSet#Difference",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "MultiSet",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Select",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Difference",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "o",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Select",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "MultiSet#Difference",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "o",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Math#clip",
                                        args: [
                                            Term(
                                                Term {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#Select",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "o",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Sub,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#Select",
                                                            args: [
                                                                Var(
                                                                    "b",
                                                                ),
                                                                Var(
                                                                    "o",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Difference",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Select",
                                            args: [
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Select",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Select",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Le,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Select",
                                                args: [
                                                    Var(
                                                        "b",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Select",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#Difference",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "b",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Card",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Difference",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Term(
                                            Term {
                                                lhs: Term(
                                                    Term {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "MultiSet#Card",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "MultiSet#Difference",
                                                                            args: [
                                                                                Var(
                                                                                    "a",
                                                                                ),
                                                                                Var(
                                                                                    "b",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Add,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "MultiSet#Card",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "MultiSet#Difference",
                                                                            args: [
                                                                                Var(
                                                                                    "b",
                                                                                ),
                                                                                Var(
                                                                                    "a",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: Add,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Nat(
                                                            "2",
                                                        ),
                                                        op: Mul,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "MultiSet#Card",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "MultiSet#Intersection",
                                                                            args: [
                                                                                Var(
                                                                                    "a",
                                                                                ),
                                                                                Var(
                                                                                    "b",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Card",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#Union",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "b",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "MultiSet#Card",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#Difference",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "b",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Term(
                                            Term {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Card",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Sub,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "MultiSet#Card",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "MultiSet#Intersection",
                                                                    args: [
                                                                        Var(
                                                                            "a",
                                                                        ),
                                                                        Var(
                                                                            "b",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "MultiSet#Subset",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Subset",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Subset",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "o",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "T",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [
                                                Trigger(
                                                    [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "MultiSet#Select",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "o",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                Trigger(
                                                    [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "MultiSet#Select",
                                                                args: [
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                    Var(
                                                                        "o",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#Select",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "o",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Le,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#Select",
                                                            args: [
                                                                Var(
                                                                    "b",
                                                                ),
                                                                Var(
                                                                    "o",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "MultiSet#Equal",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Equal",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Equal",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "o",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "T",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [
                                                Trigger(
                                                    [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "MultiSet#Select",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "o",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                Trigger(
                                                    [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "MultiSet#Select",
                                                                args: [
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                    Var(
                                                                        "o",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#Select",
                                                            args: [
                                                                Var(
                                                                    "a",
                                                                ),
                                                                Var(
                                                                    "o",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "MultiSet#Select",
                                                            args: [
                                                                Var(
                                                                    "b",
                                                                ),
                                                                Var(
                                                                    "o",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Equal",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Equal",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "MultiSet#Disjoint",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "MultiSet",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MultiSet",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "MultiSet#Disjoint",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MultiSet#Disjoint",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "o",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "T",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [
                                                Trigger(
                                                    [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "MultiSet#Select",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "o",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                ),
                                                Trigger(
                                                    [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "MultiSet#Select",
                                                                args: [
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                    Var(
                                                                        "o",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "MultiSet#Select",
                                                                    args: [
                                                                        Var(
                                                                            "a",
                                                                        ),
                                                                        Var(
                                                                            "o",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                    op: Or,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "MultiSet#Select",
                                                                    args: [
                                                                        Var(
                                                                            "b",
                                                                        ),
                                                                        Var(
                                                                            "o",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "f_6",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "NormalField",
                                    tail: Some(
                                        AtomApp(
                                            TypeApp {
                                                head: Int,
                                                tail: None,
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: FuncCall(
                        FuncCall {
                            target: "IsPredicateField",
                            args: [
                                Var(
                                    "f_6",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: FuncCall(
                        FuncCall {
                            target: "IsWandField",
                            args: [
                                Var(
                                    "f_6",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "g",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "NormalField",
                                    tail: Some(
                                        AtomApp(
                                            TypeApp {
                                                head: Bool,
                                                tail: None,
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: FuncCall(
                        FuncCall {
                            target: "IsPredicateField",
                            args: [
                                Var(
                                    "g",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: FuncCall(
                        FuncCall {
                            target: "IsWandField",
                            args: [
                                Var(
                                    "g",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "PredicateType_P",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "P",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b_2",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "PredicateType_P",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "FrameType",
                                                tail: None,
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "P#sm",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b_2",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "PredicateType_P",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "PMaskType",
                                                tail: None,
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b_2",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "PredicateMaskField",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "P",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "b_2",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "PredicateMaskField",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "P",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "b_2",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "P#sm",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "b_2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b_2",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "P",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "b_2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: FuncCall(
                            FuncCall {
                                target: "IsPredicateField",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "P",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "b_2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b_2",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "P",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "b_2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "getPredicateId",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "P",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "b_2",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "P#trigger",
            type_params: [
                "A",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "Heap",
                    ),
                    type_: App(
                        TypeApp {
                            head: "HeapType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pred",
                    ),
                    type_: Atom(
                        Paren(
                            App(
                                TypeApp {
                                    head: "Field",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "A",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "FrameType",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "P#everUsed",
            type_params: [
                "A",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pred",
                    ),
                    type_: Atom(
                        Paren(
                            App(
                                TypeApp {
                                    head: "Field",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "A",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "FrameType",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b_2",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x2",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b2",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "P",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "b_2",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "P",
                                            args: [
                                                Var(
                                                    "x2",
                                                ),
                                                Var(
                                                    "b2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "P",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "b_2",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "P",
                                                args: [
                                                    Var(
                                                        "x2",
                                                    ),
                                                    Var(
                                                        "b2",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "x2",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b_2",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "b2",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b_2",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x2",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b2",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "P#sm",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "b_2",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "P#sm",
                                            args: [
                                                Var(
                                                    "x2",
                                                ),
                                                Var(
                                                    "b2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "P#sm",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "b_2",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "P#sm",
                                                args: [
                                                    Var(
                                                        "x2",
                                                    ),
                                                    Var(
                                                        "b2",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "x2",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b_2",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "b2",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "Heap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b_2",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "P#trigger",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "P",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "b_2",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: FuncCall(
                            FuncCall {
                                target: "P#everUsed",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "P",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "b_2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "known_folded_1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xs",
                                ],
                                type_: Atom(
                                    Paren(
                                        App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "Ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b_2",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "Heap",
                            "Mask",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "QPMask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "PostHeap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "PostMask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "perm",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Perm",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "newVersion",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "FrameType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ExhaleHeap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Mask",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "ZeroMask",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "Heap",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "$allocated",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: BoolLit(
                                                        false,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "QPMask",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "y_1",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "Ref",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "y_1",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_2",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Mask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "y_1",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_2",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "xs",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "y_1",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "xs",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "y_1",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "NoPerm",
                                                                        ),
                                                                        op: Lt,
                                                                        rhs: Var(
                                                                            "FullPerm",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "invRecv1",
                                                                                args: [
                                                                                    Var(
                                                                                        "y_1",
                                                                                    ),
                                                                                    Var(
                                                                                        "b_2",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "y_1",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "qpRange1",
                                                                        args: [
                                                                            Var(
                                                                                "y_1",
                                                                            ),
                                                                            Var(
                                                                                "b_2",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x_1_1",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "Ref",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "b_1_1",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "invRecv1",
                                                                    args: [
                                                                        Var(
                                                                            "x_1_1",
                                                                        ),
                                                                        Var(
                                                                            "b_1_1",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "xs",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "invRecv1",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "x_1_1",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "b_1_1",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "NoPerm",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Var(
                                                                                    "FullPerm",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "qpRange1",
                                                                        args: [
                                                                            Var(
                                                                                "x_1_1",
                                                                            ),
                                                                            Var(
                                                                                "b_1_1",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "invRecv1",
                                                                                args: [
                                                                                    Var(
                                                                                        "x_1_1",
                                                                                    ),
                                                                                    Var(
                                                                                        "b_1_1",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "x_1_1",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "b_2",
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "b_1_1",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x_1_1",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "Ref",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "b_1_1",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "QPMask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x_1_1",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_1_1",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "xs",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "invRecv1",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "x_1_1",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "b_1_1",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "NoPerm",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Var(
                                                                                    "FullPerm",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "qpRange1",
                                                                        args: [
                                                                            Var(
                                                                                "x_1_1",
                                                                            ),
                                                                            Var(
                                                                                "b_1_1",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Implies(
                                                                    ImpliesExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "NoPerm",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Var(
                                                                                    "FullPerm",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        rhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "invRecv1",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "x_1_1",
                                                                                                    ),
                                                                                                    Var(
                                                                                                        "b_1_1",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: Var(
                                                                                            "x_1_1",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "b_2",
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: Var(
                                                                                            "b_1_1",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "QPMask",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "null",
                                                                                            ),
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "P",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "x_1_1",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "b_1_1",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Term(
                                                                            Term {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "Mask",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "null",
                                                                                                    ),
                                                                                                    FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "P",
                                                                                                            args: [
                                                                                                                Var(
                                                                                                                    "x_1_1",
                                                                                                                ),
                                                                                                                Var(
                                                                                                                    "b_1_1",
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Add,
                                                                                rhs: Var(
                                                                                    "FullPerm",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [
                                                    "A",
                                                    "B",
                                                ],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "o_2",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "Ref",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "f_4",
                                                                ],
                                                                type_: Atom(
                                                                    Paren(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "Field",
                                                                                tail: Some(
                                                                                    App(
                                                                                        TypeApp {
                                                                                            head: "A",
                                                                                            tail: Some(
                                                                                                App(
                                                                                                    TypeApp {
                                                                                                        head: "B",
                                                                                                        tail: None,
                                                                                                    },
                                                                                                ),
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Mask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "o_2",
                                                                                ),
                                                                                Var(
                                                                                    "f_4",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "QPMask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "o_2",
                                                                                ),
                                                                                Var(
                                                                                    "f_4",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "o_2",
                                                                                ),
                                                                                op: Neq,
                                                                                rhs: Var(
                                                                                    "null",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: Or,
                                                                        rhs: Neg(
                                                                            NegExpr {
                                                                                op: Logical,
                                                                                expr: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "IsPredicateField",
                                                                                        args: [
                                                                                            Var(
                                                                                                "f_4",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: Or,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "getPredicateId",
                                                                                args: [
                                                                                    Var(
                                                                                        "f_4",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Neq,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "Mask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "o_2",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_4",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "QPMask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "o_2",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_4",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x_1_1",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "Ref",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "b_1_1",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "QPMask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x_1_1",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_1_1",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Neg(
                                                            NegExpr {
                                                                op: Logical,
                                                                expr: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "xs",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "invRecv1",
                                                                                                            args: [
                                                                                                                Var(
                                                                                                                    "x_1_1",
                                                                                                                ),
                                                                                                                Var(
                                                                                                                    "b_1_1",
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "NoPerm",
                                                                                        ),
                                                                                        op: Lt,
                                                                                        rhs: Var(
                                                                                            "FullPerm",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "qpRange1",
                                                                                args: [
                                                                                    Var(
                                                                                        "x_1_1",
                                                                                    ),
                                                                                    Var(
                                                                                        "b_1_1",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "QPMask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "null",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "P",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x_1_1",
                                                                                                ),
                                                                                                Var(
                                                                                                    "b_1_1",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "Mask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "null",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "P",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x_1_1",
                                                                                                ),
                                                                                                Var(
                                                                                                    "b_1_1",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Mask",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "QPMask",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "xs",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "Heap",
                                            ),
                                            op: Eq,
                                            rhs: Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "Heap",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "Mask",
                                            ),
                                            op: Eq,
                                            rhs: Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "Mask",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PostHeap",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "Heap",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PostMask",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "Mask",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "PostHeap",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PostMask",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "ZeroMask",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "PostHeap",
                                                ),
                                                Var(
                                                    "PostMask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Var(
                                                            "b_2",
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "perm",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Var(
                                                                            "FullPerm",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assume,
                                                                    attrs: [],
                                                                    proposition: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "x",
                                                                            ),
                                                                            op: Neq,
                                                                            rhs: Var(
                                                                                "null",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "PostMask",
                                                                            subscripts: [
                                                                                [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_6",
                                                                                    ),
                                                                                ],
                                                                            ],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Term(
                                                                            Term {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "PostMask",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "x",
                                                                                                    ),
                                                                                                    Var(
                                                                                                        "f_6",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Add,
                                                                                rhs: Var(
                                                                                    "perm",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assume,
                                                                    attrs: [],
                                                                    proposition: FuncCall(
                                                                        FuncCall {
                                                                            target: "state",
                                                                            args: [
                                                                                Var(
                                                                                    "PostHeap",
                                                                                ),
                                                                                Var(
                                                                                    "PostMask",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assume,
                                                                    attrs: [],
                                                                    proposition: FuncCall(
                                                                        FuncCall {
                                                                            target: "state",
                                                                            args: [
                                                                                Var(
                                                                                    "PostHeap",
                                                                                ),
                                                                                Var(
                                                                                    "PostMask",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assert,
                                                                    attrs: [
                                                                        Attr(
                                                                            AttrContent {
                                                                                ident: "msg",
                                                                                params: [
                                                                                    String(
                                                                                        StringLit {
                                                                                            text: "  Contract might not be well-formed. There might be insufficient permission to access x.f. (knownfolded.vpr@14.11) [55]",
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    proposition: FuncCall(
                                                                        FuncCall {
                                                                            target: "HasDirectPerm",
                                                                            args: [
                                                                                Var(
                                                                                    "PostMask",
                                                                                ),
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "f_6",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assume,
                                                                    attrs: [],
                                                                    proposition: FuncCall(
                                                                        FuncCall {
                                                                            target: "state",
                                                                            args: [
                                                                                Var(
                                                                                    "PostHeap",
                                                                                ),
                                                                                Var(
                                                                                    "PostMask",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assume,
                                                                    attrs: [],
                                                                    proposition: Rel(
                                                                        RelExpr {
                                                                            lhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "PostHeap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "f_6",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Nat(
                                                                                "0",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assume,
                                                                    attrs: [],
                                                                    proposition: FuncCall(
                                                                        FuncCall {
                                                                            target: "state",
                                                                            args: [
                                                                                Var(
                                                                                    "PostHeap",
                                                                                ),
                                                                                Var(
                                                                                    "PostMask",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: Some(
                                                        Else(
                                                            [
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "perm",
                                                                                    subscripts: [],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                Var(
                                                                                    "FullPerm",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "x",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "null",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "PostMask",
                                                                                    subscripts: [
                                                                                        [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "g",
                                                                                            ),
                                                                                        ],
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                Term(
                                                                                    Term {
                                                                                        lhs: Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "PostMask",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "x",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "g",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Add,
                                                                                        rhs: Var(
                                                                                            "perm",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: FuncCall(
                                                                                FuncCall {
                                                                                    target: "state",
                                                                                    args: [
                                                                                        Var(
                                                                                            "PostHeap",
                                                                                        ),
                                                                                        Var(
                                                                                            "PostMask",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: FuncCall(
                                                                                FuncCall {
                                                                                    target: "state",
                                                                                    args: [
                                                                                        Var(
                                                                                            "PostHeap",
                                                                                        ),
                                                                                        Var(
                                                                                            "PostMask",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assert,
                                                                            attrs: [
                                                                                Attr(
                                                                                    AttrContent {
                                                                                        ident: "msg",
                                                                                        params: [
                                                                                            String(
                                                                                                StringLit {
                                                                                                    text: "  Contract might not be well-formed. There might be insufficient permission to access x.g. (knownfolded.vpr@14.11) [56]",
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            proposition: FuncCall(
                                                                                FuncCall {
                                                                                    target: "HasDirectPerm",
                                                                                    args: [
                                                                                        Var(
                                                                                            "PostMask",
                                                                                        ),
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                        Var(
                                                                                            "g",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: FuncCall(
                                                                                FuncCall {
                                                                                    target: "state",
                                                                                    args: [
                                                                                        Var(
                                                                                            "PostHeap",
                                                                                        ),
                                                                                        Var(
                                                                                            "PostMask",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "PostHeap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "g",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: FuncCall(
                                                                                FuncCall {
                                                                                    target: "state",
                                                                                    args: [
                                                                                        Var(
                                                                                            "PostHeap",
                                                                                        ),
                                                                                        Var(
                                                                                            "PostMask",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: BoolLit(
                                                        false,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "P#trigger",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "P",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "b_2",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "null",
                                                                ),
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "P",
                                                                        args: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "b_2",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "FrameFragment",
                                                    args: [
                                                        IfThenElse(
                                                            IfThenElseExpr {
                                                                cond: Var(
                                                                    "b_2",
                                                                ),
                                                                then: FuncCall(
                                                                    FuncCall {
                                                                        target: "FrameFragment",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "Heap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "f_6",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                else_: FuncCall(
                                                                    FuncCall {
                                                                        target: "FrameFragment",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "Heap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "g",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "perm",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "NoPerm",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "perm",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "perm",
                                                ),
                                                op: Add,
                                                rhs: Var(
                                                    "FullPerm",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "perm",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "NoPerm",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "msg",
                                                                params: [
                                                                    String(
                                                                        StringLit {
                                                                            text: "  Unfolding P(x, b) might fail. There might be insufficient permission to access P(x, b). (knownfolded.vpr@16.3) [58]",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "perm",
                                                            ),
                                                            op: Le,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Mask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_2",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Mask",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "null",
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "P",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                                Var(
                                                                    "b_2",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "Mask",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Sub,
                                                rhs: Var(
                                                    "perm",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "HasDirectPerm",
                                                        args: [
                                                            Var(
                                                                "Mask",
                                                            ),
                                                            Var(
                                                                "null",
                                                            ),
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "P",
                                                                    args: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                        Var(
                                                                            "b_2",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Havoc(
                                                HavocCmd {
                                                    vars: [
                                                        "newVersion",
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Heap",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "newVersion",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "b_2",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "perm",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "FullPerm",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Neq,
                                                            rhs: Var(
                                                                "null",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Mask",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                    Var(
                                                                        "f_6",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "Mask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_6",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Add,
                                                                rhs: Var(
                                                                    "perm",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "Heap",
                                                                ),
                                                                Var(
                                                                    "Mask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "perm",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Var(
                                                                    "FullPerm",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "x",
                                                                    ),
                                                                    op: Neq,
                                                                    rhs: Var(
                                                                        "null",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "Mask",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "g",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Term(
                                                                    Term {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "Mask",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "g",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Add,
                                                                        rhs: Var(
                                                                            "perm",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: FuncCall(
                                                                FuncCall {
                                                                    target: "state",
                                                                    args: [
                                                                        Var(
                                                                            "Heap",
                                                                        ),
                                                                        Var(
                                                                            "Mask",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "b_2",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "msg",
                                                                params: [
                                                                    String(
                                                                        StringLit {
                                                                            text: "  Assignment might fail. There might be insufficient permission to access x.f. (knownfolded.vpr@19.5) [59]",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "FullPerm",
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Mask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "f_6",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Heap",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                    Var(
                                                                        "f_6",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Nat(
                                                            "0",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "Heap",
                                                                ),
                                                                Var(
                                                                    "Mask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assert,
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "msg",
                                                                        params: [
                                                                            String(
                                                                                StringLit {
                                                                                    text: "  Assignment might fail. There might be insufficient permission to access x.g. (knownfolded.vpr@21.5) [60]",
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "FullPerm",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "Mask",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                        Var(
                                                                                            "g",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "Heap",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "g",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                BoolLit(
                                                                    true,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: FuncCall(
                                                                FuncCall {
                                                                    target: "state",
                                                                    args: [
                                                                        Var(
                                                                            "Heap",
                                                                        ),
                                                                        Var(
                                                                            "Mask",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "b_2",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "perm",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "NoPerm",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "perm",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "perm",
                                                                ),
                                                                op: Add,
                                                                rhs: Var(
                                                                    "FullPerm",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "perm",
                                                                ),
                                                                op: Neq,
                                                                rhs: Var(
                                                                    "NoPerm",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assert,
                                                                    attrs: [
                                                                        Attr(
                                                                            AttrContent {
                                                                                ident: "msg",
                                                                                params: [
                                                                                    String(
                                                                                        StringLit {
                                                                                            text: "  Postcondition of test1 might not hold. There might be insufficient permission to access x.f. (knownfolded.vpr@14.11) [61]",
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    proposition: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "perm",
                                                                            ),
                                                                            op: Le,
                                                                            rhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "Mask",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "f_6",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Mask",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                    Var(
                                                                        "f_6",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "Mask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_6",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Sub,
                                                                rhs: Var(
                                                                    "perm",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "msg",
                                                                params: [
                                                                    String(
                                                                        StringLit {
                                                                            text: "  Postcondition of test1 might not hold. Assertion x.f == 0 might not hold. (knownfolded.vpr@14.11) [62]",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "f_6",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "perm",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Var(
                                                                    "NoPerm",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "perm",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Term(
                                                                    Term {
                                                                        lhs: Var(
                                                                            "perm",
                                                                        ),
                                                                        op: Add,
                                                                        rhs: Var(
                                                                            "FullPerm",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                StructuredCmd(
                                                    If(
                                                        IfCmd {
                                                            guard: Expr(
                                                                Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "perm",
                                                                        ),
                                                                        op: Neq,
                                                                        rhs: Var(
                                                                            "NoPerm",
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                            then: [
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assert,
                                                                            attrs: [
                                                                                Attr(
                                                                                    AttrContent {
                                                                                        ident: "msg",
                                                                                        params: [
                                                                                            String(
                                                                                                StringLit {
                                                                                                    text: "  Postcondition of test1 might not hold. There might be insufficient permission to access x.g. (knownfolded.vpr@14.11) [63]",
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            proposition: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "perm",
                                                                                    ),
                                                                                    op: Le,
                                                                                    rhs: Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "Mask",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "x",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "g",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                            else_: None,
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "Mask",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "g",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Term(
                                                                    Term {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "Mask",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "g",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Sub,
                                                                        rhs: Var(
                                                                            "perm",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assert,
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "msg",
                                                                        params: [
                                                                            String(
                                                                                StringLit {
                                                                                    text: "  Postcondition of test1 might not hold. Assertion x.g might not hold. (knownfolded.vpr@14.11) [64]",
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            proposition: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "g",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "ExhaleHeap",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "IdenticalOnKnownLocations",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "ExhaleHeap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Heap",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "ExhaleHeap",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "known_folded_2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xs",
                                ],
                                type_: Atom(
                                    Paren(
                                        App(
                                            TypeApp {
                                                head: "Set",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "Ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b_2",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "Heap",
                            "Mask",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "QPMask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "PostHeap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "PostMask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "perm",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Perm",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "UnfoldingHeap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "UnfoldingMask",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "MaskType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "newVersion",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "FrameType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "freshVersion",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "FrameType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ExhaleHeap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Mask",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "ZeroMask",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "Heap",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "$allocated",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: BoolLit(
                                                        false,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "QPMask",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "y_1",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "Ref",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "y_1",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_2",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Mask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "y_1",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_2",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "xs",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "y_1",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "xs",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "y_1",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "NoPerm",
                                                                        ),
                                                                        op: Lt,
                                                                        rhs: Var(
                                                                            "FullPerm",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "invRecv2",
                                                                                args: [
                                                                                    Var(
                                                                                        "y_1",
                                                                                    ),
                                                                                    Var(
                                                                                        "b_2",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "y_1",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "qpRange2",
                                                                        args: [
                                                                            Var(
                                                                                "y_1",
                                                                            ),
                                                                            Var(
                                                                                "b_2",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x_1_1",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "Ref",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "b_1_1",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "invRecv2",
                                                                    args: [
                                                                        Var(
                                                                            "x_1_1",
                                                                        ),
                                                                        Var(
                                                                            "b_1_1",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "xs",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "invRecv2",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "x_1_1",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "b_1_1",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "NoPerm",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Var(
                                                                                    "FullPerm",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "qpRange2",
                                                                        args: [
                                                                            Var(
                                                                                "x_1_1",
                                                                            ),
                                                                            Var(
                                                                                "b_1_1",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "invRecv2",
                                                                                args: [
                                                                                    Var(
                                                                                        "x_1_1",
                                                                                    ),
                                                                                    Var(
                                                                                        "b_1_1",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "x_1_1",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "b_2",
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "b_1_1",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x_1_1",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "Ref",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "b_1_1",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "QPMask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x_1_1",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_1_1",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "xs",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "invRecv2",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "x_1_1",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "b_1_1",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "NoPerm",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Var(
                                                                                    "FullPerm",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "qpRange2",
                                                                        args: [
                                                                            Var(
                                                                                "x_1_1",
                                                                            ),
                                                                            Var(
                                                                                "b_1_1",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Implies(
                                                                    ImpliesExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "NoPerm",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Var(
                                                                                    "FullPerm",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        rhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "invRecv2",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "x_1_1",
                                                                                                    ),
                                                                                                    Var(
                                                                                                        "b_1_1",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: Var(
                                                                                            "x_1_1",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "b_2",
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: Var(
                                                                                            "b_1_1",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "QPMask",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "null",
                                                                                            ),
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "P",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "x_1_1",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "b_1_1",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Term(
                                                                            Term {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "Mask",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "null",
                                                                                                    ),
                                                                                                    FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "P",
                                                                                                            args: [
                                                                                                                Var(
                                                                                                                    "x_1_1",
                                                                                                                ),
                                                                                                                Var(
                                                                                                                    "b_1_1",
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Add,
                                                                                rhs: Var(
                                                                                    "FullPerm",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [
                                                    "A",
                                                    "B",
                                                ],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "o_2",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "Ref",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "f_4",
                                                                ],
                                                                type_: Atom(
                                                                    Paren(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "Field",
                                                                                tail: Some(
                                                                                    App(
                                                                                        TypeApp {
                                                                                            head: "A",
                                                                                            tail: Some(
                                                                                                App(
                                                                                                    TypeApp {
                                                                                                        head: "B",
                                                                                                        tail: None,
                                                                                                    },
                                                                                                ),
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Mask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "o_2",
                                                                                ),
                                                                                Var(
                                                                                    "f_4",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "QPMask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "o_2",
                                                                                ),
                                                                                Var(
                                                                                    "f_4",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "o_2",
                                                                                ),
                                                                                op: Neq,
                                                                                rhs: Var(
                                                                                    "null",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: Or,
                                                                        rhs: Neg(
                                                                            NegExpr {
                                                                                op: Logical,
                                                                                expr: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "IsPredicateField",
                                                                                        args: [
                                                                                            Var(
                                                                                                "f_4",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: Or,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "getPredicateId",
                                                                                args: [
                                                                                    Var(
                                                                                        "f_4",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Neq,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "Mask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "o_2",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_4",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "QPMask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "o_2",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_4",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x_1_1",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "Ref",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "b_1_1",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "QPMask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x_1_1",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_1_1",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Neg(
                                                            NegExpr {
                                                                op: Logical,
                                                                expr: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "xs",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "invRecv2",
                                                                                                            args: [
                                                                                                                Var(
                                                                                                                    "x_1_1",
                                                                                                                ),
                                                                                                                Var(
                                                                                                                    "b_1_1",
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "NoPerm",
                                                                                        ),
                                                                                        op: Lt,
                                                                                        rhs: Var(
                                                                                            "FullPerm",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "qpRange2",
                                                                                args: [
                                                                                    Var(
                                                                                        "x_1_1",
                                                                                    ),
                                                                                    Var(
                                                                                        "b_1_1",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "QPMask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "null",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "P",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x_1_1",
                                                                                                ),
                                                                                                Var(
                                                                                                    "b_1_1",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "Mask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "null",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "P",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x_1_1",
                                                                                                ),
                                                                                                Var(
                                                                                                    "b_1_1",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Mask",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "QPMask",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "xs",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "Heap",
                                            ),
                                            op: Eq,
                                            rhs: Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "Heap",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "Mask",
                                            ),
                                            op: Eq,
                                            rhs: Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "Mask",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PostHeap",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "Heap",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PostMask",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "Mask",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "PostHeap",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PostMask",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "ZeroMask",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "PostHeap",
                                                ),
                                                Var(
                                                    "PostMask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "perm",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "FullPerm",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "PostMask",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "PostMask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "null",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "P",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "b_2",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Add,
                                                                rhs: Var(
                                                                    "perm",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "PostHeap",
                                                                ),
                                                                Var(
                                                                    "PostMask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "PostHeap",
                                                                ),
                                                                Var(
                                                                    "PostMask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "UnfoldingHeap",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "PostHeap",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "UnfoldingMask",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "PostMask",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "P#trigger",
                                                            args: [
                                                                Var(
                                                                    "UnfoldingHeap",
                                                                ),
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "P",
                                                                        args: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "b_2",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "UnfoldingHeap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_2",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "FrameFragment",
                                                                    args: [
                                                                        IfThenElse(
                                                                            IfThenElseExpr {
                                                                                cond: Var(
                                                                                    "b_2",
                                                                                ),
                                                                                then: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "FrameFragment",
                                                                                        args: [
                                                                                            Array(
                                                                                                ArrayExpr {
                                                                                                    expr: Var(
                                                                                                        "UnfoldingHeap",
                                                                                                    ),
                                                                                                    subscripts: [
                                                                                                        ArraySubscript {
                                                                                                            keys: [
                                                                                                                Var(
                                                                                                                    "x",
                                                                                                                ),
                                                                                                                Var(
                                                                                                                    "f_6",
                                                                                                                ),
                                                                                                            ],
                                                                                                            value: None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                else_: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "FrameFragment",
                                                                                        args: [
                                                                                            Array(
                                                                                                ArrayExpr {
                                                                                                    expr: Var(
                                                                                                        "UnfoldingHeap",
                                                                                                    ),
                                                                                                    subscripts: [
                                                                                                        ArraySubscript {
                                                                                                            keys: [
                                                                                                                Var(
                                                                                                                    "x",
                                                                                                                ),
                                                                                                                Var(
                                                                                                                    "g",
                                                                                                                ),
                                                                                                            ],
                                                                                                            value: None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "perm",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "NoPerm",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "perm",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "perm",
                                                                ),
                                                                op: Add,
                                                                rhs: Var(
                                                                    "FullPerm",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "perm",
                                                                ),
                                                                op: Neq,
                                                                rhs: Var(
                                                                    "NoPerm",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assert,
                                                                    attrs: [
                                                                        Attr(
                                                                            AttrContent {
                                                                                ident: "msg",
                                                                                params: [
                                                                                    String(
                                                                                        StringLit {
                                                                                            text: "  Contract might not be well-formed. There might be insufficient permission to access P(x, b). (knownfolded.vpr@31.11) [65]",
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    proposition: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "perm",
                                                                            ),
                                                                            op: Le,
                                                                            rhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "UnfoldingMask",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "null",
                                                                                                ),
                                                                                                FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "P",
                                                                                                        args: [
                                                                                                            Var(
                                                                                                                "x",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "b_2",
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "UnfoldingMask",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "UnfoldingMask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "null",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "P",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "b_2",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Sub,
                                                                rhs: Var(
                                                                    "perm",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Var(
                                                            "b_2",
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "perm",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Var(
                                                                            "FullPerm",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assume,
                                                                    attrs: [],
                                                                    proposition: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "x",
                                                                            ),
                                                                            op: Neq,
                                                                            rhs: Var(
                                                                                "null",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "UnfoldingMask",
                                                                            subscripts: [
                                                                                [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_6",
                                                                                    ),
                                                                                ],
                                                                            ],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Term(
                                                                            Term {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "UnfoldingMask",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "x",
                                                                                                    ),
                                                                                                    Var(
                                                                                                        "f_6",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Add,
                                                                                rhs: Var(
                                                                                    "perm",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assume,
                                                                    attrs: [],
                                                                    proposition: FuncCall(
                                                                        FuncCall {
                                                                            target: "state",
                                                                            args: [
                                                                                Var(
                                                                                    "UnfoldingHeap",
                                                                                ),
                                                                                Var(
                                                                                    "UnfoldingMask",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: Some(
                                                        Else(
                                                            [
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "perm",
                                                                                    subscripts: [],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                Var(
                                                                                    "FullPerm",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "x",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "null",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "UnfoldingMask",
                                                                                    subscripts: [
                                                                                        [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "g",
                                                                                            ),
                                                                                        ],
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                Term(
                                                                                    Term {
                                                                                        lhs: Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "UnfoldingMask",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "x",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "g",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Add,
                                                                                        rhs: Var(
                                                                                            "perm",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: FuncCall(
                                                                                FuncCall {
                                                                                    target: "state",
                                                                                    args: [
                                                                                        Var(
                                                                                            "UnfoldingHeap",
                                                                                        ),
                                                                                        Var(
                                                                                            "UnfoldingMask",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "UnfoldingHeap",
                                                                ),
                                                                Var(
                                                                    "UnfoldingMask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Var(
                                                            "b_2",
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assert,
                                                                    attrs: [
                                                                        Attr(
                                                                            AttrContent {
                                                                                ident: "msg",
                                                                                params: [
                                                                                    String(
                                                                                        StringLit {
                                                                                            text: "  Contract might not be well-formed. There might be insufficient permission to access x.f. (knownfolded.vpr@31.11) [66]",
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    proposition: FuncCall(
                                                                        FuncCall {
                                                                            target: "HasDirectPerm",
                                                                            args: [
                                                                                Var(
                                                                                    "UnfoldingMask",
                                                                                ),
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "f_6",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: Some(
                                                        Else(
                                                            [
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assert,
                                                                            attrs: [
                                                                                Attr(
                                                                                    AttrContent {
                                                                                        ident: "msg",
                                                                                        params: [
                                                                                            String(
                                                                                                StringLit {
                                                                                                    text: "  Contract might not be well-formed. There might be insufficient permission to access x.g. (knownfolded.vpr@31.11) [67]",
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            proposition: FuncCall(
                                                                                FuncCall {
                                                                                    target: "HasDirectPerm",
                                                                                    args: [
                                                                                        Var(
                                                                                            "UnfoldingMask",
                                                                                        ),
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                        Var(
                                                                                            "g",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Var(
                                                            "b_2",
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "PostHeap",
                                                                            subscripts: [
                                                                                [
                                                                                    Var(
                                                                                        "null",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "P#sm",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "b_2",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_6",
                                                                                    ),
                                                                                ],
                                                                            ],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        BoolLit(
                                                                            true,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: Some(
                                                        Else(
                                                            [
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "PostHeap",
                                                                                    subscripts: [
                                                                                        [
                                                                                            Var(
                                                                                                "null",
                                                                                            ),
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "P#sm",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "x",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "b_2",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "g",
                                                                                            ),
                                                                                        ],
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                BoolLit(
                                                                                    true,
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "PostHeap",
                                                                ),
                                                                Var(
                                                                    "PostMask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "PostHeap",
                                                                ),
                                                                Var(
                                                                    "PostMask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Var(
                                                            "b_2",
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "PostHeap",
                                                                            subscripts: [
                                                                                [
                                                                                    Var(
                                                                                        "null",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "P#sm",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "b_2",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_6",
                                                                                    ),
                                                                                ],
                                                                            ],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        BoolLit(
                                                                            true,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: Some(
                                                        Else(
                                                            [
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "PostHeap",
                                                                                    subscripts: [
                                                                                        [
                                                                                            Var(
                                                                                                "null",
                                                                                            ),
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "P#sm",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "x",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "b_2",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "g",
                                                                                            ),
                                                                                        ],
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                BoolLit(
                                                                                    true,
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "UnfoldingHeap",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "PostHeap",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "UnfoldingMask",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "PostMask",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "P#trigger",
                                                            args: [
                                                                Var(
                                                                    "UnfoldingHeap",
                                                                ),
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "P",
                                                                        args: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "b_2",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "UnfoldingHeap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_2",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "FrameFragment",
                                                                    args: [
                                                                        IfThenElse(
                                                                            IfThenElseExpr {
                                                                                cond: Var(
                                                                                    "b_2",
                                                                                ),
                                                                                then: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "FrameFragment",
                                                                                        args: [
                                                                                            Array(
                                                                                                ArrayExpr {
                                                                                                    expr: Var(
                                                                                                        "UnfoldingHeap",
                                                                                                    ),
                                                                                                    subscripts: [
                                                                                                        ArraySubscript {
                                                                                                            keys: [
                                                                                                                Var(
                                                                                                                    "x",
                                                                                                                ),
                                                                                                                Var(
                                                                                                                    "f_6",
                                                                                                                ),
                                                                                                            ],
                                                                                                            value: None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                else_: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "FrameFragment",
                                                                                        args: [
                                                                                            Array(
                                                                                                ArrayExpr {
                                                                                                    expr: Var(
                                                                                                        "UnfoldingHeap",
                                                                                                    ),
                                                                                                    subscripts: [
                                                                                                        ArraySubscript {
                                                                                                            keys: [
                                                                                                                Var(
                                                                                                                    "x",
                                                                                                                ),
                                                                                                                Var(
                                                                                                                    "g",
                                                                                                                ),
                                                                                                            ],
                                                                                                            value: None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "perm",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "NoPerm",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "perm",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "perm",
                                                                ),
                                                                op: Add,
                                                                rhs: Var(
                                                                    "FullPerm",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "UnfoldingMask",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "UnfoldingMask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "null",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "P",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "b_2",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Sub,
                                                                rhs: Var(
                                                                    "perm",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Var(
                                                            "b_2",
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "perm",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Var(
                                                                            "FullPerm",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assume,
                                                                    attrs: [],
                                                                    proposition: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "x",
                                                                            ),
                                                                            op: Neq,
                                                                            rhs: Var(
                                                                                "null",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "UnfoldingMask",
                                                                            subscripts: [
                                                                                [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_6",
                                                                                    ),
                                                                                ],
                                                                            ],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Term(
                                                                            Term {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "UnfoldingMask",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "x",
                                                                                                    ),
                                                                                                    Var(
                                                                                                        "f_6",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Add,
                                                                                rhs: Var(
                                                                                    "perm",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assume,
                                                                    attrs: [],
                                                                    proposition: FuncCall(
                                                                        FuncCall {
                                                                            target: "state",
                                                                            args: [
                                                                                Var(
                                                                                    "UnfoldingHeap",
                                                                                ),
                                                                                Var(
                                                                                    "UnfoldingMask",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: Some(
                                                        Else(
                                                            [
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "perm",
                                                                                    subscripts: [],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                Var(
                                                                                    "FullPerm",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "x",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "null",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "UnfoldingMask",
                                                                                    subscripts: [
                                                                                        [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "g",
                                                                                            ),
                                                                                        ],
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                Term(
                                                                                    Term {
                                                                                        lhs: Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "UnfoldingMask",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "x",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "g",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Add,
                                                                                        rhs: Var(
                                                                                            "perm",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: FuncCall(
                                                                                FuncCall {
                                                                                    target: "state",
                                                                                    args: [
                                                                                        Var(
                                                                                            "UnfoldingHeap",
                                                                                        ),
                                                                                        Var(
                                                                                            "UnfoldingMask",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "UnfoldingHeap",
                                                                ),
                                                                Var(
                                                                    "UnfoldingMask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: IfThenElse(
                                                        IfThenElseExpr {
                                                            cond: Var(
                                                                "b_2",
                                                            ),
                                                            then: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "PostHeap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                        Var(
                                                                                            "f_6",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Nat(
                                                                        "0",
                                                                    ),
                                                                },
                                                            ),
                                                            else_: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "PostHeap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "g",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Var(
                                                            "b_2",
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "PostHeap",
                                                                            subscripts: [
                                                                                [
                                                                                    Var(
                                                                                        "null",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "P#sm",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "b_2",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_6",
                                                                                    ),
                                                                                ],
                                                                            ],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        BoolLit(
                                                                            true,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: Some(
                                                        Else(
                                                            [
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "PostHeap",
                                                                                    subscripts: [
                                                                                        [
                                                                                            Var(
                                                                                                "null",
                                                                                            ),
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "P#sm",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "x",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "b_2",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "g",
                                                                                            ),
                                                                                        ],
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                BoolLit(
                                                                                    true,
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "PostHeap",
                                                                ),
                                                                Var(
                                                                    "PostMask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "PostHeap",
                                                                ),
                                                                Var(
                                                                    "PostMask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: BoolLit(
                                                        false,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "P#trigger",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "P",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "b_2",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "null",
                                                                ),
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "P",
                                                                        args: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "b_2",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "FrameFragment",
                                                    args: [
                                                        IfThenElse(
                                                            IfThenElseExpr {
                                                                cond: Var(
                                                                    "b_2",
                                                                ),
                                                                then: FuncCall(
                                                                    FuncCall {
                                                                        target: "FrameFragment",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "Heap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "f_6",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                else_: FuncCall(
                                                                    FuncCall {
                                                                        target: "FrameFragment",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "Heap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "g",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "perm",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "NoPerm",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "perm",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "perm",
                                                ),
                                                op: Add,
                                                rhs: Var(
                                                    "FullPerm",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "perm",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "NoPerm",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "msg",
                                                                params: [
                                                                    String(
                                                                        StringLit {
                                                                            text: "  Unfolding P(x, b) might fail. There might be insufficient permission to access P(x, b). (knownfolded.vpr@33.3) [69]",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "perm",
                                                            ),
                                                            op: Le,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Mask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_2",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Mask",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "null",
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "P",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                                Var(
                                                                    "b_2",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "Mask",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Sub,
                                                rhs: Var(
                                                    "perm",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "HasDirectPerm",
                                                        args: [
                                                            Var(
                                                                "Mask",
                                                            ),
                                                            Var(
                                                                "null",
                                                            ),
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "P",
                                                                    args: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                        Var(
                                                                            "b_2",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Havoc(
                                                HavocCmd {
                                                    vars: [
                                                        "newVersion",
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Heap",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "newVersion",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "b_2",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "perm",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "FullPerm",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Neq,
                                                            rhs: Var(
                                                                "null",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Mask",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                    Var(
                                                                        "f_6",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "Mask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_6",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Add,
                                                                rhs: Var(
                                                                    "perm",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "Heap",
                                                                ),
                                                                Var(
                                                                    "Mask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "perm",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Var(
                                                                    "FullPerm",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "x",
                                                                    ),
                                                                    op: Neq,
                                                                    rhs: Var(
                                                                        "null",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "Mask",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "g",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Term(
                                                                    Term {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "Mask",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "g",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Add,
                                                                        rhs: Var(
                                                                            "perm",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: FuncCall(
                                                                FuncCall {
                                                                    target: "state",
                                                                    args: [
                                                                        Var(
                                                                            "Heap",
                                                                        ),
                                                                        Var(
                                                                            "Mask",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "b_2",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "msg",
                                                                params: [
                                                                    String(
                                                                        StringLit {
                                                                            text: "  Assignment might fail. There might be insufficient permission to access x.f. (knownfolded.vpr@36.5) [70]",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "FullPerm",
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Mask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "f_6",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Heap",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                    Var(
                                                                        "f_6",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Nat(
                                                            "0",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "Heap",
                                                                ),
                                                                Var(
                                                                    "Mask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assert,
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "msg",
                                                                        params: [
                                                                            String(
                                                                                StringLit {
                                                                                    text: "  Assignment might fail. There might be insufficient permission to access x.g. (knownfolded.vpr@38.5) [71]",
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "FullPerm",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "Mask",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                        Var(
                                                                                            "g",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "Heap",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "g",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                BoolLit(
                                                                    true,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: FuncCall(
                                                                FuncCall {
                                                                    target: "state",
                                                                    args: [
                                                                        Var(
                                                                            "Heap",
                                                                        ),
                                                                        Var(
                                                                            "Mask",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "b_2",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "perm",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "NoPerm",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "perm",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "perm",
                                                                ),
                                                                op: Add,
                                                                rhs: Var(
                                                                    "FullPerm",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "perm",
                                                                ),
                                                                op: Neq,
                                                                rhs: Var(
                                                                    "NoPerm",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assert,
                                                                    attrs: [
                                                                        Attr(
                                                                            AttrContent {
                                                                                ident: "msg",
                                                                                params: [
                                                                                    String(
                                                                                        StringLit {
                                                                                            text: "  Folding P(x, b) might fail. There might be insufficient permission to access x.f. (knownfolded.vpr@40.3) [73]",
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    proposition: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "perm",
                                                                            ),
                                                                            op: Le,
                                                                            rhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "Mask",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "f_6",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Mask",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                    Var(
                                                                        "f_6",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "Mask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_6",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Sub,
                                                                rhs: Var(
                                                                    "perm",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "perm",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Var(
                                                                    "NoPerm",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "perm",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Term(
                                                                    Term {
                                                                        lhs: Var(
                                                                            "perm",
                                                                        ),
                                                                        op: Add,
                                                                        rhs: Var(
                                                                            "FullPerm",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                StructuredCmd(
                                                    If(
                                                        IfCmd {
                                                            guard: Expr(
                                                                Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "perm",
                                                                        ),
                                                                        op: Neq,
                                                                        rhs: Var(
                                                                            "NoPerm",
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                            then: [
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assert,
                                                                            attrs: [
                                                                                Attr(
                                                                                    AttrContent {
                                                                                        ident: "msg",
                                                                                        params: [
                                                                                            String(
                                                                                                StringLit {
                                                                                                    text: "  Folding P(x, b) might fail. There might be insufficient permission to access x.g. (knownfolded.vpr@40.3) [75]",
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            proposition: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "perm",
                                                                                    ),
                                                                                    op: Le,
                                                                                    rhs: Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "Mask",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "x",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "g",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                            else_: None,
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "Mask",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "g",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Term(
                                                                    Term {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "Mask",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "g",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Sub,
                                                                        rhs: Var(
                                                                            "perm",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "perm",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "FullPerm",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Mask",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "null",
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "P",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                                Var(
                                                                    "b_2",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "Mask",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Add,
                                                rhs: Var(
                                                    "perm",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "P#trigger",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "P",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "b_2",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "null",
                                                                ),
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "P",
                                                                        args: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "b_2",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "FrameFragment",
                                                    args: [
                                                        IfThenElse(
                                                            IfThenElseExpr {
                                                                cond: Var(
                                                                    "b_2",
                                                                ),
                                                                then: FuncCall(
                                                                    FuncCall {
                                                                        target: "FrameFragment",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "Heap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "f_6",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                else_: FuncCall(
                                                                    FuncCall {
                                                                        target: "FrameFragment",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "Heap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "g",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "HasDirectPerm",
                                                        args: [
                                                            Var(
                                                                "Mask",
                                                            ),
                                                            Var(
                                                                "null",
                                                            ),
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "P",
                                                                    args: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                        Var(
                                                                            "b_2",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Heap",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P#sm",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "ZeroPMask",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Havoc(
                                                HavocCmd {
                                                    vars: [
                                                        "freshVersion",
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Heap",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "freshVersion",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "b_2",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Heap",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P#sm",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                    Var(
                                                                        "f_6",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "Heap",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "null",
                                                                            ),
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "P#sm",
                                                                                    args: [
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                        Var(
                                                                                            "b_2",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                        [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "g",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                BoolLit(
                                                                    true,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "perm",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "NoPerm",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "perm",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "perm",
                                                ),
                                                op: Add,
                                                rhs: Var(
                                                    "FullPerm",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "perm",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "NoPerm",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "msg",
                                                                params: [
                                                                    String(
                                                                        StringLit {
                                                                            text: "  Postcondition of test2 might not hold. There might be insufficient permission to access P(x, b). (knownfolded.vpr@30.11) [76]",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "perm",
                                                            ),
                                                            op: Le,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Mask",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "null",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "b_2",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Mask",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "null",
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "P",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                                Var(
                                                                    "b_2",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "Mask",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Sub,
                                                rhs: Var(
                                                    "perm",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "UnfoldingHeap",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "Heap",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "UnfoldingMask",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "Mask",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "P#trigger",
                                            args: [
                                                Var(
                                                    "UnfoldingHeap",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "P",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "b_2",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "UnfoldingHeap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "null",
                                                                ),
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "P",
                                                                        args: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "b_2",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "FrameFragment",
                                                    args: [
                                                        IfThenElse(
                                                            IfThenElseExpr {
                                                                cond: Var(
                                                                    "b_2",
                                                                ),
                                                                then: FuncCall(
                                                                    FuncCall {
                                                                        target: "FrameFragment",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "UnfoldingHeap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "f_6",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                else_: FuncCall(
                                                                    FuncCall {
                                                                        target: "FrameFragment",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "UnfoldingHeap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                Var(
                                                                                                    "g",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "b_2",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "perm",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "FullPerm",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Neq,
                                                            rhs: Var(
                                                                "null",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "UnfoldingMask",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                    Var(
                                                                        "f_6",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "UnfoldingMask",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                    Var(
                                                                                        "f_6",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Add,
                                                                rhs: Var(
                                                                    "perm",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "state",
                                                            args: [
                                                                Var(
                                                                    "UnfoldingHeap",
                                                                ),
                                                                Var(
                                                                    "UnfoldingMask",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "perm",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Var(
                                                                    "FullPerm",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "x",
                                                                    ),
                                                                    op: Neq,
                                                                    rhs: Var(
                                                                        "null",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "UnfoldingMask",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "g",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Term(
                                                                    Term {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "UnfoldingMask",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            Var(
                                                                                                "g",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Add,
                                                                        rhs: Var(
                                                                            "perm",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: FuncCall(
                                                                FuncCall {
                                                                    target: "state",
                                                                    args: [
                                                                        Var(
                                                                            "UnfoldingHeap",
                                                                        ),
                                                                        Var(
                                                                            "UnfoldingMask",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "UnfoldingHeap",
                                                ),
                                                Var(
                                                    "UnfoldingMask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "b_2",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "msg",
                                                                params: [
                                                                    String(
                                                                        StringLit {
                                                                            text: "  Postcondition of test2 might not hold. Assertion x.f == 0 might not hold. (knownfolded.vpr@31.11) [77]",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "UnfoldingHeap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "f_6",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assert,
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "msg",
                                                                        params: [
                                                                            String(
                                                                                StringLit {
                                                                                    text: "  Postcondition of test2 might not hold. Assertion x.g might not hold. (knownfolded.vpr@31.11) [78]",
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            proposition: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "UnfoldingHeap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "g",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "b_2",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Heap",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "null",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "P#sm",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "b_2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                    Var(
                                                                        "f_6",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "Heap",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "null",
                                                                            ),
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "P#sm",
                                                                                    args: [
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                        Var(
                                                                                            "b_2",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                        [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                            Var(
                                                                                "g",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                BoolLit(
                                                                    true,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "state",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "ExhaleHeap",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "IdenticalOnKnownLocations",
                                            args: [
                                                Var(
                                                    "Heap",
                                                ),
                                                Var(
                                                    "ExhaleHeap",
                                                ),
                                                Var(
                                                    "Mask",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Heap",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "ExhaleHeap",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
function state(Heap: HeapType, Mask: MaskType): bool;

type Ref;

var Heap: HeapType;

const null: Ref;

type Field A B;

type NormalField;

type HeapType = <A, B>[Ref, Field A B]B;

const unique $allocated: Field NormalField bool;

axiom (forall o: Ref, f: (Field NormalField Ref), Heap: HeapType :: {Heap[o, f]} Heap[o, $allocated] ==> Heap[Heap[o, f], $allocated]);

function succHeap(Heap0: HeapType, Heap1: HeapType): bool;

function succHeapTrans(Heap0: HeapType, Heap1: HeapType): bool;

function IdenticalOnKnownLocations(Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType): bool;

function IsPredicateField<A, B>(f_1: (Field A B)): bool;

function IsWandField<A, B>(f_1: (Field A B)): bool;

function getPredicateId<A, B>(f_1: (Field A B)): int;

axiom (forall <A, B> Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType, o: Ref, f_2: (Field A B) :: {IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask), ExhaleHeap[o, f_2]} IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> HasDirectPerm(Mask, o, f_2) ==> Heap[o, f_2] == ExhaleHeap[o, f_2]);

axiom (forall <C> Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType, pm_f: (Field C FrameType) :: {IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask), IsPredicateField(pm_f), ExhaleHeap[null, PredicateMaskField(pm_f)]} IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> HasDirectPerm(Mask, null, pm_f) && IsPredicateField(pm_f) ==> Heap[null, PredicateMaskField(pm_f)] == ExhaleHeap[null, PredicateMaskField(pm_f)]);

axiom (forall <C> Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType, pm_f: (Field C FrameType) :: {IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask), ExhaleHeap[null, pm_f], IsPredicateField(pm_f)} IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> HasDirectPerm(Mask, null, pm_f) && IsPredicateField(pm_f) ==> (forall <A, B> o2: Ref, f_2: (Field A B) :: {ExhaleHeap[o2, f_2]} Heap[null, PredicateMaskField(pm_f)][o2, f_2] ==> Heap[o2, f_2] == ExhaleHeap[o2, f_2]));

axiom (forall <C> Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType, pm_f: (Field C FrameType) :: {IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask), IsWandField(pm_f), ExhaleHeap[null, WandMaskField(pm_f)]} IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> HasDirectPerm(Mask, null, pm_f) && IsWandField(pm_f) ==> Heap[null, WandMaskField(pm_f)] == ExhaleHeap[null, WandMaskField(pm_f)]);

axiom (forall <C> Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType, pm_f: (Field C FrameType) :: {IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask), IsWandField(pm_f)} IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> HasDirectPerm(Mask, null, pm_f) && IsWandField(pm_f) ==> (forall <A, B> o2: Ref, f_2: (Field A B) :: {ExhaleHeap[o2, f_2]} Heap[null, WandMaskField(pm_f)][o2, f_2] ==> Heap[o2, f_2] == ExhaleHeap[o2, f_2]));

axiom (forall Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType, o: Ref :: {IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask), ExhaleHeap[o, $allocated]} IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> Heap[o, $allocated] ==> ExhaleHeap[o, $allocated]);

axiom (forall <A, B> Heap: HeapType, o: Ref, f_2: (Field A B), v: B :: {Heap[o, f_2 := v]} succHeap(Heap, Heap[o, f_2 := v]));

axiom (forall Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType :: {IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask)} IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> succHeap(Heap, ExhaleHeap));

axiom (forall Heap0: HeapType, Heap1: HeapType :: {succHeap(Heap0, Heap1)} succHeap(Heap0, Heap1) ==> succHeapTrans(Heap0, Heap1));

axiom (forall Heap0: HeapType, Heap1: HeapType, Heap2: HeapType :: {succHeapTrans(Heap0, Heap1), succHeap(Heap1, Heap2)} succHeapTrans(Heap0, Heap1) && succHeap(Heap1, Heap2) ==> succHeapTrans(Heap0, Heap2));

type Perm = real;

type MaskType = <A, B>[Ref, Field A B]Perm;

var Mask: MaskType;

const ZeroMask: MaskType;

axiom (forall <A, B> o_1: Ref, f_3: (Field A B) :: {ZeroMask[o_1, f_3]} ZeroMask[o_1, f_3] == NoPerm);

type PMaskType = <A, B>[Ref, Field A B]bool;

const ZeroPMask: PMaskType;

axiom (forall <A, B> o_1: Ref, f_3: (Field A B) :: {ZeroPMask[o_1, f_3]} !ZeroPMask[o_1, f_3]);

function PredicateMaskField<A>(f_4: (Field A FrameType)): Field A PMaskType;

function WandMaskField<A>(f_4: (Field A FrameType)): Field A PMaskType;

const NoPerm: Perm;

axiom NoPerm == 0.000000000;

const FullPerm: Perm;

axiom FullPerm == 1.000000000;

function Perm(a: real, b: real): Perm;

function GoodMask(Mask: MaskType): bool;

axiom (forall Heap: HeapType, Mask: MaskType :: {state(Heap, Mask)} state(Heap, Mask) ==> GoodMask(Mask));

axiom (forall <A, B> Mask: MaskType, o_1: Ref, f_3: (Field A B) :: {GoodMask(Mask), Mask[o_1, f_3]} GoodMask(Mask) ==> Mask[o_1, f_3] >= NoPerm && (GoodMask(Mask) && !IsPredicateField(f_3) && !IsWandField(f_3) ==> Mask[o_1, f_3] <= FullPerm));

function HasDirectPerm<A, B>(Mask: MaskType, o_1: Ref, f_3: (Field A B)): bool;

axiom (forall <A, B> Mask: MaskType, o_1: Ref, f_3: (Field A B) :: {HasDirectPerm(Mask, o_1, f_3)} HasDirectPerm(Mask, o_1, f_3) <==> Mask[o_1, f_3] > NoPerm);

function sumMask(ResultMask: MaskType, SummandMask1: MaskType, SummandMask2: MaskType): bool;

axiom (forall <A, B> ResultMask: MaskType, SummandMask1: MaskType, SummandMask2: MaskType, o_1: Ref, f_3: (Field A B) :: {sumMask(ResultMask, SummandMask1, SummandMask2), ResultMask[o_1, f_3]} {sumMask(ResultMask, SummandMask1, SummandMask2), SummandMask1[o_1, f_3]} {sumMask(ResultMask, SummandMask1, SummandMask2), SummandMask2[o_1, f_3]} sumMask(ResultMask, SummandMask1, SummandMask2) ==> ResultMask[o_1, f_3] == SummandMask1[o_1, f_3] + SummandMask2[o_1, f_3]);

function neverTriggered1(y_1: Ref): bool;

function neverTriggered2(y_1: Ref): bool;

function invRecv1(x_1_1: Ref, b_1_1: bool): Ref;

function invRecv2(x_1_1: Ref, b_1_1: bool): Ref;

function qpRange1(x_1_1: Ref, b_1_1: bool): bool;

function qpRange2(x_1_1: Ref, b_1_1: bool): bool;

type FrameType;

const EmptyFrame: FrameType;

function FrameFragment<T>(t: T): FrameType;

function ConditionalFrame(p: Perm, f_5: FrameType): FrameType;

function dummyFunction<T>(t: T): bool;

function CombineFrames(a_1: FrameType, b_1: FrameType): FrameType;

axiom (forall p: Perm, f_5: FrameType :: {ConditionalFrame(p, f_5)} ConditionalFrame(p, f_5) == (if p > 0.000000000 then f_5 else EmptyFrame));

function InsidePredicate<A, B>(p: (Field A FrameType), v_1: FrameType, q: (Field B FrameType), w: FrameType): bool;

axiom (forall <A, B, C> p: (Field A FrameType), v_1: FrameType, q: (Field B FrameType), w: FrameType, r: (Field C FrameType), u: FrameType :: {InsidePredicate(p, v_1, q, w), InsidePredicate(q, w, r, u)} InsidePredicate(p, v_1, q, w) && InsidePredicate(q, w, r, u) ==> InsidePredicate(p, v_1, r, u));

axiom (forall <A> p: (Field A FrameType), v_1: FrameType, w: FrameType :: {InsidePredicate(p, v_1, p, w)} !InsidePredicate(p, v_1, p, w));

type Set T = [T]bool;

function Set#Card<T>(Set T): int;

axiom (forall <T> s: Set T :: {Set#Card(s)} 0 <= Set#Card(s));

function Set#Empty<T>(): Set T;

axiom (forall <T> o: T :: {Set#Empty()[o]} !Set#Empty()[o]);

axiom (forall <T> s: Set T :: {Set#Card(s)} (Set#Card(s) == 0 <==> s == Set#Empty()) && (Set#Card(s) != 0 ==> (exists x: T :: s[x])));

function Set#Singleton<T>(T): Set T;

axiom (forall <T> r: T :: {Set#Singleton(r)} Set#Singleton(r)[r]);

axiom (forall <T> r: T, o: T :: {Set#Singleton(r)[o]} Set#Singleton(r)[o] <==> r == o);

axiom (forall <T> r: T :: {Set#Card(Set#Singleton(r))} Set#Card(Set#Singleton(r)) == 1);

function Set#UnionOne<T>(Set T, T): Set T;

axiom (forall <T> a: Set T, x: T, o: T :: {Set#UnionOne(a, x)[o]} Set#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall <T> a: Set T, x: T :: {Set#UnionOne(a, x)} Set#UnionOne(a, x)[x]);

axiom (forall <T> a: Set T, x: T, y: T :: {Set#UnionOne(a, x), a[y]} a[y] ==> Set#UnionOne(a, x)[y]);

axiom (forall <T> a: Set T, x: T :: {Set#Card(Set#UnionOne(a, x))} a[x] ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall <T> a: Set T, x: T :: {Set#Card(Set#UnionOne(a, x))} !a[x] ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

function Set#Union<T>(Set T, Set T): Set T;

axiom (forall <T> a: Set T, b: Set T, o: T :: {Set#Union(a, b)[o]} Set#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall <T> a, b: Set T, y: T :: {Set#Union(a, b), a[y]} a[y] ==> Set#Union(a, b)[y]);

axiom (forall <T> a, b: Set T, y: T :: {Set#Union(a, b), b[y]} b[y] ==> Set#Union(a, b)[y]);

function Set#Intersection<T>(Set T, Set T): Set T;

axiom (forall <T> a: Set T, b: Set T, o: T :: {Set#Intersection(a, b)[o]} {Set#Intersection(a, b), a[o]} {Set#Intersection(a, b), b[o]} Set#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall <T> a, b: Set T :: {Set#Union(Set#Union(a, b), b)} Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall <T> a, b: Set T :: {Set#Union(a, Set#Union(a, b))} Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall <T> a, b: Set T :: {Set#Intersection(Set#Intersection(a, b), b)} Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall <T> a, b: Set T :: {Set#Intersection(a, Set#Intersection(a, b))} Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall <T> a, b: Set T :: {Set#Card(Set#Union(a, b))} {Set#Card(Set#Intersection(a, b))} Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b)) == Set#Card(a) + Set#Card(b));

function Set#Difference<T>(Set T, Set T): Set T;

axiom (forall <T> a: Set T, b: Set T, o: T :: {Set#Difference(a, b)[o]} {Set#Difference(a, b), a[o]} Set#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall <T> a, b: Set T, y: T :: {Set#Difference(a, b), b[y]} b[y] ==> !Set#Difference(a, b)[y]);

axiom (forall <T> a, b: Set T :: {Set#Card(Set#Difference(a, b))} Set#Card(Set#Difference(a, b)) + Set#Card(Set#Difference(b, a)) + Set#Card(Set#Intersection(a, b)) == Set#Card(Set#Union(a, b)) && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

function Set#Subset<T>(Set T, Set T): bool;

axiom (forall <T> a: Set T, b: Set T :: {Set#Subset(a, b)} Set#Subset(a, b) <==> (forall o: T :: {a[o]} {b[o]} a[o] ==> b[o]));

function Set#Equal<T>(Set T, Set T): bool;

axiom (forall <T> a: Set T, b: Set T :: {Set#Equal(a, b)} Set#Equal(a, b) <==> (forall o: T :: {a[o]} {b[o]} a[o] <==> b[o]));

axiom (forall <T> a: Set T, b: Set T :: {Set#Equal(a, b)} Set#Equal(a, b) ==> a == b);

function Math#min(a: int, b: int): int;

axiom (forall a: int, b: int :: {Math#min(a, b)} a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: {Math#min(a, b)} b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: {Math#min(a, b)} Math#min(a, b) == a || Math#min(a, b) == b);

function Math#clip(a: int): int;

axiom (forall a: int :: {Math#clip(a)} 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: {Math#clip(a)} a < 0 ==> Math#clip(a) == 0);

type MultiSet T;

function MultiSet#Select<T>(ms: MultiSet T, x: T): int;

axiom (forall <T> ms: MultiSet T, x: T :: {MultiSet#Select(ms, x)} MultiSet#Select(ms, x) >= 0);

function MultiSet#Card<T>(MultiSet T): int;

axiom (forall <T> s: MultiSet T :: {MultiSet#Card(s)} 0 <= MultiSet#Card(s));

function MultiSet#Empty<T>(): MultiSet T;

axiom (forall <T> o: T :: {MultiSet#Select(MultiSet#Empty(), o)} MultiSet#Select(MultiSet#Empty(), o) == 0);

axiom (forall <T> s: MultiSet T :: {MultiSet#Card(s)} (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty()) && (MultiSet#Card(s) != 0 ==> (exists x: T :: 0 < MultiSet#Select(s, x))));

function MultiSet#Singleton<T>(T): MultiSet T;

axiom (forall <T> r: T, o: T :: {MultiSet#Select(MultiSet#Singleton(r), o)} (MultiSet#Select(MultiSet#Singleton(r), o) == 1 <==> r == o) && (MultiSet#Select(MultiSet#Singleton(r), o) == 0 <==> r != o));

axiom (forall <T> r: T :: {MultiSet#Singleton(r)} MultiSet#Card(MultiSet#Singleton(r)) == 1 && MultiSet#Select(MultiSet#Singleton(r), r) == 1);

axiom (forall <T> r: T :: {MultiSet#Singleton(r)} MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

function MultiSet#UnionOne<T>(MultiSet T, T): MultiSet T;

axiom (forall <T> a: MultiSet T, x: T, o: T :: {MultiSet#Select(MultiSet#UnionOne(a, x), o)} {MultiSet#UnionOne(a, x), MultiSet#Select(a, o)} MultiSet#Select(MultiSet#UnionOne(a, x), o) == (if x == o then MultiSet#Select(a, o) + 1 else MultiSet#Select(a, o)));

axiom (forall <T> a: MultiSet T, x: T :: {MultiSet#Card(MultiSet#UnionOne(a, x))} {MultiSet#UnionOne(a, x), MultiSet#Card(a)} MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

axiom (forall <T> a: MultiSet T, x: T :: {MultiSet#UnionOne(a, x)} MultiSet#Select(MultiSet#UnionOne(a, x), x) > 0 && MultiSet#Card(MultiSet#UnionOne(a, x)) > 0);

function MultiSet#Union<T>(MultiSet T, MultiSet T): MultiSet T;

axiom (forall <T> a: MultiSet T, b: MultiSet T, o: T :: {MultiSet#Select(MultiSet#Union(a, b), o)} {MultiSet#Union(a, b), MultiSet#Select(a, o), MultiSet#Select(b, o)} MultiSet#Select(MultiSet#Union(a, b), o) == MultiSet#Select(a, o) + MultiSet#Select(b, o));

axiom (forall <T> a: MultiSet T, b: MultiSet T :: {MultiSet#Card(MultiSet#Union(a, b))} {MultiSet#Card(a), MultiSet#Union(a, b)} {MultiSet#Card(b), MultiSet#Union(a, b)} MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

function MultiSet#Intersection<T>(MultiSet T, MultiSet T): MultiSet T;

axiom (forall <T> a: MultiSet T, b: MultiSet T, o: T :: {MultiSet#Select(MultiSet#Intersection(a, b), o)} MultiSet#Select(MultiSet#Intersection(a, b), o) == Math#min(MultiSet#Select(a, o), MultiSet#Select(b, o)));

axiom (forall <T> a, b: MultiSet T :: {MultiSet#Intersection(MultiSet#Intersection(a, b), b)} MultiSet#Intersection(MultiSet#Intersection(a, b), b) == MultiSet#Intersection(a, b));

axiom (forall <T> a, b: MultiSet T :: {MultiSet#Intersection(a, MultiSet#Intersection(a, b))} MultiSet#Intersection(a, MultiSet#Intersection(a, b)) == MultiSet#Intersection(a, b));

function MultiSet#Difference<T>(MultiSet T, MultiSet T): MultiSet T;

axiom (forall <T> a: MultiSet T, b: MultiSet T, o: T :: {MultiSet#Select(MultiSet#Difference(a, b), o)} MultiSet#Select(MultiSet#Difference(a, b), o) == Math#clip(MultiSet#Select(a, o) - MultiSet#Select(b, o)));

axiom (forall <T> a, b: MultiSet T, y: T :: {MultiSet#Difference(a, b), MultiSet#Select(b, y), MultiSet#Select(a, y)} MultiSet#Select(a, y) <= MultiSet#Select(b, y) ==> MultiSet#Select(MultiSet#Difference(a, b), y) == 0);

axiom (forall <T> a, b: MultiSet T :: {MultiSet#Card(MultiSet#Difference(a, b))} MultiSet#Card(MultiSet#Difference(a, b)) + MultiSet#Card(MultiSet#Difference(b, a)) + 2 * MultiSet#Card(MultiSet#Intersection(a, b)) == MultiSet#Card(MultiSet#Union(a, b)) && MultiSet#Card(MultiSet#Difference(a, b)) == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

function MultiSet#Subset<T>(MultiSet T, MultiSet T): bool;

axiom (forall <T> a: MultiSet T, b: MultiSet T :: {MultiSet#Subset(a, b)} MultiSet#Subset(a, b) <==> (forall o: T :: {MultiSet#Select(a, o)} {MultiSet#Select(b, o)} MultiSet#Select(a, o) <= MultiSet#Select(b, o)));

function MultiSet#Equal<T>(MultiSet T, MultiSet T): bool;

axiom (forall <T> a: MultiSet T, b: MultiSet T :: {MultiSet#Equal(a, b)} MultiSet#Equal(a, b) <==> (forall o: T :: {MultiSet#Select(a, o)} {MultiSet#Select(b, o)} MultiSet#Select(a, o) == MultiSet#Select(b, o)));

axiom (forall <T> a: MultiSet T, b: MultiSet T :: {MultiSet#Equal(a, b)} MultiSet#Equal(a, b) ==> a == b);

function MultiSet#Disjoint<T>(MultiSet T, MultiSet T): bool;

axiom (forall <T> a: MultiSet T, b: MultiSet T :: {MultiSet#Disjoint(a, b)} MultiSet#Disjoint(a, b) <==> (forall o: T :: {MultiSet#Select(a, o)} {MultiSet#Select(b, o)} MultiSet#Select(a, o) == 0 || MultiSet#Select(b, o) == 0));

const unique f_6: Field NormalField int;

axiom !IsPredicateField(f_6);

axiom !IsWandField(f_6);

const unique g: Field NormalField bool;

axiom !IsPredicateField(g);

axiom !IsWandField(g);

type PredicateType_P;

function P(x: Ref, b_2: bool): Field PredicateType_P FrameType;

function P#sm(x: Ref, b_2: bool): Field PredicateType_P PMaskType;

axiom (forall x: Ref, b_2: bool :: {PredicateMaskField(P(x, b_2))} PredicateMaskField(P(x, b_2)) == P#sm(x, b_2));

axiom (forall x: Ref, b_2: bool :: {P(x, b_2)} IsPredicateField(P(x, b_2)));

axiom (forall x: Ref, b_2: bool :: {P(x, b_2)} getPredicateId(P(x, b_2)) == 0);

function P#trigger<A>(Heap: HeapType, pred: (Field A FrameType)): bool;

function P#everUsed<A>(pred: (Field A FrameType)): bool;

axiom (forall x: Ref, b_2: bool, x2: Ref, b2: bool :: {P(x, b_2), P(x2, b2)} P(x, b_2) == P(x2, b2) ==> x == x2 && b_2 == b2);

axiom (forall x: Ref, b_2: bool, x2: Ref, b2: bool :: {P#sm(x, b_2), P#sm(x2, b2)} P#sm(x, b_2) == P#sm(x2, b2) ==> x == x2 && b_2 == b2);

axiom (forall Heap: HeapType, x: Ref, b_2: bool :: {P#trigger(Heap, P(x, b_2))} P#everUsed(P(x, b_2)));

procedure known_folded_1(x: Ref, xs: (Set Ref), b_2: bool)
  modifies Heap, Mask;
{
  var QPMask: MaskType;
  var PostHeap: HeapType;
  var PostMask: MaskType;
  var perm: Perm;
  var newVersion: FrameType;
  var ExhaleHeap: HeapType;

  Mask := ZeroMask;
  assume state(Heap, Mask);
  assume Heap[x, $allocated];
  if (*) {
    assume false;
  }
  assume state(Heap, Mask);
  havoc QPMask;
  assume (forall y_1: Ref :: {Heap[null, P(y_1, b_2)]} {Mask[null, P(y_1, b_2)]} {xs[y_1]} xs[y_1] && NoPerm < FullPerm ==> invRecv1(y_1, b_2) == y_1 && qpRange1(y_1, b_2));
  assume (forall x_1_1: Ref, b_1_1: bool :: {invRecv1(x_1_1, b_1_1)} xs[invRecv1(x_1_1, b_1_1)] && NoPerm < FullPerm && qpRange1(x_1_1, b_1_1) ==> invRecv1(x_1_1, b_1_1) == x_1_1 && b_2 == b_1_1);
  assume (forall x_1_1: Ref, b_1_1: bool :: {QPMask[null, P(x_1_1, b_1_1)]} xs[invRecv1(x_1_1, b_1_1)] && NoPerm < FullPerm && qpRange1(x_1_1, b_1_1) ==> (NoPerm < FullPerm ==> invRecv1(x_1_1, b_1_1) == x_1_1 && b_2 == b_1_1) && QPMask[null, P(x_1_1, b_1_1)] == Mask[null, P(x_1_1, b_1_1)] + FullPerm);
  assume (forall <A, B> o_2: Ref, f_4: (Field A B) :: {Mask[o_2, f_4]} {QPMask[o_2, f_4]} o_2 != null || !IsPredicateField(f_4) || getPredicateId(f_4) != 0 ==> Mask[o_2, f_4] == QPMask[o_2, f_4]);
  assume (forall x_1_1: Ref, b_1_1: bool :: {QPMask[null, P(x_1_1, b_1_1)]} !(xs[invRecv1(x_1_1, b_1_1)] && NoPerm < FullPerm && qpRange1(x_1_1, b_1_1)) ==> QPMask[null, P(x_1_1, b_1_1)] == Mask[null, P(x_1_1, b_1_1)]);
  Mask := QPMask;
  assume state(Heap, Mask);
  assume state(Heap, Mask);
  assume xs[x];
  assume state(Heap, Mask);
  assume Heap == old (Heap);
  assume Mask == old (Mask);
  PostHeap := Heap;
  PostMask := Mask;
  havoc PostHeap;
  PostMask := ZeroMask;
  assume state(PostHeap, PostMask);
  if (*) {
    if (b_2) {
      perm := FullPerm;
      assume x != null;
      PostMask[x, f_6] := PostMask[x, f_6] + perm;
      assume state(PostHeap, PostMask);
      assume state(PostHeap, PostMask);
      assert {:msg "  Contract might not be well-formed. There might be insufficient permission to access x.f. (knownfolded.vpr@14.11) [55]"} HasDirectPerm(PostMask, x, f_6);
      assume state(PostHeap, PostMask);
      assume PostHeap[x, f_6] == 0;
      assume state(PostHeap, PostMask);
    } else {
      perm := FullPerm;
      assume x != null;
      PostMask[x, g] := PostMask[x, g] + perm;
      assume state(PostHeap, PostMask);
      assume state(PostHeap, PostMask);
      assert {:msg "  Contract might not be well-formed. There might be insufficient permission to access x.g. (knownfolded.vpr@14.11) [56]"} HasDirectPerm(PostMask, x, g);
      assume state(PostHeap, PostMask);
      assume PostHeap[x, g];
      assume state(PostHeap, PostMask);
    }
    assume false;
  }
  assume P#trigger(Heap, P(x, b_2));
  assume Heap[null, P(x, b_2)] == FrameFragment(if b_2 then FrameFragment(Heap[x, f_6]) else FrameFragment(Heap[x, g]));
  perm := NoPerm;
  perm := perm + FullPerm;
  if (perm != NoPerm) {
    assert {:msg "  Unfolding P(x, b) might fail. There might be insufficient permission to access P(x, b). (knownfolded.vpr@16.3) [58]"} perm <= Mask[null, P(x, b_2)];
  }
  Mask[null, P(x, b_2)] := Mask[null, P(x, b_2)] - perm;
  if (!HasDirectPerm(Mask, null, P(x, b_2))) {
    havoc newVersion;
    Heap[null, P(x, b_2)] := newVersion;
  }
  if (b_2) {
    perm := FullPerm;
    assume x != null;
    Mask[x, f_6] := Mask[x, f_6] + perm;
    assume state(Heap, Mask);
  } else {
    perm := FullPerm;
    assume x != null;
    Mask[x, g] := Mask[x, g] + perm;
    assume state(Heap, Mask);
  }
  assume state(Heap, Mask);
  assume state(Heap, Mask);
  if (b_2) {
    assert {:msg "  Assignment might fail. There might be insufficient permission to access x.f. (knownfolded.vpr@19.5) [59]"} FullPerm == Mask[x, f_6];
    Heap[x, f_6] := 0;
    assume state(Heap, Mask);
  } else {
    assert {:msg "  Assignment might fail. There might be insufficient permission to access x.g. (knownfolded.vpr@21.5) [60]"} FullPerm == Mask[x, g];
    Heap[x, g] := true;
    assume state(Heap, Mask);
  }
  assume state(Heap, Mask);
  if (b_2) {
    perm := NoPerm;
    perm := perm + FullPerm;
    if (perm != NoPerm) {
      assert {:msg "  Postcondition of test1 might not hold. There might be insufficient permission to access x.f. (knownfolded.vpr@14.11) [61]"} perm <= Mask[x, f_6];
    }
    Mask[x, f_6] := Mask[x, f_6] - perm;
    assert {:msg "  Postcondition of test1 might not hold. Assertion x.f == 0 might not hold. (knownfolded.vpr@14.11) [62]"} Heap[x, f_6] == 0;
  } else {
    perm := NoPerm;
    perm := perm + FullPerm;
    if (perm != NoPerm) {
      assert {:msg "  Postcondition of test1 might not hold. There might be insufficient permission to access x.g. (knownfolded.vpr@14.11) [63]"} perm <= Mask[x, g];
    }
    Mask[x, g] := Mask[x, g] - perm;
    assert {:msg "  Postcondition of test1 might not hold. Assertion x.g might not hold. (knownfolded.vpr@14.11) [64]"} Heap[x, g];
  }
  havoc ExhaleHeap;
  assume IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask);
  Heap := ExhaleHeap;
}

procedure known_folded_2(x: Ref, xs: (Set Ref), b_2: bool)
  modifies Heap, Mask;
{
  var QPMask: MaskType;
  var PostHeap: HeapType;
  var PostMask: MaskType;
  var perm: Perm;
  var UnfoldingHeap: HeapType;
  var UnfoldingMask: MaskType;
  var newVersion: FrameType;
  var freshVersion: FrameType;
  var ExhaleHeap: HeapType;

  Mask := ZeroMask;
  assume state(Heap, Mask);
  assume Heap[x, $allocated];
  if (*) {
    assume false;
  }
  assume state(Heap, Mask);
  havoc QPMask;
  assume (forall y_1: Ref :: {Heap[null, P(y_1, b_2)]} {Mask[null, P(y_1, b_2)]} {xs[y_1]} xs[y_1] && NoPerm < FullPerm ==> invRecv2(y_1, b_2) == y_1 && qpRange2(y_1, b_2));
  assume (forall x_1_1: Ref, b_1_1: bool :: {invRecv2(x_1_1, b_1_1)} xs[invRecv2(x_1_1, b_1_1)] && NoPerm < FullPerm && qpRange2(x_1_1, b_1_1) ==> invRecv2(x_1_1, b_1_1) == x_1_1 && b_2 == b_1_1);
  assume (forall x_1_1: Ref, b_1_1: bool :: {QPMask[null, P(x_1_1, b_1_1)]} xs[invRecv2(x_1_1, b_1_1)] && NoPerm < FullPerm && qpRange2(x_1_1, b_1_1) ==> (NoPerm < FullPerm ==> invRecv2(x_1_1, b_1_1) == x_1_1 && b_2 == b_1_1) && QPMask[null, P(x_1_1, b_1_1)] == Mask[null, P(x_1_1, b_1_1)] + FullPerm);
  assume (forall <A, B> o_2: Ref, f_4: (Field A B) :: {Mask[o_2, f_4]} {QPMask[o_2, f_4]} o_2 != null || !IsPredicateField(f_4) || getPredicateId(f_4) != 0 ==> Mask[o_2, f_4] == QPMask[o_2, f_4]);
  assume (forall x_1_1: Ref, b_1_1: bool :: {QPMask[null, P(x_1_1, b_1_1)]} !(xs[invRecv2(x_1_1, b_1_1)] && NoPerm < FullPerm && qpRange2(x_1_1, b_1_1)) ==> QPMask[null, P(x_1_1, b_1_1)] == Mask[null, P(x_1_1, b_1_1)]);
  Mask := QPMask;
  assume state(Heap, Mask);
  assume state(Heap, Mask);
  assume xs[x];
  assume state(Heap, Mask);
  assume Heap == old (Heap);
  assume Mask == old (Mask);
  PostHeap := Heap;
  PostMask := Mask;
  havoc PostHeap;
  PostMask := ZeroMask;
  assume state(PostHeap, PostMask);
  if (*) {
    perm := FullPerm;
    PostMask[null, P(x, b_2)] := PostMask[null, P(x, b_2)] + perm;
    assume state(PostHeap, PostMask);
    assume state(PostHeap, PostMask);
    UnfoldingHeap := PostHeap;
    UnfoldingMask := PostMask;
    assume P#trigger(UnfoldingHeap, P(x, b_2));
    assume UnfoldingHeap[null, P(x, b_2)] == FrameFragment(if b_2 then FrameFragment(UnfoldingHeap[x, f_6]) else FrameFragment(UnfoldingHeap[x, g]));
    perm := NoPerm;
    perm := perm + FullPerm;
    if (perm != NoPerm) {
      assert {:msg "  Contract might not be well-formed. There might be insufficient permission to access P(x, b). (knownfolded.vpr@31.11) [65]"} perm <= UnfoldingMask[null, P(x, b_2)];
    }
    UnfoldingMask[null, P(x, b_2)] := UnfoldingMask[null, P(x, b_2)] - perm;
    if (b_2) {
      perm := FullPerm;
      assume x != null;
      UnfoldingMask[x, f_6] := UnfoldingMask[x, f_6] + perm;
      assume state(UnfoldingHeap, UnfoldingMask);
    } else {
      perm := FullPerm;
      assume x != null;
      UnfoldingMask[x, g] := UnfoldingMask[x, g] + perm;
      assume state(UnfoldingHeap, UnfoldingMask);
    }
    assume state(UnfoldingHeap, UnfoldingMask);
    if (b_2) {
      assert {:msg "  Contract might not be well-formed. There might be insufficient permission to access x.f. (knownfolded.vpr@31.11) [66]"} HasDirectPerm(UnfoldingMask, x, f_6);
    } else {
      assert {:msg "  Contract might not be well-formed. There might be insufficient permission to access x.g. (knownfolded.vpr@31.11) [67]"} HasDirectPerm(UnfoldingMask, x, g);
    }
    if (b_2) {
      PostHeap[null, P#sm(x, b_2)][x, f_6] := true;
    } else {
      PostHeap[null, P#sm(x, b_2)][x, g] := true;
    }
    assume state(PostHeap, PostMask);
    assume state(PostHeap, PostMask);
    if (b_2) {
      PostHeap[null, P#sm(x, b_2)][x, f_6] := true;
    } else {
      PostHeap[null, P#sm(x, b_2)][x, g] := true;
    }
    UnfoldingHeap := PostHeap;
    UnfoldingMask := PostMask;
    assume P#trigger(UnfoldingHeap, P(x, b_2));
    assume UnfoldingHeap[null, P(x, b_2)] == FrameFragment(if b_2 then FrameFragment(UnfoldingHeap[x, f_6]) else FrameFragment(UnfoldingHeap[x, g]));
    perm := NoPerm;
    perm := perm + FullPerm;
    UnfoldingMask[null, P(x, b_2)] := UnfoldingMask[null, P(x, b_2)] - perm;
    if (b_2) {
      perm := FullPerm;
      assume x != null;
      UnfoldingMask[x, f_6] := UnfoldingMask[x, f_6] + perm;
      assume state(UnfoldingHeap, UnfoldingMask);
    } else {
      perm := FullPerm;
      assume x != null;
      UnfoldingMask[x, g] := UnfoldingMask[x, g] + perm;
      assume state(UnfoldingHeap, UnfoldingMask);
    }
    assume state(UnfoldingHeap, UnfoldingMask);
    assume if b_2 then PostHeap[x, f_6] == 0 else PostHeap[x, g];
    if (b_2) {
      PostHeap[null, P#sm(x, b_2)][x, f_6] := true;
    } else {
      PostHeap[null, P#sm(x, b_2)][x, g] := true;
    }
    assume state(PostHeap, PostMask);
    assume state(PostHeap, PostMask);
    assume false;
  }
  assume P#trigger(Heap, P(x, b_2));
  assume Heap[null, P(x, b_2)] == FrameFragment(if b_2 then FrameFragment(Heap[x, f_6]) else FrameFragment(Heap[x, g]));
  perm := NoPerm;
  perm := perm + FullPerm;
  if (perm != NoPerm) {
    assert {:msg "  Unfolding P(x, b) might fail. There might be insufficient permission to access P(x, b). (knownfolded.vpr@33.3) [69]"} perm <= Mask[null, P(x, b_2)];
  }
  Mask[null, P(x, b_2)] := Mask[null, P(x, b_2)] - perm;
  if (!HasDirectPerm(Mask, null, P(x, b_2))) {
    havoc newVersion;
    Heap[null, P(x, b_2)] := newVersion;
  }
  if (b_2) {
    perm := FullPerm;
    assume x != null;
    Mask[x, f_6] := Mask[x, f_6] + perm;
    assume state(Heap, Mask);
  } else {
    perm := FullPerm;
    assume x != null;
    Mask[x, g] := Mask[x, g] + perm;
    assume state(Heap, Mask);
  }
  assume state(Heap, Mask);
  assume state(Heap, Mask);
  if (b_2) {
    assert {:msg "  Assignment might fail. There might be insufficient permission to access x.f. (knownfolded.vpr@36.5) [70]"} FullPerm == Mask[x, f_6];
    Heap[x, f_6] := 0;
    assume state(Heap, Mask);
  } else {
    assert {:msg "  Assignment might fail. There might be insufficient permission to access x.g. (knownfolded.vpr@38.5) [71]"} FullPerm == Mask[x, g];
    Heap[x, g] := true;
    assume state(Heap, Mask);
  }
  assume state(Heap, Mask);
  if (b_2) {
    perm := NoPerm;
    perm := perm + FullPerm;
    if (perm != NoPerm) {
      assert {:msg "  Folding P(x, b) might fail. There might be insufficient permission to access x.f. (knownfolded.vpr@40.3) [73]"} perm <= Mask[x, f_6];
    }
    Mask[x, f_6] := Mask[x, f_6] - perm;
  } else {
    perm := NoPerm;
    perm := perm + FullPerm;
    if (perm != NoPerm) {
      assert {:msg "  Folding P(x, b) might fail. There might be insufficient permission to access x.g. (knownfolded.vpr@40.3) [75]"} perm <= Mask[x, g];
    }
    Mask[x, g] := Mask[x, g] - perm;
  }
  perm := FullPerm;
  Mask[null, P(x, b_2)] := Mask[null, P(x, b_2)] + perm;
  assume state(Heap, Mask);
  assume state(Heap, Mask);
  assume P#trigger(Heap, P(x, b_2));
  assume Heap[null, P(x, b_2)] == FrameFragment(if b_2 then FrameFragment(Heap[x, f_6]) else FrameFragment(Heap[x, g]));
  if (!HasDirectPerm(Mask, null, P(x, b_2))) {
    Heap[null, P#sm(x, b_2)] := ZeroPMask;
    havoc freshVersion;
    Heap[null, P(x, b_2)] := freshVersion;
  }
  if (b_2) {
    Heap[null, P#sm(x, b_2)][x, f_6] := true;
  } else {
    Heap[null, P#sm(x, b_2)][x, g] := true;
  }
  assume state(Heap, Mask);
  assume state(Heap, Mask);
  perm := NoPerm;
  perm := perm + FullPerm;
  if (perm != NoPerm) {
    assert {:msg "  Postcondition of test2 might not hold. There might be insufficient permission to access P(x, b). (knownfolded.vpr@30.11) [76]"} perm <= Mask[null, P(x, b_2)];
  }
  Mask[null, P(x, b_2)] := Mask[null, P(x, b_2)] - perm;
  UnfoldingHeap := Heap;
  UnfoldingMask := Mask;
  assume P#trigger(UnfoldingHeap, P(x, b_2));
  assume UnfoldingHeap[null, P(x, b_2)] == FrameFragment(if b_2 then FrameFragment(UnfoldingHeap[x, f_6]) else FrameFragment(UnfoldingHeap[x, g]));
  if (b_2) {
    perm := FullPerm;
    assume x != null;
    UnfoldingMask[x, f_6] := UnfoldingMask[x, f_6] + perm;
    assume state(UnfoldingHeap, UnfoldingMask);
  } else {
    perm := FullPerm;
    assume x != null;
    UnfoldingMask[x, g] := UnfoldingMask[x, g] + perm;
    assume state(UnfoldingHeap, UnfoldingMask);
  }
  assume state(UnfoldingHeap, UnfoldingMask);
  if (b_2) {
    assert {:msg "  Postcondition of test2 might not hold. Assertion x.f == 0 might not hold. (knownfolded.vpr@31.11) [77]"} UnfoldingHeap[x, f_6] == 0;
  } else {
    assert {:msg "  Postcondition of test2 might not hold. Assertion x.g might not hold. (knownfolded.vpr@31.11) [78]"} UnfoldingHeap[x, g];
  }
  if (b_2) {
    Heap[null, P#sm(x, b_2)][x, f_6] := true;
  } else {
    Heap[null, P#sm(x, b_2)][x, g] := true;
  }
  assume state(Heap, Mask);
  havoc ExhaleHeap;
  assume IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask);
  Heap := ExhaleHeap;
}

[Input - ../../vendor/boogie/Test/viper/knownfolded.bpl]
// RUN: %boogie "%s" | %OutputCheck "%s"
// CHECK-L: Boogie program verifier finished with 2 verified, 0 errors

// ==================================================
// Preamble of State module.
// ==================================================

function state(Heap: HeapType, Mask: MaskType): bool;

// ==================================================
// Preamble of Heap module.
// ==================================================

type Ref;
var Heap: HeapType;
const null: Ref;
type Field A B;
type NormalField;
type HeapType = <A, B> [Ref, Field A B]B;
const unique $allocated: Field NormalField bool;
axiom (forall o: Ref, f: (Field NormalField Ref), Heap: HeapType ::
  { Heap[o, f] }
  Heap[o, $allocated] ==> Heap[Heap[o, f], $allocated]
);
function succHeap(Heap0: HeapType, Heap1: HeapType): bool;
function succHeapTrans(Heap0: HeapType, Heap1: HeapType): bool;
function IdenticalOnKnownLocations(Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType): bool;
function IsPredicateField<A, B>(f_1: (Field A B)): bool;
function IsWandField<A, B>(f_1: (Field A B)): bool;
function getPredicateId<A, B>(f_1: (Field A B)): int;
// Frame all locations with direct permissions
axiom (forall <A, B> Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType, o: Ref, f_2: (Field A B) ::
  { IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask), ExhaleHeap[o, f_2] }
  IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> HasDirectPerm(Mask, o, f_2) ==> Heap[o, f_2] == ExhaleHeap[o, f_2]
);
// Frame all predicate mask locations of predicates with direct permission
axiom (forall <C> Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType, pm_f: (Field C FrameType) ::
  { IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask), IsPredicateField(pm_f), ExhaleHeap[null, PredicateMaskField(pm_f)] }
  IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> HasDirectPerm(Mask, null, pm_f) && IsPredicateField(pm_f) ==> Heap[null, PredicateMaskField(pm_f)] == ExhaleHeap[null, PredicateMaskField(pm_f)]
);
// Frame all locations with known folded permissions
axiom (forall <C> Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType, pm_f: (Field C FrameType) ::
  { IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask), ExhaleHeap[null, pm_f], IsPredicateField(pm_f) }
  IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> HasDirectPerm(Mask, null, pm_f) && IsPredicateField(pm_f) ==> (forall <A, B> o2: Ref, f_2: (Field A B) ::
    { ExhaleHeap[o2, f_2] }
    Heap[null, PredicateMaskField(pm_f)][o2, f_2] ==> Heap[o2, f_2] == ExhaleHeap[o2, f_2]
  )
);
// Frame all wand mask locations of wands with direct permission
axiom (forall <C> Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType, pm_f: (Field C FrameType) ::
  { IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask), IsWandField(pm_f), ExhaleHeap[null, WandMaskField(pm_f)] }
  IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> HasDirectPerm(Mask, null, pm_f) && IsWandField(pm_f) ==> Heap[null, WandMaskField(pm_f)] == ExhaleHeap[null, WandMaskField(pm_f)]
);
// Frame all locations in the footprint of magic wands
axiom (forall <C> Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType, pm_f: (Field C FrameType) ::
  { IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask), IsWandField(pm_f) }
  IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> HasDirectPerm(Mask, null, pm_f) && IsWandField(pm_f) ==> (forall <A, B> o2: Ref, f_2: (Field A B) ::
    { ExhaleHeap[o2, f_2] }
    Heap[null, WandMaskField(pm_f)][o2, f_2] ==> Heap[o2, f_2] == ExhaleHeap[o2, f_2]
  )
);
// All previously-allocated references are still allocated
axiom (forall Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType, o: Ref ::
  { IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask), ExhaleHeap[o, $allocated] }
  IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> Heap[o, $allocated] ==> ExhaleHeap[o, $allocated]
);
// Updated Heaps are Successor Heaps
axiom (forall <A, B> Heap: HeapType, o: Ref, f_2: (Field A B), v: B ::
  { Heap[o, f_2:=v] }
  succHeap(Heap, Heap[o, f_2:=v])
);
// IdenticalOnKnownLocations Heaps are Successor Heaps
axiom (forall Heap: HeapType, ExhaleHeap: HeapType, Mask: MaskType ::
  { IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) }
  IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask) ==> succHeap(Heap, ExhaleHeap)
);
// Successor Heaps are Transitive Successor Heaps
axiom (forall Heap0: HeapType, Heap1: HeapType ::
  { succHeap(Heap0, Heap1) }
  succHeap(Heap0, Heap1) ==> succHeapTrans(Heap0, Heap1)
);
// Transitivity of Transitive Successor Heaps
axiom (forall Heap0: HeapType, Heap1: HeapType, Heap2: HeapType ::
  { succHeapTrans(Heap0, Heap1), succHeap(Heap1, Heap2) }
  succHeapTrans(Heap0, Heap1) && succHeap(Heap1, Heap2) ==> succHeapTrans(Heap0, Heap2)
);

// ==================================================
// Preamble of Permission module.
// ==================================================

type Perm = real;
type MaskType = <A, B> [Ref, Field A B]Perm;
var Mask: MaskType;
const ZeroMask: MaskType;
axiom (forall <A, B> o_1: Ref, f_3: (Field A B) ::
  { ZeroMask[o_1, f_3] }
  ZeroMask[o_1, f_3] == NoPerm
);
type PMaskType = <A, B> [Ref, Field A B]bool;
const ZeroPMask: PMaskType;
axiom (forall <A, B> o_1: Ref, f_3: (Field A B) ::
  { ZeroPMask[o_1, f_3] }
  !ZeroPMask[o_1, f_3]
);
function PredicateMaskField<A>(f_4: (Field A FrameType)): Field A PMaskType;
function WandMaskField<A>(f_4: (Field A FrameType)): Field A PMaskType;
const NoPerm: Perm;
axiom NoPerm == 0.000000000;
const FullPerm: Perm;
axiom FullPerm == 1.000000000;
function Perm(a: real, b: real): Perm;
function GoodMask(Mask: MaskType): bool;
axiom (forall Heap: HeapType, Mask: MaskType ::
  { state(Heap, Mask) }
  state(Heap, Mask) ==> GoodMask(Mask)
);
axiom (forall <A, B> Mask: MaskType, o_1: Ref, f_3: (Field A B) ::
  { GoodMask(Mask), Mask[o_1, f_3] }
  GoodMask(Mask) ==> Mask[o_1, f_3] >= NoPerm && ((GoodMask(Mask) && !IsPredicateField(f_3)) && !IsWandField(f_3) ==> Mask[o_1, f_3] <= FullPerm)
);
function HasDirectPerm<A, B>(Mask: MaskType, o_1: Ref, f_3: (Field A B)): bool;
axiom (forall <A, B> Mask: MaskType, o_1: Ref, f_3: (Field A B) ::
  { HasDirectPerm(Mask, o_1, f_3) }
  HasDirectPerm(Mask, o_1, f_3) <==> Mask[o_1, f_3] > NoPerm
);
function sumMask(ResultMask: MaskType, SummandMask1: MaskType, SummandMask2: MaskType): bool;
axiom (forall <A, B> ResultMask: MaskType, SummandMask1: MaskType, SummandMask2: MaskType, o_1: Ref, f_3: (Field A B) ::
  { sumMask(ResultMask, SummandMask1, SummandMask2), ResultMask[o_1, f_3] } { sumMask(ResultMask, SummandMask1, SummandMask2), SummandMask1[o_1, f_3] } { sumMask(ResultMask, SummandMask1, SummandMask2), SummandMask2[o_1, f_3] }
  sumMask(ResultMask, SummandMask1, SummandMask2) ==> ResultMask[o_1, f_3] == SummandMask1[o_1, f_3] + SummandMask2[o_1, f_3]
);
// ==================================================
// Function for trigger used in checks which are never triggered
// ==================================================

function neverTriggered1(y_1: Ref): bool;
function neverTriggered2(y_1: Ref): bool;
// ==================================================
// Functions used as inverse of receiver expressions in quantified permissions during inhale and exhale
// ==================================================

function invRecv1(x_1_1: Ref, b_1_1: bool): Ref;
function invRecv2(x_1_1: Ref, b_1_1: bool): Ref;
// ==================================================
// Functions used to represent the range of the projection of each QP instance onto its receiver expressions for quantified permissions during inhale and exhale
// ==================================================

function qpRange1(x_1_1: Ref, b_1_1: bool): bool;
function qpRange2(x_1_1: Ref, b_1_1: bool): bool;

// ==================================================
// Preamble of Function and predicate module.
// ==================================================

// Declarations for function framing
type FrameType;
const EmptyFrame: FrameType;
function FrameFragment<T>(t: T): FrameType;
function ConditionalFrame(p: Perm, f_5: FrameType): FrameType;
function dummyFunction<T>(t: T): bool;
function CombineFrames(a_1: FrameType, b_1: FrameType): FrameType;
// ==================================================
// Definition of conditional frame fragments
// ==================================================

axiom (forall p: Perm, f_5: FrameType ::
  { ConditionalFrame(p, f_5) }
  ConditionalFrame(p, f_5) == (if p > 0.000000000 then f_5 else EmptyFrame)
);
// Function for recording enclosure of one predicate instance in another
function InsidePredicate<A, B>(p: (Field A FrameType), v_1: FrameType, q: (Field B FrameType), w: FrameType): bool;
// Transitivity of InsidePredicate
axiom (forall <A, B, C> p: (Field A FrameType), v_1: FrameType, q: (Field B FrameType), w: FrameType, r: (Field C FrameType), u: FrameType ::
  { InsidePredicate(p, v_1, q, w), InsidePredicate(q, w, r, u) }
  InsidePredicate(p, v_1, q, w) && InsidePredicate(q, w, r, u) ==> InsidePredicate(p, v_1, r, u)
);
// Knowledge that two identical instances of the same predicate cannot be inside each other
axiom (forall <A> p: (Field A FrameType), v_1: FrameType, w: FrameType ::
  { InsidePredicate(p, v_1, p, w) }
  !InsidePredicate(p, v_1, p, w)
);

// ==================================================
// Preamble of Set module.
// ==================================================


type Set T = [T]bool;

function Set#Card<T>(Set T): int;
axiom (forall<T> s: Set T :: { Set#Card(s) } 0 <= Set#Card(s));

function Set#Empty<T>(): Set T;
axiom (forall<T> o: T :: { Set#Empty()[o] } !Set#Empty()[o]);
axiom (forall<T> s: Set T :: { Set#Card(s) }
  (Set#Card(s) == 0 <==> s == Set#Empty()) &&
  (Set#Card(s) != 0 ==> (exists x: T :: s[x])));

function Set#Singleton<T>(T): Set T;
axiom (forall<T> r: T :: { Set#Singleton(r) } Set#Singleton(r)[r]);
axiom (forall<T> r: T, o: T :: { Set#Singleton(r)[o] } Set#Singleton(r)[o] <==> r == o);
axiom (forall<T> r: T :: { Set#Card(Set#Singleton(r)) } Set#Card(Set#Singleton(r)) == 1);

function Set#UnionOne<T>(Set T, T): Set T;
axiom (forall<T> a: Set T, x: T, o: T :: { Set#UnionOne(a,x)[o] }
  Set#UnionOne(a,x)[o] <==> o == x || a[o]);
axiom (forall<T> a: Set T, x: T :: { Set#UnionOne(a, x) }
  Set#UnionOne(a, x)[x]);
axiom (forall<T> a: Set T, x: T, y: T :: { Set#UnionOne(a, x), a[y] }
  a[y] ==> Set#UnionOne(a, x)[y]);
axiom (forall<T> a: Set T, x: T :: { Set#Card(Set#UnionOne(a, x)) }
  a[x] ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));
axiom (forall<T> a: Set T, x: T :: { Set#Card(Set#UnionOne(a, x)) }
  !a[x] ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

function Set#Union<T>(Set T, Set T): Set T;
axiom (forall<T> a: Set T, b: Set T, o: T :: { Set#Union(a,b)[o] }
  Set#Union(a,b)[o] <==> a[o] || b[o]);
axiom (forall<T> a, b: Set T, y: T :: { Set#Union(a, b), a[y] }
  a[y] ==> Set#Union(a, b)[y]);
axiom (forall<T> a, b: Set T, y: T :: { Set#Union(a, b), b[y] }
  b[y] ==> Set#Union(a, b)[y]);
//axiom (forall<T> a, b: Set T :: { Set#Union(a, b) }
//  Set#Disjoint(a, b) ==>
//    Set#Difference(Set#Union(a, b), a) == b &&
//    Set#Difference(Set#Union(a, b), b) == a);

function Set#Intersection<T>(Set T, Set T): Set T;
axiom (forall<T> a: Set T, b: Set T, o: T :: { Set#Intersection(a,b)[o] } {Set#Intersection(a,b), a[o]} {Set#Intersection(a,b), b[o]} // AS: added alternative triggers 20/06/19
  Set#Intersection(a,b)[o] <==> a[o] && b[o]);

axiom (forall<T> a, b: Set T :: { Set#Union(Set#Union(a, b), b) }
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));
axiom (forall<T> a, b: Set T :: { Set#Union(a, Set#Union(a, b)) }
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));
axiom (forall<T> a, b: Set T :: { Set#Intersection(Set#Intersection(a, b), b) }
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));
axiom (forall<T> a, b: Set T :: { Set#Intersection(a, Set#Intersection(a, b)) }
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));
axiom (forall<T> a, b: Set T :: { Set#Card(Set#Union(a, b)) }{ Set#Card(Set#Intersection(a, b)) }
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b)) == Set#Card(a) + Set#Card(b));

function Set#Difference<T>(Set T, Set T): Set T;
axiom (forall<T> a: Set T, b: Set T, o: T :: { Set#Difference(a,b)[o] } { Set#Difference(a,b), a[o] }
  Set#Difference(a,b)[o] <==> a[o] && !b[o]);
axiom (forall<T> a, b: Set T, y: T :: { Set#Difference(a, b), b[y] }
  b[y] ==> !Set#Difference(a, b)[y] );
axiom (forall<T> a, b: Set T ::
  { Set#Card(Set#Difference(a, b)) }
  Set#Card(Set#Difference(a, b)) + Set#Card(Set#Difference(b, a))
  + Set#Card(Set#Intersection(a, b))
    == Set#Card(Set#Union(a, b)) &&
  Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

function Set#Subset<T>(Set T, Set T): bool;
axiom(forall<T> a: Set T, b: Set T :: { Set#Subset(a,b) }
  Set#Subset(a,b) <==> (forall o: T :: {a[o]} {b[o]} a[o] ==> b[o]));
// axiom(forall<T> a: Set T, b: Set T ::
//   { Set#Subset(a,b), Set#Card(a), Set#Card(b) }  // very restrictive trigger
//   Set#Subset(a,b) ==> Set#Card(a) <= Set#Card(b));


function Set#Equal<T>(Set T, Set T): bool;
axiom(forall<T> a: Set T, b: Set T :: { Set#Equal(a,b) }
  Set#Equal(a,b) <==> (forall o: T :: {a[o]} {b[o]} a[o] <==> b[o]));
axiom(forall<T> a: Set T, b: Set T :: { Set#Equal(a,b) }  // extensionality axiom for sets
  Set#Equal(a,b) ==> a == b);

//function Set#Disjoint<T>(Set T, Set T): bool;
//axiom (forall<T> a: Set T, b: Set T :: { Set#Disjoint(a,b) }
//  Set#Disjoint(a,b) <==> (forall o: T :: {a[o]} {b[o]} !a[o] || !b[o]));

// ---------------------------------------------------------------
// -- Axiomatization of multisets --------------------------------
// ---------------------------------------------------------------

function Math#min(a: int, b: int): int;
axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);
axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);
axiom (forall a: int, b: int :: { Math#min(a, b) } Math#min(a, b) == a || Math#min(a, b) == b);

function Math#clip(a: int): int;
axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);
axiom (forall a: int :: { Math#clip(a) } a < 0  ==> Math#clip(a) == 0);

type MultiSet T; // = [T]int;

function MultiSet#Select<T>(ms: MultiSet T, x:T): int;

//function $IsGoodMultiSet<T>(ms: MultiSet T): bool;
// ints are non-negative, used after havocing, and for conversion from sequences to multisets.
//axiom (forall<T> ms: MultiSet T :: { $IsGoodMultiSet(ms) }
//  $IsGoodMultiSet(ms) <==>
//  (forall bx: T :: { ms[bx] } 0 <= ms[bx] && ms[bx] <= MultiSet#Card(ms)));

axiom (forall<T> ms: MultiSet T, x: T :: {MultiSet#Select(ms,x)} MultiSet#Select(ms,x) >= 0); // NEW

function MultiSet#Card<T>(MultiSet T): int;
axiom (forall<T> s: MultiSet T :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));
//axiom (forall<T> s: MultiSet T, x: T, n: int :: { MultiSet#Card(s[x := n]) }
//  0 <= n ==> MultiSet#Card(s[x := n]) == MultiSet#Card(s) - s[x] + n);
//
function MultiSet#Empty<T>(): MultiSet T;
axiom (forall<T> o: T :: { MultiSet#Select(MultiSet#Empty(),o) } MultiSet#Select(MultiSet#Empty(),o) == 0);
axiom (forall<T> s: MultiSet T :: { MultiSet#Card(s) }
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty()) &&
  (MultiSet#Card(s) != 0 ==> (exists x: T :: 0 < MultiSet#Select(s,x))));

function MultiSet#Singleton<T>(T): MultiSet T;
axiom (forall<T> r: T, o: T :: { MultiSet#Select(MultiSet#Singleton(r),o) } (MultiSet#Select(MultiSet#Singleton(r),o) == 1 <==> r == o) &&
                                                            (MultiSet#Select(MultiSet#Singleton(r),o) == 0 <==> r != o));
axiom (forall<T> r: T :: { MultiSet#Singleton(r) } MultiSet#Card(MultiSet#Singleton(r)) == 1 && MultiSet#Select(MultiSet#Singleton(r),r) == 1); // AS: added
axiom (forall<T> r: T :: { MultiSet#Singleton(r) } MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r)); // AS: remove this?

function MultiSet#UnionOne<T>(MultiSet T, T): MultiSet T;
// union-ing increases count by one for x, not for others
axiom (forall<T> a: MultiSet T, x: T, o: T :: { MultiSet#Select(MultiSet#UnionOne(a,x),o) } { MultiSet#UnionOne(a, x), MultiSet#Select(a,o) } // AS: added back this trigger (used on a similar axiom before)
  MultiSet#Select(MultiSet#UnionOne(a, x),o) == (if x==o then MultiSet#Select(a,o) + 1 else MultiSet#Select(a,o)));
// non-decreasing
axiom (forall<T> a: MultiSet T, x: T :: { MultiSet#Card(MultiSet#UnionOne(a, x)) } {MultiSet#UnionOne(a, x), MultiSet#Card(a)} // AS: added alternative trigger
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);
// AS: added - concrete knowledge of element added
axiom (forall<T> a: MultiSet T, x: T :: { MultiSet#UnionOne(a,x)}
  MultiSet#Select(MultiSet#UnionOne(a, x),x) > 0 && MultiSet#Card(MultiSet#UnionOne(a, x)) > 0);

function MultiSet#Union<T>(MultiSet T, MultiSet T): MultiSet T;
// union-ing is the sum of the contents
axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: { MultiSet#Select(MultiSet#Union(a,b),o) } {MultiSet#Union(a,b), MultiSet#Select(a,o), MultiSet#Select(b,o)}// AS: added triggers
  MultiSet#Select(MultiSet#Union(a,b),o) == MultiSet#Select(a,o) + MultiSet#Select(b,o));
axiom (forall<T> a: MultiSet T, b: MultiSet T :: { MultiSet#Card(MultiSet#Union(a,b)) } {MultiSet#Card(a), MultiSet#Union(a,b)} {MultiSet#Card(b), MultiSet#Union(a,b)}
  MultiSet#Card(MultiSet#Union(a,b)) == MultiSet#Card(a) + MultiSet#Card(b));

function MultiSet#Intersection<T>(MultiSet T, MultiSet T): MultiSet T;
axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: { MultiSet#Select(MultiSet#Intersection(a,b),o) }
  MultiSet#Select(MultiSet#Intersection(a,b),o) == Math#min(MultiSet#Select(a,o),  MultiSet#Select(b,o)));

// left and right pseudo-idempotence
axiom (forall<T> a, b: MultiSet T :: { MultiSet#Intersection(MultiSet#Intersection(a, b), b) }
  MultiSet#Intersection(MultiSet#Intersection(a, b), b) == MultiSet#Intersection(a, b));
axiom (forall<T> a, b: MultiSet T :: { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) }
  MultiSet#Intersection(a, MultiSet#Intersection(a, b)) == MultiSet#Intersection(a, b));

// multiset difference, a - b. clip() makes it positive.
function MultiSet#Difference<T>(MultiSet T, MultiSet T): MultiSet T;
axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: { MultiSet#Select(MultiSet#Difference(a,b),o) }
  MultiSet#Select(MultiSet#Difference(a,b),o) == Math#clip(MultiSet#Select(a,o) - MultiSet#Select(b,o)));
axiom (forall<T> a, b: MultiSet T, y: T :: { MultiSet#Difference(a, b), MultiSet#Select(b,y), MultiSet#Select(a,y) }
  MultiSet#Select(a,y) <= MultiSet#Select(b,y) ==> MultiSet#Select(MultiSet#Difference(a, b),y) == 0 );
axiom (forall<T> a, b: MultiSet T ::
  { MultiSet#Card(MultiSet#Difference(a, b)) }
  MultiSet#Card(MultiSet#Difference(a, b)) + MultiSet#Card(MultiSet#Difference(b, a))
  + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
    == MultiSet#Card(MultiSet#Union(a, b)) &&
  MultiSet#Card(MultiSet#Difference(a, b)) == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

// multiset subset means a must have at most as many of each element as b
function MultiSet#Subset<T>(MultiSet T, MultiSet T): bool;
axiom(forall<T> a: MultiSet T, b: MultiSet T :: { MultiSet#Subset(a,b) }
  MultiSet#Subset(a,b) <==> (forall o: T :: {MultiSet#Select(a,o)} {MultiSet#Select(b,o)} MultiSet#Select(a,o) <= MultiSet#Select(b,o)));

function MultiSet#Equal<T>(MultiSet T, MultiSet T): bool;
axiom(forall<T> a: MultiSet T, b: MultiSet T :: { MultiSet#Equal(a,b) }
  MultiSet#Equal(a,b) <==> (forall o: T :: {MultiSet#Select(a,o)} {MultiSet#Select(b,o)} MultiSet#Select(a,o) == MultiSet#Select(b,o)));
// extensionality axiom for multisets
axiom(forall<T> a: MultiSet T, b: MultiSet T :: { MultiSet#Equal(a,b) }
  MultiSet#Equal(a,b) ==> a == b);

function MultiSet#Disjoint<T>(MultiSet T, MultiSet T): bool;
axiom (forall<T> a: MultiSet T, b: MultiSet T :: { MultiSet#Disjoint(a,b) }
  MultiSet#Disjoint(a,b) <==> (forall o: T :: {MultiSet#Select(a,o)} {MultiSet#Select(b,o)} MultiSet#Select(a,o) == 0 || MultiSet#Select(b,o) == 0));

    

// ==================================================
// Translation of all fields
// ==================================================

const unique f_6: Field NormalField int;
axiom !IsPredicateField(f_6);
axiom !IsWandField(f_6);
const unique g: Field NormalField bool;
axiom !IsPredicateField(g);
axiom !IsWandField(g);

// ==================================================
// Translation of predicate P
// ==================================================

type PredicateType_P;
function P(x: Ref, b_2: bool): Field PredicateType_P FrameType;
function P#sm(x: Ref, b_2: bool): Field PredicateType_P PMaskType;
axiom (forall x: Ref, b_2: bool ::
  { PredicateMaskField(P(x, b_2)) }
  PredicateMaskField(P(x, b_2)) == P#sm(x, b_2)
);
axiom (forall x: Ref, b_2: bool ::
  { P(x, b_2) }
  IsPredicateField(P(x, b_2))
);
axiom (forall x: Ref, b_2: bool ::
  { P(x, b_2) }
  getPredicateId(P(x, b_2)) == 0
);
function P#trigger<A>(Heap: HeapType, pred: (Field A FrameType)): bool;
function P#everUsed<A>(pred: (Field A FrameType)): bool;
axiom (forall x: Ref, b_2: bool, x2: Ref, b2: bool ::
  { P(x, b_2), P(x2, b2) }
  P(x, b_2) == P(x2, b2) ==> x == x2 && b_2 == b2
);
axiom (forall x: Ref, b_2: bool, x2: Ref, b2: bool ::
  { P#sm(x, b_2), P#sm(x2, b2) }
  P#sm(x, b_2) == P#sm(x2, b2) ==> x == x2 && b_2 == b2
);

axiom (forall Heap: HeapType, x: Ref, b_2: bool ::
  { P#trigger(Heap, P(x, b_2)) }
  P#everUsed(P(x, b_2))
);

// ==================================================
// Translation of method known_folded_1
// ==================================================

procedure known_folded_1(x: Ref, xs: (Set Ref), b_2: bool) returns ()
  modifies Heap, Mask;
{
  var QPMask: MaskType;
  var PostHeap: HeapType;
  var PostMask: MaskType;
  var perm: Perm;
  var newVersion: FrameType;
  var ExhaleHeap: HeapType;
  
  // -- Initializing the state
    Mask := ZeroMask;
    assume state(Heap, Mask);
  
  // -- Assumptions about method arguments
    assume Heap[x, $allocated];
  
  // -- Checked inhaling of precondition
    
    // -- Check definedness of (forall y: Ref :: { (y in xs) } (y in xs) ==> acc(P(y, b), write))
      if (*) {
        assume false;
      }
      assume state(Heap, Mask);
    havoc QPMask;
    
    // -- Define Inverse Function
      assume (forall y_1: Ref ::
        { Heap[null, P(y_1, b_2)] } { Mask[null, P(y_1, b_2)] } { xs[y_1] }
        xs[y_1] && NoPerm < FullPerm ==> invRecv1(y_1, b_2) == y_1 && qpRange1(y_1, b_2)
      );
      assume (forall x_1_1: Ref, b_1_1: bool ::
        { invRecv1(x_1_1, b_1_1) }
        (xs[invRecv1(x_1_1, b_1_1)] && NoPerm < FullPerm) && qpRange1(x_1_1, b_1_1) ==> invRecv1(x_1_1, b_1_1) == x_1_1 && b_2 == b_1_1
      );
    
    // -- Define updated permissions
      assume (forall x_1_1: Ref, b_1_1: bool ::
        { QPMask[null, P(x_1_1, b_1_1)] }
        (xs[invRecv1(x_1_1, b_1_1)] && NoPerm < FullPerm) && qpRange1(x_1_1, b_1_1) ==> (NoPerm < FullPerm ==> invRecv1(x_1_1, b_1_1) == x_1_1 && b_2 == b_1_1) && QPMask[null, P(x_1_1, b_1_1)] == Mask[null, P(x_1_1, b_1_1)] + FullPerm
      );
    
    // -- Define independent locations
      assume (forall <A, B> o_2: Ref, f_4: (Field A B) ::
        { Mask[o_2, f_4] } { QPMask[o_2, f_4] }
        (o_2 != null || !IsPredicateField(f_4)) || getPredicateId(f_4) != 0 ==> Mask[o_2, f_4] == QPMask[o_2, f_4]
      );
      assume (forall x_1_1: Ref, b_1_1: bool ::
        { QPMask[null, P(x_1_1, b_1_1)] }
        !((xs[invRecv1(x_1_1, b_1_1)] && NoPerm < FullPerm) && qpRange1(x_1_1, b_1_1)) ==> QPMask[null, P(x_1_1, b_1_1)] == Mask[null, P(x_1_1, b_1_1)]
      );
    Mask := QPMask;
    assume state(Heap, Mask);
    assume state(Heap, Mask);
    assume xs[x];
    assume state(Heap, Mask);
  
  // -- Initializing of old state
    
    // -- Initializing the old state
      assume Heap == old(Heap);
      assume Mask == old(Mask);
  PostHeap := Heap;
  PostMask := Mask;
  havoc PostHeap;
  PostMask := ZeroMask;
  assume state(PostHeap, PostMask);
  if (*) {
    // Checked inhaling of postcondition to check definedness
    if (b_2) {
      perm := FullPerm;
      assume x != null;
      PostMask[x, f_6] := PostMask[x, f_6] + perm;
      assume state(PostHeap, PostMask);
      assume state(PostHeap, PostMask);
      
      // -- Check definedness of x.f == 0
        assert {:msg "  Contract might not be well-formed. There might be insufficient permission to access x.f. (knownfolded.vpr@14.11) [55]"}
          HasDirectPerm(PostMask, x, f_6);
        assume state(PostHeap, PostMask);
      assume PostHeap[x, f_6] == 0;
      assume state(PostHeap, PostMask);
    } else {
      perm := FullPerm;
      assume x != null;
      PostMask[x, g] := PostMask[x, g] + perm;
      assume state(PostHeap, PostMask);
      assume state(PostHeap, PostMask);
      
      // -- Check definedness of x.g
        assert {:msg "  Contract might not be well-formed. There might be insufficient permission to access x.g. (knownfolded.vpr@14.11) [56]"}
          HasDirectPerm(PostMask, x, g);
        assume state(PostHeap, PostMask);
      assume PostHeap[x, g];
      assume state(PostHeap, PostMask);
    }
    // Stop execution
    assume false;
  }
  
  // -- Translating statement: unfold acc(P(x, b), write) -- knownfolded.vpr@16.3
    assume P#trigger(Heap, P(x, b_2));
    assume Heap[null, P(x, b_2)] == FrameFragment((if b_2 then FrameFragment(Heap[x, f_6]) else FrameFragment(Heap[x, g])));
    // Phase 1: pure assertions and fixed permissions
    perm := NoPerm;
    perm := perm + FullPerm;
    if (perm != NoPerm) {
      assert {:msg "  Unfolding P(x, b) might fail. There might be insufficient permission to access P(x, b). (knownfolded.vpr@16.3) [58]"}
        perm <= Mask[null, P(x, b_2)];
    }
    Mask[null, P(x, b_2)] := Mask[null, P(x, b_2)] - perm;
    
    // -- Update version of predicate
      if (!HasDirectPerm(Mask, null, P(x, b_2))) {
        havoc newVersion;
        Heap[null, P(x, b_2)] := newVersion;
      }
    if (b_2) {
      perm := FullPerm;
      assume x != null;
      Mask[x, f_6] := Mask[x, f_6] + perm;
      assume state(Heap, Mask);
    } else {
      perm := FullPerm;
      assume x != null;
      Mask[x, g] := Mask[x, g] + perm;
      assume state(Heap, Mask);
    }
    assume state(Heap, Mask);
    assume state(Heap, Mask);
  
  // -- Translating statement: if (b) -- knownfolded.vpr@18.3
    if (b_2) {
      
      // -- Translating statement: x.f := 0 -- knownfolded.vpr@19.5
        assert {:msg "  Assignment might fail. There might be insufficient permission to access x.f. (knownfolded.vpr@19.5) [59]"}
          FullPerm == Mask[x, f_6];
        Heap[x, f_6] := 0;
        assume state(Heap, Mask);
    } else {
      
      // -- Translating statement: x.g := true -- knownfolded.vpr@21.5
        assert {:msg "  Assignment might fail. There might be insufficient permission to access x.g. (knownfolded.vpr@21.5) [60]"}
          FullPerm == Mask[x, g];
        Heap[x, g] := true;
        assume state(Heap, Mask);
    }
    assume state(Heap, Mask);
  
  // -- Exhaling postcondition
    // Phase 1: pure assertions and fixed permissions
    if (b_2) {
      perm := NoPerm;
      perm := perm + FullPerm;
      if (perm != NoPerm) {
        assert {:msg "  Postcondition of test1 might not hold. There might be insufficient permission to access x.f. (knownfolded.vpr@14.11) [61]"}
          perm <= Mask[x, f_6];
      }
      Mask[x, f_6] := Mask[x, f_6] - perm;
      assert {:msg "  Postcondition of test1 might not hold. Assertion x.f == 0 might not hold. (knownfolded.vpr@14.11) [62]"}
        Heap[x, f_6] == 0;
    } else {
      perm := NoPerm;
      perm := perm + FullPerm;
      if (perm != NoPerm) {
        assert {:msg "  Postcondition of test1 might not hold. There might be insufficient permission to access x.g. (knownfolded.vpr@14.11) [63]"}
          perm <= Mask[x, g];
      }
      Mask[x, g] := Mask[x, g] - perm;
      assert {:msg "  Postcondition of test1 might not hold. Assertion x.g might not hold. (knownfolded.vpr@14.11) [64]"}
        Heap[x, g];
    }
    // Phase 2: abstract read permissions (and scaled abstract read permissions)
    // Phase 3: all remaining permissions (containing read permissions, but in a negative context)
    // Finish exhale
    havoc ExhaleHeap;
    assume IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask);
    Heap := ExhaleHeap;
}

// ==================================================
// Translation of method known_folded_2
// ==================================================

procedure known_folded_2(x: Ref, xs: (Set Ref), b_2: bool) returns ()
  modifies Heap, Mask;
{
  var QPMask: MaskType;
  var PostHeap: HeapType;
  var PostMask: MaskType;
  var perm: Perm;
  var UnfoldingHeap: HeapType;
  var UnfoldingMask: MaskType;
  var newVersion: FrameType;
  var freshVersion: FrameType;
  var ExhaleHeap: HeapType;
  
  // -- Initializing the state
    Mask := ZeroMask;
    assume state(Heap, Mask);
  
  // -- Assumptions about method arguments
    assume Heap[x, $allocated];
  
  // -- Checked inhaling of precondition
    
    // -- Check definedness of (forall y: Ref :: { (y in xs) } (y in xs) ==> acc(P(y, b), write))
      if (*) {
        assume false;
      }
      assume state(Heap, Mask);
    havoc QPMask;
    
    // -- Define Inverse Function
      assume (forall y_1: Ref ::
        { Heap[null, P(y_1, b_2)] } { Mask[null, P(y_1, b_2)] } { xs[y_1] }
        xs[y_1] && NoPerm < FullPerm ==> invRecv2(y_1, b_2) == y_1 && qpRange2(y_1, b_2)
      );
      assume (forall x_1_1: Ref, b_1_1: bool ::
        { invRecv2(x_1_1, b_1_1) }
        (xs[invRecv2(x_1_1, b_1_1)] && NoPerm < FullPerm) && qpRange2(x_1_1, b_1_1) ==> invRecv2(x_1_1, b_1_1) == x_1_1 && b_2 == b_1_1
      );
    
    // -- Define updated permissions
      assume (forall x_1_1: Ref, b_1_1: bool ::
        { QPMask[null, P(x_1_1, b_1_1)] }
        (xs[invRecv2(x_1_1, b_1_1)] && NoPerm < FullPerm) && qpRange2(x_1_1, b_1_1) ==> (NoPerm < FullPerm ==> invRecv2(x_1_1, b_1_1) == x_1_1 && b_2 == b_1_1) && QPMask[null, P(x_1_1, b_1_1)] == Mask[null, P(x_1_1, b_1_1)] + FullPerm
      );
    
    // -- Define independent locations
      assume (forall <A, B> o_2: Ref, f_4: (Field A B) ::
        { Mask[o_2, f_4] } { QPMask[o_2, f_4] }
        (o_2 != null || !IsPredicateField(f_4)) || getPredicateId(f_4) != 0 ==> Mask[o_2, f_4] == QPMask[o_2, f_4]
      );
      assume (forall x_1_1: Ref, b_1_1: bool ::
        { QPMask[null, P(x_1_1, b_1_1)] }
        !((xs[invRecv2(x_1_1, b_1_1)] && NoPerm < FullPerm) && qpRange2(x_1_1, b_1_1)) ==> QPMask[null, P(x_1_1, b_1_1)] == Mask[null, P(x_1_1, b_1_1)]
      );
    Mask := QPMask;
    assume state(Heap, Mask);
    assume state(Heap, Mask);
    assume xs[x];
    assume state(Heap, Mask);
  
  // -- Initializing of old state
    
    // -- Initializing the old state
      assume Heap == old(Heap);
      assume Mask == old(Mask);
  PostHeap := Heap;
  PostMask := Mask;
  havoc PostHeap;
  PostMask := ZeroMask;
  assume state(PostHeap, PostMask);
  if (*) {
    // Checked inhaling of postcondition to check definedness
    perm := FullPerm;
    PostMask[null, P(x, b_2)] := PostMask[null, P(x, b_2)] + perm;
    assume state(PostHeap, PostMask);
    assume state(PostHeap, PostMask);
    
    // -- Check definedness of (unfolding acc(P(x, b), write) in (b ? x.f == 0 : x.g))
      UnfoldingHeap := PostHeap;
      UnfoldingMask := PostMask;
      assume P#trigger(UnfoldingHeap, P(x, b_2));
      assume UnfoldingHeap[null, P(x, b_2)] == FrameFragment((if b_2 then FrameFragment(UnfoldingHeap[x, f_6]) else FrameFragment(UnfoldingHeap[x, g])));
      // Phase 1: pure assertions and fixed permissions
      perm := NoPerm;
      perm := perm + FullPerm;
      if (perm != NoPerm) {
        assert {:msg "  Contract might not be well-formed. There might be insufficient permission to access P(x, b). (knownfolded.vpr@31.11) [65]"}
          perm <= UnfoldingMask[null, P(x, b_2)];
      }
      UnfoldingMask[null, P(x, b_2)] := UnfoldingMask[null, P(x, b_2)] - perm;
      if (b_2) {
        perm := FullPerm;
        assume x != null;
        UnfoldingMask[x, f_6] := UnfoldingMask[x, f_6] + perm;
        assume state(UnfoldingHeap, UnfoldingMask);
      } else {
        perm := FullPerm;
        assume x != null;
        UnfoldingMask[x, g] := UnfoldingMask[x, g] + perm;
        assume state(UnfoldingHeap, UnfoldingMask);
      }
      assume state(UnfoldingHeap, UnfoldingMask);
      if (b_2) {
        assert {:msg "  Contract might not be well-formed. There might be insufficient permission to access x.f. (knownfolded.vpr@31.11) [66]"}
          HasDirectPerm(UnfoldingMask, x, f_6);
      } else {
        assert {:msg "  Contract might not be well-formed. There might be insufficient permission to access x.g. (knownfolded.vpr@31.11) [67]"}
          HasDirectPerm(UnfoldingMask, x, g);
      }
      
      // -- Free assumptions
        if (b_2) {
          PostHeap[null, P#sm(x, b_2)][x, f_6] := true;
        } else {
          PostHeap[null, P#sm(x, b_2)][x, g] := true;
        }
        assume state(PostHeap, PostMask);
      assume state(PostHeap, PostMask);
    if (b_2) {
      PostHeap[null, P#sm(x, b_2)][x, f_6] := true;
    } else {
      PostHeap[null, P#sm(x, b_2)][x, g] := true;
    }
    
    // -- Execute unfolding (for extra information)
      UnfoldingHeap := PostHeap;
      UnfoldingMask := PostMask;
      assume P#trigger(UnfoldingHeap, P(x, b_2));
      assume UnfoldingHeap[null, P(x, b_2)] == FrameFragment((if b_2 then FrameFragment(UnfoldingHeap[x, f_6]) else FrameFragment(UnfoldingHeap[x, g])));
      // Phase 1: pure assertions and fixed permissions
      perm := NoPerm;
      perm := perm + FullPerm;
      UnfoldingMask[null, P(x, b_2)] := UnfoldingMask[null, P(x, b_2)] - perm;
      if (b_2) {
        perm := FullPerm;
        assume x != null;
        UnfoldingMask[x, f_6] := UnfoldingMask[x, f_6] + perm;
        assume state(UnfoldingHeap, UnfoldingMask);
      } else {
        perm := FullPerm;
        assume x != null;
        UnfoldingMask[x, g] := UnfoldingMask[x, g] + perm;
        assume state(UnfoldingHeap, UnfoldingMask);
      }
      assume state(UnfoldingHeap, UnfoldingMask);
    assume (if b_2 then PostHeap[x, f_6] == 0 else PostHeap[x, g]);
    
    // -- Free assumptions
      if (b_2) {
        PostHeap[null, P#sm(x, b_2)][x, f_6] := true;
      } else {
        PostHeap[null, P#sm(x, b_2)][x, g] := true;
      }
      assume state(PostHeap, PostMask);
    assume state(PostHeap, PostMask);
    // Stop execution
    assume false;
  }
  
  // -- Translating statement: unfold acc(P(x, b), write) -- knownfolded.vpr@33.3
    assume P#trigger(Heap, P(x, b_2));
    assume Heap[null, P(x, b_2)] == FrameFragment((if b_2 then FrameFragment(Heap[x, f_6]) else FrameFragment(Heap[x, g])));
    // Phase 1: pure assertions and fixed permissions
    perm := NoPerm;
    perm := perm + FullPerm;
    if (perm != NoPerm) {
      assert {:msg "  Unfolding P(x, b) might fail. There might be insufficient permission to access P(x, b). (knownfolded.vpr@33.3) [69]"}
        perm <= Mask[null, P(x, b_2)];
    }
    Mask[null, P(x, b_2)] := Mask[null, P(x, b_2)] - perm;
    
    // -- Update version of predicate
      if (!HasDirectPerm(Mask, null, P(x, b_2))) {
        havoc newVersion;
        Heap[null, P(x, b_2)] := newVersion;
      }
    if (b_2) {
      perm := FullPerm;
      assume x != null;
      Mask[x, f_6] := Mask[x, f_6] + perm;
      assume state(Heap, Mask);
    } else {
      perm := FullPerm;
      assume x != null;
      Mask[x, g] := Mask[x, g] + perm;
      assume state(Heap, Mask);
    }
    assume state(Heap, Mask);
    assume state(Heap, Mask);
  
  // -- Translating statement: if (b) -- knownfolded.vpr@35.3
    if (b_2) {
      
      // -- Translating statement: x.f := 0 -- knownfolded.vpr@36.5
        assert {:msg "  Assignment might fail. There might be insufficient permission to access x.f. (knownfolded.vpr@36.5) [70]"}
          FullPerm == Mask[x, f_6];
        Heap[x, f_6] := 0;
        assume state(Heap, Mask);
    } else {
      
      // -- Translating statement: x.g := true -- knownfolded.vpr@38.5
        assert {:msg "  Assignment might fail. There might be insufficient permission to access x.g. (knownfolded.vpr@38.5) [71]"}
          FullPerm == Mask[x, g];
        Heap[x, g] := true;
        assume state(Heap, Mask);
    }
    assume state(Heap, Mask);
  
  // -- Translating statement: fold acc(P(x, b), write) -- knownfolded.vpr@40.3
    // Phase 1: pure assertions and fixed permissions
    if (b_2) {
      perm := NoPerm;
      perm := perm + FullPerm;
      if (perm != NoPerm) {
        assert {:msg "  Folding P(x, b) might fail. There might be insufficient permission to access x.f. (knownfolded.vpr@40.3) [73]"}
          perm <= Mask[x, f_6];
      }
      Mask[x, f_6] := Mask[x, f_6] - perm;
    } else {
      perm := NoPerm;
      perm := perm + FullPerm;
      if (perm != NoPerm) {
        assert {:msg "  Folding P(x, b) might fail. There might be insufficient permission to access x.g. (knownfolded.vpr@40.3) [75]"}
          perm <= Mask[x, g];
      }
      Mask[x, g] := Mask[x, g] - perm;
    }
    // Phase 2: abstract read permissions (and scaled abstract read permissions)
    // Phase 3: all remaining permissions (containing read permissions, but in a negative context)
    perm := FullPerm;
    Mask[null, P(x, b_2)] := Mask[null, P(x, b_2)] + perm;
    assume state(Heap, Mask);
    assume state(Heap, Mask);
    assume P#trigger(Heap, P(x, b_2));
    assume Heap[null, P(x, b_2)] == FrameFragment((if b_2 then FrameFragment(Heap[x, f_6]) else FrameFragment(Heap[x, g])));
    if (!HasDirectPerm(Mask, null, P(x, b_2))) {
      Heap[null, P#sm(x, b_2)] := ZeroPMask;
      havoc freshVersion;
      Heap[null, P(x, b_2)] := freshVersion;
    }
    if (b_2) {
      Heap[null, P#sm(x, b_2)][x, f_6] := true;
    } else {
      Heap[null, P#sm(x, b_2)][x, g] := true;
    }
    assume state(Heap, Mask);
    assume state(Heap, Mask);
  
  // -- Exhaling postcondition
    // Phase 1: pure assertions and fixed permissions
    perm := NoPerm;
    perm := perm + FullPerm;
    if (perm != NoPerm) {
      assert {:msg "  Postcondition of test2 might not hold. There might be insufficient permission to access P(x, b). (knownfolded.vpr@30.11) [76]"}
        perm <= Mask[null, P(x, b_2)];
    }
    Mask[null, P(x, b_2)] := Mask[null, P(x, b_2)] - perm;
    
    // -- Execute unfolding (for extra information)
      UnfoldingHeap := Heap;
      UnfoldingMask := Mask;
      assume P#trigger(UnfoldingHeap, P(x, b_2));
      assume UnfoldingHeap[null, P(x, b_2)] == FrameFragment((if b_2 then FrameFragment(UnfoldingHeap[x, f_6]) else FrameFragment(UnfoldingHeap[x, g])));
      if (b_2) {
        perm := FullPerm;
        assume x != null;
        UnfoldingMask[x, f_6] := UnfoldingMask[x, f_6] + perm;
        assume state(UnfoldingHeap, UnfoldingMask);
      } else {
        perm := FullPerm;
        assume x != null;
        UnfoldingMask[x, g] := UnfoldingMask[x, g] + perm;
        assume state(UnfoldingHeap, UnfoldingMask);
      }
      assume state(UnfoldingHeap, UnfoldingMask);
    if (b_2) {
      assert {:msg "  Postcondition of test2 might not hold. Assertion x.f == 0 might not hold. (knownfolded.vpr@31.11) [77]"}
        UnfoldingHeap[x, f_6] == 0;
    } else {
      assert {:msg "  Postcondition of test2 might not hold. Assertion x.g might not hold. (knownfolded.vpr@31.11) [78]"}
        UnfoldingHeap[x, g];
    }
    
    // -- Free assumptions
      if (b_2) {
        Heap[null, P#sm(x, b_2)][x, f_6] := true;
      } else {
        Heap[null, P#sm(x, b_2)][x, g] := true;
      }
      assume state(Heap, Mask);
    // Finish exhale
    havoc ExhaleHeap;
    assume IdenticalOnKnownLocations(Heap, ExhaleHeap, Mask);
    Heap := ExhaleHeap;
}
