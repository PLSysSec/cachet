---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "i",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "r",
                ],
                type_: Atom(
                    Real,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "i",
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "i",
                    ),
                    op: Ge,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "i",
                    ),
                    op: Le,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: Some(
                                Exp {
                                    is_neg: false,
                                    digits: "0",
                                },
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "i",
                    ),
                    op: Lt,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: Some(
                                Exp {
                                    is_neg: true,
                                    digits: "0",
                                },
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "i",
                    ),
                    op: Gt,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: Some(
                                Exp {
                                    is_neg: false,
                                    digits: "20",
                                },
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Neg(
                        NegExpr {
                            op: Arith,
                            expr: Var(
                                "i",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "r",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Term(
                        Term {
                            lhs: Var(
                                "i",
                            ),
                            op: Add,
                            rhs: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Term(
                        Term {
                            lhs: Var(
                                "i",
                            ),
                            op: Sub,
                            rhs: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Factor(
                        Factor {
                            lhs: Var(
                                "i",
                            ),
                            op: Mul,
                            rhs: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Factor(
                        Factor {
                            lhs: Var(
                                "i",
                            ),
                            op: Div,
                            rhs: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Factor(
                        Factor {
                            lhs: Var(
                                "i",
                            ),
                            op: Mod,
                            rhs: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Factor(
                        Factor {
                            lhs: Var(
                                "i",
                            ),
                            op: RealDiv,
                            rhs: Var(
                                "i",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Factor(
                        Factor {
                            lhs: Var(
                                "i",
                            ),
                            op: RealDiv,
                            rhs: Var(
                                "i",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Factor(
                        Factor {
                            lhs: Var(
                                "i",
                            ),
                            op: RealDiv,
                            rhs: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Factor(
                        Factor {
                            lhs: Var(
                                "r",
                            ),
                            op: RealDiv,
                            rhs: Var(
                                "i",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Factor(
                        Factor {
                            lhs: Var(
                                "r",
                            ),
                            op: RealDiv,
                            rhs: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Power(
                        Power {
                            lhs: Var(
                                "i",
                            ),
                            rhs: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Power(
                        Power {
                            lhs: Var(
                                "r",
                            ),
                            rhs: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: ArithCoercion(
                        ArithCoercionExpr {
                            kind: Real,
                            expr: Var(
                                "i",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: ArithCoercion(
                        ArithCoercionExpr {
                            kind: Real,
                            expr: Var(
                                "i",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "i",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: ArithCoercion(
                        ArithCoercionExpr {
                            kind: Int,
                            expr: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: ArithCoercion(
                        ArithCoercionExpr {
                            kind: Int,
                            expr: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "r",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: ArithCoercion(
                        ArithCoercionExpr {
                            kind: Int,
                            expr: ArithCoercion(
                                ArithCoercionExpr {
                                    kind: Real,
                                    expr: Var(
                                        "i",
                                    ),
                                },
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "i",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: ArithCoercion(
                        ArithCoercionExpr {
                            kind: Real,
                            expr: ArithCoercion(
                                ArithCoercionExpr {
                                    kind: Int,
                                    expr: Var(
                                        "r",
                                    ),
                                },
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "r",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: ArithCoercion(
                        ArithCoercionExpr {
                            kind: Int,
                            expr: ArithCoercion(
                                ArithCoercionExpr {
                                    kind: Int,
                                    expr: Var(
                                        "r",
                                    ),
                                },
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "i",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: ArithCoercion(
                        ArithCoercionExpr {
                            kind: Real,
                            expr: ArithCoercion(
                                ArithCoercionExpr {
                                    kind: Real,
                                    expr: Var(
                                        "i",
                                    ),
                                },
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "r",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "i",
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: ArithCoercion(
                        ArithCoercionExpr {
                            kind: Real,
                            expr: Var(
                                "i",
                            ),
                        },
                    ),
                    op: Ge,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: ArithCoercion(
                        ArithCoercionExpr {
                            kind: Real,
                            expr: Var(
                                "i",
                            ),
                        },
                    ),
                    op: Le,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: Some(
                                Exp {
                                    is_neg: false,
                                    digits: "0",
                                },
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "r",
                    ),
                    op: Lt,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: Some(
                                Exp {
                                    is_neg: true,
                                    digits: "0",
                                },
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "r",
                    ),
                    op: Gt,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: Some(
                                Exp {
                                    is_neg: false,
                                    digits: "20",
                                },
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Neg(
                        NegExpr {
                            op: Arith,
                            expr: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: ArithCoercion(
                        ArithCoercionExpr {
                            kind: Real,
                            expr: Var(
                                "i",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Term(
                        Term {
                            lhs: ArithCoercion(
                                ArithCoercionExpr {
                                    kind: Real,
                                    expr: Var(
                                        "i",
                                    ),
                                },
                            ),
                            op: Add,
                            rhs: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Term(
                        Term {
                            lhs: Var(
                                "r",
                            ),
                            op: Sub,
                            rhs: ArithCoercion(
                                ArithCoercionExpr {
                                    kind: Real,
                                    expr: Nat(
                                        "0",
                                    ),
                                },
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Factor(
                        Factor {
                            lhs: Var(
                                "r",
                            ),
                            op: Mul,
                            rhs: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Factor(
                        Factor {
                            lhs: Var(
                                "r",
                            ),
                            op: Div,
                            rhs: Nat(
                                "0",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Factor(
                        Factor {
                            lhs: Var(
                                "r",
                            ),
                            op: Mod,
                            rhs: Nat(
                                "0",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Power(
                        Power {
                            lhs: Var(
                                "r",
                            ),
                            rhs: Var(
                                "r",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Dec(
                        Dec {
                            whole: "0",
                            fract: Some(
                                "0",
                            ),
                            exp: None,
                        },
                    ),
                },
            ),
        },
    ),
]

[Printed]
const i: int;

const r: real;

axiom i == 0;

axiom i >= 0.0;

axiom i <= 0.0e0;

axiom i < 0.0e-0;

axiom i > 0.0e20;

axiom -i == r;

axiom i + r == 0.0;

axiom i - r == 0.0;

axiom i * r == 0.0;

axiom i div r == 0;

axiom i mod r == 0;

axiom i / i == 0;

axiom i / i == 0.0;

axiom i / r == 0.0;

axiom r / i == 0.0;

axiom r / r == 0.0;

axiom i ** r == 0.0;

axiom r ** r == 0.0;

axiom real(i) == 0.0;

axiom real(i) == i;

axiom int(r) == 0;

axiom int(r) == r;

axiom int(real(i)) == i;

axiom real(int(r)) == r;

axiom int(int(r)) == i;

axiom real(real(i)) == r;

axiom i == 0;

axiom real(i) >= 0.0;

axiom real(i) <= 0.0e0;

axiom r < 0.0e-0;

axiom r > 0.0e20;

axiom -r == real(i);

axiom real(i) + r == 0.0;

axiom r - real(0) == 0.0;

axiom r * r == 0.0;

axiom r div 0 == 0;

axiom r mod 0 == 0;

axiom r ** r == 0.0;

[Input - ../../vendor/boogie/Test/test1/IntReal.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
const i: int;
const r: real;

axiom i == 0;
axiom i >= 0.0;                // type error
axiom i <= 0.0e0;              // type error
axiom i < 0.0e-0;              // type error
axiom i > 0.0e20;              // type error

axiom -i == r;                 // type error
axiom i + r == 0.0;            // type error
axiom i - r == 0.0;            // type error
axiom i * r == 0.0;            // type error
axiom i div r == 0;            // type error
axiom i mod r == 0;            // type error

axiom i / i == 0;              // type error
axiom i / i == 0.0;
axiom i / r == 0.0;
axiom r / i == 0.0;
axiom r / r == 0.0;

axiom i ** r == 0.0;           // type error
axiom r ** r == 0.0;

axiom real(i) == 0.0;
axiom real(i) == i;            // type error
axiom int(r) == 0;
axiom int(r) == r;             // type error
axiom int(real(i)) == i;
axiom real(int(r)) == r;
axiom int(int(r)) == i;        // type error
axiom real(real(i)) == r;      // type error

axiom i == 0;
axiom real(i) >= 0.0;
axiom real(i) <= 0.0e0;
axiom r < 0.0e-0;
axiom r > 0.0e20;

axiom -r == real(i);
axiom real(i) + r == 0.0;
axiom r - real(0) == 0.0;
axiom r * r == 0.0;
axiom r div 0 == 0;            // type error
axiom r mod 0 == 0;            // type error

axiom r ** r == 0.0;
