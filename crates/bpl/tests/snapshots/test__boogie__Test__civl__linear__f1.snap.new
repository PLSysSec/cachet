---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "1",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "X",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Int,
                        ),
                    ),
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b0",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b1",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b2",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b3",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b4",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b5",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b6",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b7",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b8",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Var(
                "b0",
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Var(
                "b1",
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Var(
                "b2",
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Var(
                "b3",
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Var(
                "b4",
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Var(
                "b5",
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: Var(
                        "b6",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: Var(
                        "b7",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Var(
                "b8",
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "1",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "SetCollector1",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: Some(
                Var(
                    "x",
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "main",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "1",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x_in",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b0",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x_in",
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "MapConst",
                                                args: [
                                                    BoolLit(
                                                        true,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b1",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x_in",
                                        ),
                                        op: Neq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "MapConst",
                                                args: [
                                                    BoolLit(
                                                        false,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "1",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x_in",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "foo",
                                        params: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Var(
                                                "b6",
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Eq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "MapConst",
                                                            args: [
                                                                BoolLit(
                                                                    true,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Var(
                                                "b7",
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Neq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "MapConst",
                                                            args: [
                                                                BoolLit(
                                                                    false,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Var(
                                                "b8",
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Eq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "MapConst",
                                                            args: [
                                                                BoolLit(
                                                                    false,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "foo",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "1",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x_in",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b2",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x_in",
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "MapConst",
                                                args: [
                                                    BoolLit(
                                                        true,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b3",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x_in",
                                        ),
                                        op: Neq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "MapConst",
                                                args: [
                                                    BoolLit(
                                                        false,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "1",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x_in",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Var(
                                                "b4",
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Eq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "MapConst",
                                                            args: [
                                                                BoolLit(
                                                                    true,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Var(
                                                "b5",
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Neq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "MapConst",
                                                            args: [
                                                                BoolLit(
                                                                    false,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
type {:linear "1"} X = int;

const {:existential true} b0: bool;

const {:existential true} b1: bool;

const {:existential true} b2: bool;

const {:existential true} b3: bool;

const {:existential true} b4: bool;

const {:existential true} b5: bool;

const {:existential true} b6: bool;

const {:existential true} b7: bool;

const {:existential true} b8: bool;

axiom b0;

axiom b1;

axiom b2;

axiom b3;

axiom b4;

axiom b5;

axiom !b6;

axiom !b7;

axiom b8;

function {:inline} {:linear "1"} SetCollector1(x: [int]bool): [int]bool {
  x
}

procedure main({:linear_in "1"} x_in: [int]bool)
  requires b0 ==> x_in == MapConst(true);
  requires b1 ==> x_in != MapConst(false);
{
  var {:linear "1"} x: [int]bool;

  x := x_in;
  call foo(x);
  assert b6 ==> x == MapConst(true);
  assert b7 ==> x != MapConst(false);
  assert b8 ==> x == MapConst(false);
}

procedure foo({:linear_in "1"} x_in: [int]bool)
  requires b2 ==> x_in == MapConst(true);
  requires b3 ==> x_in != MapConst(false);
{
  var {:linear "1"} x: [int]bool;

  x := x_in;
  assert b4 ==> x == MapConst(true);
  assert b5 ==> x != MapConst(false);
}

[Input - ../../vendor/boogie/Test/civl/linear/f1.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
type {:linear "1"} X = int;
const {:existential true} b0: bool;
const {:existential true} b1: bool;
const {:existential true} b2: bool;
const {:existential true} b3: bool;
const {:existential true} b4: bool;
const {:existential true} b5: bool;
const {:existential true} b6: bool;
const {:existential true} b7: bool;
const {:existential true} b8: bool;

axiom(b0);
axiom(b1);
axiom(b2);
axiom(b3);
axiom(b4);
axiom(b5);
axiom(!b6);
axiom(!b7);
axiom(b8);

function {:inline} {:linear "1"} SetCollector1(x: [int]bool) : [int]bool
{
  x
}

procedure main({:linear_in "1"} x_in: [int]bool)
  requires b0 ==> x_in == MapConst(true);
  requires b1 ==> x_in != MapConst(false);
{
   var {:linear "1"} x: [int] bool;
   x := x_in;

   call foo(x);

   assert b6 ==> x == MapConst(true);
   assert b7 ==> x != MapConst(false);
   assert b8 ==> x == MapConst(false);
}

procedure foo({:linear_in "1"} x_in: [int]bool)
  requires b2 ==> x_in == MapConst(true);
  requires b3 ==> x_in != MapConst(false);
{
   var {:linear "1"} x: [int] bool;
   x := x_in;

   assert b4 ==> x == MapConst(true);
   assert b5 ==> x != MapConst(false);

}
