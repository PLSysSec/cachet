---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "K",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "f",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: Exists,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "k",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "k",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "K",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Find",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "k",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "j",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "a",
                                                                    ),
                                                                    op: Lt,
                                                                    rhs: Var(
                                                                        "j",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "j",
                                                                    ),
                                                                    op: Lt,
                                                                    rhs: Var(
                                                                        "b",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "f",
                                                                    args: [
                                                                        Var(
                                                                            "j",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: Neq,
                                                            rhs: Var(
                                                                "K",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "k",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "K",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Find",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "k",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "entry",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "A",
                                    "B",
                                    "C",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "A",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "f",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "K",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "k",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "a",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "B",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "f",
                                                args: [
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "K",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "k",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "b",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "C",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "f",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "K",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "f",
                                                        args: [
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "K",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "k",
                                    ],
                                    target: "Find",
                                    params: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Sub,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "b",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Find",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "k",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    StructuredCmd(
                        If(
                            IfCmd {
                                guard: Asterisk,
                                then: [
                                    LabelOrCmd(
                                        Claim(
                                            ClaimCmd {
                                                kind: Assume,
                                                attrs: [],
                                                proposition: Rel(
                                                    RelExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "f",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "K",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Assign(
                                            AssignCmd {
                                                lhs: [
                                                    AssignLhs {
                                                        ident: "k",
                                                        subscripts: [],
                                                    },
                                                ],
                                                rhs: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                                else_: Some(
                                    ElseIf(
                                        IfCmd {
                                            guard: Asterisk,
                                            then: [
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "f",
                                                                            args: [
                                                                                Var(
                                                                                    "b",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "K",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "k",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Var(
                                                                    "b",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                            else_: Some(
                                                Else(
                                                    [
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assume,
                                                                    attrs: [],
                                                                    proposition: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "f",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "a",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "K",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "f",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "b",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "K",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [],
                                                                    call_params: CallParams {
                                                                        returns: [
                                                                            "k",
                                                                        ],
                                                                        target: "Find",
                                                                        params: [
                                                                            Term(
                                                                                Term {
                                                                                    lhs: Var(
                                                                                        "a",
                                                                                    ),
                                                                                    op: Sub,
                                                                                    rhs: Nat(
                                                                                        "1",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            Term(
                                                                                Term {
                                                                                    lhs: Var(
                                                                                        "b",
                                                                                    ),
                                                                                    op: Add,
                                                                                    rhs: Nat(
                                                                                        "1",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                    is_async: false,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                ),
                                            ),
                                        },
                                    ),
                                ),
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Find",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "k",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    StructuredCmd(
                        If(
                            IfCmd {
                                guard: Expr(
                                    Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "K",
                                            ),
                                        },
                                    ),
                                ),
                                then: [
                                    LabelOrCmd(
                                        Assign(
                                            AssignCmd {
                                                lhs: [
                                                    AssignLhs {
                                                        ident: "k",
                                                        subscripts: [],
                                                    },
                                                ],
                                                rhs: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                                else_: Some(
                                    ElseIf(
                                        IfCmd {
                                            guard: Expr(
                                                Rel(
                                                    RelExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "f",
                                                                args: [
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "K",
                                                        ),
                                                    },
                                                ),
                                            ),
                                            then: [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "k",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Var(
                                                                    "b",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                            else_: Some(
                                                Else(
                                                    [
                                                        LabelOrCmd(
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [],
                                                                    call_params: CallParams {
                                                                        returns: [
                                                                            "k",
                                                                        ],
                                                                        target: "Find",
                                                                        params: [
                                                                            Term(
                                                                                Term {
                                                                                    lhs: Var(
                                                                                        "a",
                                                                                    ),
                                                                                    op: Sub,
                                                                                    rhs: Nat(
                                                                                        "1",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            Term(
                                                                                Term {
                                                                                    lhs: Var(
                                                                                        "b",
                                                                                    ),
                                                                                    op: Add,
                                                                                    rhs: Nat(
                                                                                        "1",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                    is_async: false,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                ),
                                            ),
                                        },
                                    ),
                                ),
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Find",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "k",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "x",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "y",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "a",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "y",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "b",
                                    ),
                                ],
                            },
                        ),
                    ),
                    StructuredCmd(
                        While(
                            WhileCmd {
                                guard: Expr(
                                    Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "f",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: Var(
                                                        "K",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "f",
                                                            args: [
                                                                Var(
                                                                    "y",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: Var(
                                                        "K",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                ),
                                invariants: [
                                    Invariant {
                                        attrs: [],
                                        expr: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Quant(
                                                    QuantExpr {
                                                        kind: ForAll,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "j",
                                                                            ],
                                                                            type_: Atom(
                                                                                Int,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: Implies(
                                                                ImpliesExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "x",
                                                                                    ),
                                                                                    op: Lt,
                                                                                    rhs: Var(
                                                                                        "j",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "j",
                                                                                    ),
                                                                                    op: Lt,
                                                                                    rhs: Var(
                                                                                        "y",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "f",
                                                                                    args: [
                                                                                        Var(
                                                                                            "j",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Neq,
                                                                            rhs: Var(
                                                                                "K",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                ),
                                            },
                                        ),
                                        is_free: false,
                                    },
                                ],
                                body: [
                                    LabelOrCmd(
                                        Assign(
                                            AssignCmd {
                                                lhs: [
                                                    AssignLhs {
                                                        ident: "x",
                                                        subscripts: [],
                                                    },
                                                ],
                                                rhs: [
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Sub,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Assign(
                                            AssignCmd {
                                                lhs: [
                                                    AssignLhs {
                                                        ident: "y",
                                                        subscripts: [],
                                                    },
                                                ],
                                                rhs: [
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "y",
                                                            ),
                                                            op: Add,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ),
                    ),
                    StructuredCmd(
                        If(
                            IfCmd {
                                guard: Expr(
                                    Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "K",
                                            ),
                                        },
                                    ),
                                ),
                                then: [
                                    LabelOrCmd(
                                        Assign(
                                            AssignCmd {
                                                lhs: [
                                                    AssignLhs {
                                                        ident: "k",
                                                        subscripts: [],
                                                    },
                                                ],
                                                rhs: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                                else_: Some(
                                    Else(
                                        [
                                            LabelOrCmd(
                                                Assign(
                                                    AssignCmd {
                                                        lhs: [
                                                            AssignLhs {
                                                                ident: "k",
                                                                subscripts: [],
                                                            },
                                                        ],
                                                        rhs: [
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ),
                                        ],
                                    ),
                                ),
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Find",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "k",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "x",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "y",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "a",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "y",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "b",
                                    ),
                                ],
                            },
                        ),
                    ),
                    StructuredCmd(
                        While(
                            WhileCmd {
                                guard: Expr(
                                    BoolLit(
                                        true,
                                    ),
                                ),
                                invariants: [
                                    Invariant {
                                        attrs: [],
                                        expr: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Quant(
                                                    QuantExpr {
                                                        kind: ForAll,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "j",
                                                                            ],
                                                                            type_: Atom(
                                                                                Int,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: Implies(
                                                                ImpliesExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "x",
                                                                                    ),
                                                                                    op: Lt,
                                                                                    rhs: Var(
                                                                                        "j",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "j",
                                                                                    ),
                                                                                    op: Lt,
                                                                                    rhs: Var(
                                                                                        "y",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "f",
                                                                                    args: [
                                                                                        Var(
                                                                                            "j",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Neq,
                                                                            rhs: Var(
                                                                                "K",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                ),
                                            },
                                        ),
                                        is_free: false,
                                    },
                                ],
                                body: [
                                    StructuredCmd(
                                        If(
                                            IfCmd {
                                                guard: Expr(
                                                    Rel(
                                                        RelExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "f",
                                                                    args: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "K",
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                then: [
                                                    LabelOrCmd(
                                                        Assign(
                                                            AssignCmd {
                                                                lhs: [
                                                                    AssignLhs {
                                                                        ident: "k",
                                                                        subscripts: [],
                                                                    },
                                                                ],
                                                                rhs: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                    StructuredCmd(
                                                        Break(
                                                            BreakCmd {
                                                                label: None,
                                                            },
                                                        ),
                                                    ),
                                                ],
                                                else_: Some(
                                                    ElseIf(
                                                        IfCmd {
                                                            guard: Expr(
                                                                Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "f",
                                                                                args: [
                                                                                    Var(
                                                                                        "y",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "K",
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                            then: [
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "k",
                                                                                    subscripts: [],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                Var(
                                                                                    "y",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                                StructuredCmd(
                                                                    Break(
                                                                        BreakCmd {
                                                                            label: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                            else_: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Assign(
                                            AssignCmd {
                                                lhs: [
                                                    AssignLhs {
                                                        ident: "x",
                                                        subscripts: [],
                                                    },
                                                ],
                                                rhs: [
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Sub,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Assign(
                                            AssignCmd {
                                                lhs: [
                                                    AssignLhs {
                                                        ident: "y",
                                                        subscripts: [],
                                                    },
                                                ],
                                                rhs: [
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "y",
                                                            ),
                                                            op: Add,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Find",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "k",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "x",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "y",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "a",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "y",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "b",
                                    ),
                                ],
                            },
                        ),
                    ),
                    StructuredCmd(
                        While(
                            WhileCmd {
                                guard: Expr(
                                    BoolLit(
                                        true,
                                    ),
                                ),
                                invariants: [
                                    Invariant {
                                        attrs: [],
                                        expr: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Quant(
                                                    QuantExpr {
                                                        kind: ForAll,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "j",
                                                                            ],
                                                                            type_: Atom(
                                                                                Int,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: Implies(
                                                                ImpliesExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "x",
                                                                                    ),
                                                                                    op: Lt,
                                                                                    rhs: Var(
                                                                                        "j",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "j",
                                                                                    ),
                                                                                    op: Lt,
                                                                                    rhs: Var(
                                                                                        "y",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "f",
                                                                                    args: [
                                                                                        Var(
                                                                                            "j",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Neq,
                                                                            rhs: Var(
                                                                                "K",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                ),
                                            },
                                        ),
                                        is_free: false,
                                    },
                                ],
                                body: [
                                    StructuredCmd(
                                        If(
                                            IfCmd {
                                                guard: Expr(
                                                    Rel(
                                                        RelExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "f",
                                                                    args: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "K",
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                then: [
                                                    TransferCmd(
                                                        Goto(
                                                            GotoCmd {
                                                                labels: [
                                                                    "FoundX",
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                                else_: Some(
                                                    ElseIf(
                                                        IfCmd {
                                                            guard: Expr(
                                                                Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "f",
                                                                                args: [
                                                                                    Var(
                                                                                        "y",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "K",
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                            then: [
                                                                TransferCmd(
                                                                    Goto(
                                                                        GotoCmd {
                                                                            labels: [
                                                                                "FoundY",
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                            else_: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Assign(
                                            AssignCmd {
                                                lhs: [
                                                    AssignLhs {
                                                        ident: "x",
                                                        subscripts: [],
                                                    },
                                                ],
                                                rhs: [
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Sub,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Assign(
                                            AssignCmd {
                                                lhs: [
                                                    AssignLhs {
                                                        ident: "y",
                                                        subscripts: [],
                                                    },
                                                ],
                                                rhs: [
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "y",
                                                            ),
                                                            op: Add,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "FoundX",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "k",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "FoundY",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "k",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "y",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Find",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "k",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "x",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "y",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "a",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "y",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "b",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "outer",
                            },
                        ),
                    ),
                    StructuredCmd(
                        If(
                            IfCmd {
                                guard: Expr(
                                    BoolLit(
                                        true,
                                    ),
                                ),
                                then: [
                                    LabelOrCmd(
                                        Label(
                                            Label {
                                                ident: "inner",
                                            },
                                        ),
                                    ),
                                    StructuredCmd(
                                        While(
                                            WhileCmd {
                                                guard: Expr(
                                                    BoolLit(
                                                        true,
                                                    ),
                                                ),
                                                invariants: [
                                                    Invariant {
                                                        attrs: [],
                                                        expr: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "x",
                                                                        ),
                                                                        op: Le,
                                                                        rhs: Var(
                                                                            "y",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Quant(
                                                                    QuantExpr {
                                                                        kind: ForAll,
                                                                        body: QuantBody {
                                                                            type_params: [],
                                                                            bound_vars: [
                                                                                AttrTypedIdentsWhere {
                                                                                    attrs: [],
                                                                                    typed_idents_where: TypedIdentsWhere {
                                                                                        typed_idents: TypedIdents {
                                                                                            idents: [
                                                                                                "j",
                                                                                            ],
                                                                                            type_: Atom(
                                                                                                Int,
                                                                                            ),
                                                                                        },
                                                                                        where_: None,
                                                                                    },
                                                                                },
                                                                            ],
                                                                            attrs: [],
                                                                            expr: Implies(
                                                                                ImpliesExpr {
                                                                                    lhs: Logical(
                                                                                        LogicalExpr {
                                                                                            lhs: Rel(
                                                                                                RelExpr {
                                                                                                    lhs: Var(
                                                                                                        "x",
                                                                                                    ),
                                                                                                    op: Lt,
                                                                                                    rhs: Var(
                                                                                                        "j",
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                            op: And,
                                                                                            rhs: Rel(
                                                                                                RelExpr {
                                                                                                    lhs: Var(
                                                                                                        "j",
                                                                                                    ),
                                                                                                    op: Lt,
                                                                                                    rhs: Var(
                                                                                                        "y",
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    rhs: Rel(
                                                                                        RelExpr {
                                                                                            lhs: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "f",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "j",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            op: Neq,
                                                                                            rhs: Var(
                                                                                                "K",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        is_free: false,
                                                    },
                                                ],
                                                body: [
                                                    StructuredCmd(
                                                        If(
                                                            IfCmd {
                                                                guard: Expr(
                                                                    Rel(
                                                                        RelExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "f",
                                                                                    args: [
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Var(
                                                                                "K",
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                                then: [
                                                                    StructuredCmd(
                                                                        Break(
                                                                            BreakCmd {
                                                                                label: Some(
                                                                                    "inner",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                                else_: Some(
                                                                    ElseIf(
                                                                        IfCmd {
                                                                            guard: Expr(
                                                                                Rel(
                                                                                    RelExpr {
                                                                                        lhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "f",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "y",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: Var(
                                                                                            "K",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                            then: [
                                                                                StructuredCmd(
                                                                                    Break(
                                                                                        BreakCmd {
                                                                                            label: Some(
                                                                                                "outer",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                            else_: None,
                                                                        },
                                                                    ),
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    LabelOrCmd(
                                                        Assign(
                                                            AssignCmd {
                                                                lhs: [
                                                                    AssignLhs {
                                                                        ident: "x",
                                                                        subscripts: [],
                                                                    },
                                                                ],
                                                                rhs: [
                                                                    Term(
                                                                        Term {
                                                                            lhs: Var(
                                                                                "x",
                                                                            ),
                                                                            op: Sub,
                                                                            rhs: Nat(
                                                                                "1",
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                    LabelOrCmd(
                                                        Assign(
                                                            AssignCmd {
                                                                lhs: [
                                                                    AssignLhs {
                                                                        ident: "y",
                                                                        subscripts: [],
                                                                    },
                                                                ],
                                                                rhs: [
                                                                    Term(
                                                                        Term {
                                                                            lhs: Var(
                                                                                "y",
                                                                            ),
                                                                            op: Add,
                                                                            rhs: Nat(
                                                                                "1",
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Assign(
                                            AssignCmd {
                                                lhs: [
                                                    AssignLhs {
                                                        ident: "k",
                                                        subscripts: [],
                                                    },
                                                ],
                                                rhs: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    TransferCmd(
                                        Return(
                                            ReturnCmd,
                                        ),
                                    ),
                                ],
                                else_: None,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "k",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "y",
                                    ),
                                ],
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Teal",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "ShadeOfGreen",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Teal",
                                        args: [
                                            Var(
                                                "w",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "ShadeOfGreen",
                                        args: [
                                            Var(
                                                "w",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "Teal",
                                args: [
                                    Var(
                                        "x",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "ShadeOfGreen",
                                args: [
                                    Var(
                                        "y",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "y",
                                                ),
                                                op: Lt,
                                                rhs: Nat(
                                                    "100",
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Teal",
                                                    args: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_free: true,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "y",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "y",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "5",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "RunOffEnd0",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "3",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Label0",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Label1",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Label2",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Label3",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Label4",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "RunOffEnd1",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "4",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Label0",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Label1",
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Label(
                                                Label {
                                                    ident: "Label2",
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "x",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "x",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "2",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        ElseIf(
                                            IfCmd {
                                                guard: Asterisk,
                                                then: [
                                                    LabelOrCmd(
                                                        Label(
                                                            Label {
                                                                ident: "Label3",
                                                            },
                                                        ),
                                                    ),
                                                    LabelOrCmd(
                                                        Assign(
                                                            AssignCmd {
                                                                lhs: [
                                                                    AssignLhs {
                                                                        ident: "x",
                                                                        subscripts: [],
                                                                    },
                                                                ],
                                                                rhs: [
                                                                    Nat(
                                                                        "2",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                    LabelOrCmd(
                                                        Assign(
                                                            AssignCmd {
                                                                lhs: [
                                                                    AssignLhs {
                                                                        ident: "x",
                                                                        subscripts: [],
                                                                    },
                                                                ],
                                                                rhs: [
                                                                    Term(
                                                                        Term {
                                                                            lhs: Var(
                                                                                "x",
                                                                            ),
                                                                            op: Add,
                                                                            rhs: Nat(
                                                                                "2",
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                    LabelOrCmd(
                                                        Label(
                                                            Label {
                                                                ident: "Label4",
                                                            },
                                                        ),
                                                    ),
                                                    LabelOrCmd(
                                                        Label(
                                                            Label {
                                                                ident: "Label5",
                                                            },
                                                        ),
                                                    ),
                                                    LabelOrCmd(
                                                        Assign(
                                                            AssignCmd {
                                                                lhs: [
                                                                    AssignLhs {
                                                                        ident: "x",
                                                                        subscripts: [],
                                                                    },
                                                                ],
                                                                rhs: [
                                                                    Term(
                                                                        Term {
                                                                            lhs: Var(
                                                                                "x",
                                                                            ),
                                                                            op: Sub,
                                                                            rhs: Nat(
                                                                                "1",
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                                else_: Some(
                                                    Else(
                                                        [
                                                            StructuredCmd(
                                                                If(
                                                                    IfCmd {
                                                                        guard: Asterisk,
                                                                        then: [
                                                                            LabelOrCmd(
                                                                                Assign(
                                                                                    AssignCmd {
                                                                                        lhs: [
                                                                                            AssignLhs {
                                                                                                ident: "x",
                                                                                                subscripts: [],
                                                                                            },
                                                                                        ],
                                                                                        rhs: [
                                                                                            Nat(
                                                                                                "0",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                            StructuredCmd(
                                                                                While(
                                                                                    WhileCmd {
                                                                                        guard: Expr(
                                                                                            Rel(
                                                                                                RelExpr {
                                                                                                    lhs: Var(
                                                                                                        "x",
                                                                                                    ),
                                                                                                    op: Lt,
                                                                                                    rhs: Nat(
                                                                                                        "3",
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        ),
                                                                                        invariants: [
                                                                                            Invariant {
                                                                                                attrs: [],
                                                                                                expr: Rel(
                                                                                                    RelExpr {
                                                                                                        lhs: Var(
                                                                                                            "x",
                                                                                                        ),
                                                                                                        op: Le,
                                                                                                        rhs: Nat(
                                                                                                            "3",
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                is_free: false,
                                                                                            },
                                                                                        ],
                                                                                        body: [
                                                                                            LabelOrCmd(
                                                                                                Assign(
                                                                                                    AssignCmd {
                                                                                                        lhs: [
                                                                                                            AssignLhs {
                                                                                                                ident: "x",
                                                                                                                subscripts: [],
                                                                                                            },
                                                                                                        ],
                                                                                                        rhs: [
                                                                                                            Term(
                                                                                                                Term {
                                                                                                                    lhs: Var(
                                                                                                                        "x",
                                                                                                                    ),
                                                                                                                    op: Add,
                                                                                                                    rhs: Nat(
                                                                                                                        "1",
                                                                                                                    ),
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ],
                                                                        else_: Some(
                                                                            Else(
                                                                                [
                                                                                    LabelOrCmd(
                                                                                        Assign(
                                                                                            AssignCmd {
                                                                                                lhs: [
                                                                                                    AssignLhs {
                                                                                                        ident: "x",
                                                                                                        subscripts: [],
                                                                                                    },
                                                                                                ],
                                                                                                rhs: [
                                                                                                    Term(
                                                                                                        Term {
                                                                                                            lhs: Var(
                                                                                                                "x",
                                                                                                            ),
                                                                                                            op: Add,
                                                                                                            rhs: Nat(
                                                                                                                "2",
                                                                                                            ),
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                ],
                                                                            ),
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "RunOffEnd2",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "10",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                    invariants: [],
                                    body: [
                                        StructuredCmd(
                                            While(
                                                WhileCmd {
                                                    guard: Expr(
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ),
                                                    invariants: [],
                                                    body: [
                                                        StructuredCmd(
                                                            If(
                                                                IfCmd {
                                                                    guard: Asterisk,
                                                                    then: [
                                                                        LabelOrCmd(
                                                                            Assign(
                                                                                AssignCmd {
                                                                                    lhs: [
                                                                                        AssignLhs {
                                                                                            ident: "x",
                                                                                            subscripts: [],
                                                                                        },
                                                                                    ],
                                                                                    rhs: [
                                                                                        Nat(
                                                                                            "10",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        StructuredCmd(
                                                                            Break(
                                                                                BreakCmd {
                                                                                    label: None,
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ],
                                                                    else_: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Asterisk,
                                                    then: [
                                                        StructuredCmd(
                                                            Break(
                                                                BreakCmd {
                                                                    label: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "RunOffEnd3",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "9",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "9",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                    invariants: [],
                                    body: [
                                        StructuredCmd(
                                            While(
                                                WhileCmd {
                                                    guard: Expr(
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ),
                                                    invariants: [],
                                                    body: [
                                                        StructuredCmd(
                                                            If(
                                                                IfCmd {
                                                                    guard: Asterisk,
                                                                    then: [
                                                                        LabelOrCmd(
                                                                            Assign(
                                                                                AssignCmd {
                                                                                    lhs: [
                                                                                        AssignLhs {
                                                                                            ident: "x",
                                                                                            subscripts: [],
                                                                                        },
                                                                                    ],
                                                                                    rhs: [
                                                                                        Nat(
                                                                                            "10",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        StructuredCmd(
                                                                            Break(
                                                                                BreakCmd {
                                                                                    label: None,
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ],
                                                                    else_: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Asterisk,
                                                    then: [
                                                        StructuredCmd(
                                                            Break(
                                                                BreakCmd {
                                                                    label: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "RunOffEnd4",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "bad",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                    invariants: [],
                                    body: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "y",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "bad",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            false,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Asterisk,
                                                    then: [
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "x",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Term(
                                                                            Term {
                                                                                lhs: Var(
                                                                                    "x",
                                                                                ),
                                                                                op: Add,
                                                                                rhs: Nat(
                                                                                    "1",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "bad",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        BoolLit(
                                                                            true,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "x",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "y",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    then: [
                                                        StructuredCmd(
                                                            Break(
                                                                BreakCmd {
                                                                    label: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Var(
                                                "bad",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "RunOffEnd5",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                    invariants: [],
                                    body: [
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "x",
                                                                ),
                                                                op: Eq,
                                                                rhs: Nat(
                                                                    "5",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    then: [],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: BoolLit(
                                        false,
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "RunOffEnd6",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "7",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Eq,
                                                    rhs: Nat(
                                                        "7",
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "x",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Nat(
                                                            "5",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Label(
                                                Label {
                                                    ident: "MyLabel",
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "x",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Nat(
                                                            "7",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Q0",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "x",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Nat(
                                                            "1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Q1",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Label(
                                                Label {
                                                    ident: "A",
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "x",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "x",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Eq,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Label(
                                                Label {
                                                    ident: "B",
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "x",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "x",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        TransferCmd(
                                            Goto(
                                                GotoCmd {
                                                    labels: [
                                                        "A",
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Q2",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        StructuredCmd(
                                            While(
                                                WhileCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "x",
                                                                ),
                                                                op: Lt,
                                                                rhs: Nat(
                                                                    "10",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    invariants: [
                                                        Invariant {
                                                            attrs: [],
                                                            expr: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "x",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Nat(
                                                                        "10",
                                                                    ),
                                                                },
                                                            ),
                                                            is_free: false,
                                                        },
                                                    ],
                                                    body: [
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "x",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Term(
                                                                            Term {
                                                                                lhs: Var(
                                                                                    "x",
                                                                                ),
                                                                                op: Add,
                                                                                rhs: Nat(
                                                                                    "1",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "BreakIssue",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "curr",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "18",
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "curr",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "100",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Neq,
                                                rhs: Nat(
                                                    "18",
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [],
                                    body: [
                                        StructuredCmd(
                                            While(
                                                WhileCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "x",
                                                                ),
                                                                op: Neq,
                                                                rhs: Nat(
                                                                    "19",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    invariants: [],
                                                    body: [
                                                        LabelOrCmd(
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [],
                                                                    call_params: CallParams {
                                                                        returns: [
                                                                            "curr",
                                                                        ],
                                                                        target: "Read",
                                                                        params: [],
                                                                    },
                                                                    is_async: false,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ),
                                                        StructuredCmd(
                                                            If(
                                                                IfCmd {
                                                                    guard: Expr(
                                                                        Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "curr",
                                                                                ),
                                                                                op: Eq,
                                                                                rhs: Nat(
                                                                                    "0",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ),
                                                                    then: [
                                                                        StructuredCmd(
                                                                            Break(
                                                                                BreakCmd {
                                                                                    label: None,
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ],
                                                                    else_: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Read",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "BreakToOuterLoopHead",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "42",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Gt,
                                                    rhs: Nat(
                                                        "0",
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "x",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Nat(
                                                            "0",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            While(
                                                WhileCmd {
                                                    guard: Expr(
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ),
                                                    invariants: [],
                                                    body: [
                                                        StructuredCmd(
                                                            Break(
                                                                BreakCmd {
                                                                    label: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
const K: int;

function f(int): int;

axiom (exists k: int :: f(k) == K);

procedure Find(a: int, b: int) returns (k: int);
  requires a <= b && (forall j: int :: a < j && j < b ==> f(j) != K);
  ensures f(k) == K;

implementation Find(a: int, b: int) returns (k: int) {
  entry:
  goto A, B, C;
  A:
  assume f(a) == K;
  k := a;
  return;
  B:
  assume f(b) == K;
  k := b;
  return;
  C:
  assume f(a) != K && f(b) != K;
  call k := Find(a - 1, b + 1);
  return;
}

implementation Find(a: int, b: int) returns (k: int) {
  if (*) {
    assume f(a) == K;
    k := a;
  } else if (*) {
    assume f(b) == K;
    k := b;
  } else {
    assume f(a) != K && f(b) != K;
    call k := Find(a - 1, b + 1);
  }
}

implementation Find(a: int, b: int) returns (k: int) {
  if (f(a) == K) {
    k := a;
  } else if (f(b) == K) {
    k := b;
  } else {
    call k := Find(a - 1, b + 1);
  }
}

implementation Find(a: int, b: int) returns (k: int) {
  var x: int, y: int;

  x := a;
  y := b;
  while (f(x) != K && f(y) != K)
    invariant x <= y && (forall j: int :: x < j && j < y ==> f(j) != K);
  {
    x := x - 1;
    y := y + 1;
  }
  if (f(x) == K) {
    k := x;
  } else {
    k := y;
  }
}

implementation Find(a: int, b: int) returns (k: int) {
  var x: int, y: int;

  x := a;
  y := b;
  while (true)
    invariant x <= y && (forall j: int :: x < j && j < y ==> f(j) != K);
  {
    if (f(x) == K) {
      k := x;
      break;
    } else if (f(y) == K) {
      k := y;
      break;
    }
    x := x - 1;
    y := y + 1;
  }
}

implementation Find(a: int, b: int) returns (k: int) {
  var x: int, y: int;

  x := a;
  y := b;
  while (true)
    invariant x <= y && (forall j: int :: x < j && j < y ==> f(j) != K);
  {
    if (f(x) == K) {
      goto FoundX;
    } else if (f(y) == K) {
      goto FoundY;
    }
    x := x - 1;
    y := y + 1;
  }
  FoundX:
  k := x;
  return;
  FoundY:
  k := y;
  return;
}

implementation Find(a: int, b: int) returns (k: int) {
  var x: int, y: int;

  x := a;
  y := b;
  outer:
  if (true) {
    inner:
    while (true)
      invariant x <= y && (forall j: int :: x < j && j < y ==> f(j) != K);
    {
      if (f(x) == K) {
        break inner;
      } else if (f(y) == K) {
        break outer;
      }
      x := x - 1;
      y := y + 1;
    }
    k := x;
    return;
  }
  k := y;
}

function Teal(int): bool;

function ShadeOfGreen(int): bool;

axiom (forall w: int :: Teal(w) ==> ShadeOfGreen(w));

procedure P(x: int) returns (y: int)
  requires Teal(x);
  ensures ShadeOfGreen(y);
{
  y := x;
  while (y < 100)
    free invariant Teal(y);
  {
    y := y + 5;
  }
}

procedure RunOffEnd0() returns (x: int)
  ensures x == 3;
{
  x := 0;
  Label0:
  x := x + 1;
  Label1:
  x := x + 1;
  Label2:
  Label3:
  Label4:
  x := x + 1;
}

procedure RunOffEnd1() returns (x: int)
  ensures x == 4;
{
  x := 0;
  Label0:
  x := x + 1;
  Label1:
  if (*) {
    Label2:
    x := x + 2;
  } else if (*) {
    Label3:
    x := 2;
    x := x + 2;
    Label4:
    Label5:
    x := x - 1;
  } else {
    if (*) {
      x := 0;
      while (x < 3)
        invariant x <= 3;
      {
        x := x + 1;
      }
    } else {
      x := x + 2;
    }
  }
  x := x + 1;
}

procedure RunOffEnd2() returns (x: int)
  ensures x == 10;
{
  while (true) {
    while (true) {
      if (*) {
        x := 10;
        break;
      }
    }
    if (*) {
      break;
    }
  }
}

procedure RunOffEnd3() returns (x: int)
  ensures x == 9;
{
  x := 9;
  while (true) {
    while (true) {
      if (*) {
        x := 10;
        break;
      }
    }
    if (*) {
      break;
    }
  }
}

procedure RunOffEnd4() returns (x: int) {
  var y: int;
  var bad: bool;

  while (true) {
    y := x;
    bad := false;
    if (*) {
      x := x + 1;
      bad := true;
    }
    if (x == y) {
      break;
    }
  }
  assert !bad;
}

procedure RunOffEnd5() returns (x: int) {
  while (true) {
    if (x == 5) {
    }
  }
  assert false;
}

procedure RunOffEnd6() returns (x: int) {
  x := 7;
  while (true)
    invariant x == 7;
  {
    x := 5;
    MyLabel:
    x := 7;
  }
}

procedure Q0() {
  var x: int;

  x := 0;
  if (*) {
    x := 1;
  }
  assert x == 1;
}

procedure Q1() returns (x: int) {
  if (x == 0) {
    A:
    x := x + 0;
    assert x == 0;
    B:
    x := x + 1;
    goto A;
  }
}

procedure Q2() returns (x: int) {
  if (x == 0) {
    while (x < 10)
      invariant x <= 10;
    {
      x := x + 1;
    }
  }
}

procedure BreakIssue(x: int) returns (curr: int)
  ensures x == 18 || curr == 100;
{
  while (x != 18) {
    while (x != 19) {
      call curr := Read();
      if (curr == 0) {
        break;
      }
    }
  }
}

procedure Read() returns (val: int);

procedure BreakToOuterLoopHead() returns (x: int) {
  x := 42;
  while (true)
    invariant x > 0;
  {
    x := 0;
    while (true) {
      break;
    }
  }
}

[Input - ../../vendor/boogie/Test/test2/Structured.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

const K: int;

function f(int) returns (int);

axiom (exists k: int :: f(k) == K);

procedure Find(a: int, b: int) returns (k: int);
  requires a <= b && (forall j: int :: a < j && j < b ==> f(j) != K);
  ensures f(k) == K;

// nondeterministic, unstructured, recursive version
implementation Find(a: int, b: int) returns (k: int)
{
  entry:
    goto A, B, C;

  A:
    assume f(a) == K;
    k := a;
    return;

  B:
    assume f(b) == K;
    k := b;
    return;

  C:
    assume f(a) != K && f(b) != K;
    call k := Find(a-1, b+1);
    return;
}

// nondeterministic, recursive version
implementation Find(a: int, b: int) returns (k: int)
{
  if (*) {
    assume f(a) == K;
    k := a;
  } else if (*) {
    assume f(b) == K;
    k := b;
  } else {
    assume f(a) != K && f(b) != K;
    call k := Find(a-1, b+1);
  }
}

// deterministic, structured, recursive version
implementation Find(a: int, b: int) returns (k: int)
{
  if (f(a) == K) {
    k := a;
  } else if (f(b) == K) {
    k := b;
  } else {
    call k := Find(a-1, b+1);
  }
}

// deterministic, structured, iterative version
implementation Find(a: int, b: int) returns (k: int)
{
  var x: int, y: int;

  x := a;
  y := b;

  while (f(x) != K && f(y) != K)
    invariant x <= y && (forall j: int :: x < j && j < y ==> f(j) != K);
  {
    x := x-1;
    y := y+1;
  }

  if (f(x) == K) {
    k := x;
  } else {
    k := y;
  }
}

// deterministic, structured, iterative version with breaks
implementation Find(a: int, b: int) returns (k: int)
{
  var x: int, y: int;

  x := a;
  y := b;

  while (true)
    invariant x <= y && (forall j: int :: x < j && j < y ==> f(j) != K);
  {
    if (f(x) == K) {
      k := x;
      break;
    } else if (f(y) == K) {
      k := y;
      break;
    }
    x := x-1;
    y := y+1;
  }
}

// deterministic, somewhat structured, iterative version
implementation Find(a: int, b: int) returns (k: int)
{
  var x: int, y: int;

  x := a;
  y := b;

  while (true)
    invariant x <= y && (forall j: int :: x < j && j < y ==> f(j) != K);
  {
    if (f(x) == K) {
      goto FoundX;
    } else if (f(y) == K) {
      goto FoundY;
    }
    x := x-1;
    y := y+1;
  }

  FoundX:
  k := x;
  return;

  FoundY:
  k := y;
  return;
}

// deterministic, structured, iterative version with breaks
implementation Find(a: int, b: int) returns (k: int)
{
  var x: int, y: int;

  x := a;
  y := b;

  outer:
  if (true) {
    inner:
    while (true)
      invariant x <= y && (forall j: int :: x < j && j < y ==> f(j) != K);
    {
      if (f(x) == K) {
        break inner;
      } else if (f(y) == K) {
        break outer;
      }
      x := x-1;
      y := y+1;
    }

    k := x;
    return;
  }
  k := y;
}

// ----- free invariant -----

function Teal(int) returns (bool);
function ShadeOfGreen(int) returns (bool);
axiom (forall w: int :: Teal(w) ==> ShadeOfGreen(w));

procedure P(x: int) returns (y: int)
  requires Teal(x);
  ensures ShadeOfGreen(y);
{
  y := x;
  while (y < 100)
    free invariant Teal(y);
  {
    y := y + 5;
  }
}

// ----- run off the end of the BigBlock -----

procedure RunOffEnd0() returns (x: int)
  ensures x == 3;
{
  x := 0;
  Label0:
  x := x + 1;
  Label1:
  x := x + 1;
  Label2:
  Label3:
  Label4:
  x := x + 1;
}

procedure RunOffEnd1() returns (x: int)
  ensures x == 4;
{
  x := 0;
  Label0:
  x := x + 1;
  Label1:
  if (*) {
    Label2:
    x := x + 2;
  } else if (*) {
    Label3:
    x := 2;
    x := x + 2;
    Label4:
    Label5:
    x := x - 1;
  } else {
    if (*) {
      x := 0;
      while (x < 3)
        invariant x <= 3;
      { x := x + 1; }
    } else {
      x := x + 2;
    }
  }
  x := x + 1;
}

procedure RunOffEnd2() returns (x: int)
  ensures x == 10;
{
  while (true) {
    while (true) {
      if (*) {
        x := 10;
        break;
      }
    }
    if (*) { break; }
  }
}

procedure RunOffEnd3() returns (x: int)
  ensures x == 9;
{ x := 9;
  while (true) {
    while (true) {
      if (*) {
        x := 10;
        break;
      }
    }
    if (*) { break; }
  }  // error: violated postcondition
}

procedure RunOffEnd4() returns (x: int)
{
  var y: int;
  var bad: bool;

  while (true) {
    y := x;
    bad := false;
    if (*) {
      x := x + 1;
      bad := true;
    }
    if (x == y) { break; }
  }
  assert !bad;
}

procedure RunOffEnd5() returns (x: int)
{
  while (true) {
    if (x == 5) { }
  }
  assert false;
}

procedure RunOffEnd6() returns (x: int)
{
  x := 7;
  while (true)
    invariant x == 7;
  {
    x := 5;
    MyLabel:
    x := 7;
  }
}

// ----- jump optimizations -----

procedure Q0()
{
  var x: int;

  x := 0;
  if (*) {
    x := 1;
  }
  assert x == 1;  // error
}

procedure Q1() returns (x: int)
{
  if (x == 0) {
    A:
      x := x + 0;
      assert x == 0;  // error
    B:
      x := x + 1;
      goto A;
  }
}

procedure Q2() returns (x: int)
{
  if (x == 0) {
    while (x < 10)
      invariant x <= 10;
    {
      x := x + 1;
    }
  }
}

// There was once a bug in Boogie's handling of the following break statement.
procedure BreakIssue(x: int) returns (curr: int)
  ensures x == 18 || curr == 100;  // holds, because the procedure doesn't
                                   // actually ever terminate if x != 18
{
  while (x != 18) {
    while (x != 19) {
      call curr := Read();
      if (curr == 0) {
        break;
      }
    }
  }
}

procedure Read() returns (val: int);

// There was a bug in Boogie's handling of a break inside a nested while loop.
// In the presence of the bug, the loop invariant of the outer loop was verfied
// since the break was translated as jump to the control location before the
// first assignment to x.
procedure BreakToOuterLoopHead() returns (x: int)
{
  x := 42;
  while (true)
  invariant x > 0;
  {
    x := 0;
    while (true)
    {
      break;
    }
  }
}
