---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Field",
                    type_params: [
                        "a",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "FieldAccessFun",
            type_params: [
                "b",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "heap",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [
                                "a",
                            ],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                                App(
                                    TypeApp {
                                        head: "Field",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "a",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "a",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "obj",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Field",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "b",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "res",
                ),
                type_: App(
                    TypeApp {
                        head: "b",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "FieldAccess",
                type_params: [
                    "b",
                ],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "heap",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [
                                            "a",
                                        ],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "ref",
                                                    tail: None,
                                                },
                                            ),
                                            App(
                                                TypeApp {
                                                    head: "Field",
                                                    tail: Some(
                                                        App(
                                                            TypeApp {
                                                                head: "a",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ],
                                        value: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "obj",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "f",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Field",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "b",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "res",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "b",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "res",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "heap",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "f",
                                                            ),
                                                            Var(
                                                                "obj",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "res",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "heap",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "obj",
                                                            ),
                                                            Var(
                                                                "f",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "res",
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "FieldAccessFun",
                                                    args: [
                                                        Var(
                                                            "heap",
                                                        ),
                                                        Var(
                                                            "obj",
                                                        ),
                                                        Var(
                                                            "f",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "UseHeap",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "heap",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [
                                            "a",
                                        ],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "ref",
                                                    tail: None,
                                                },
                                            ),
                                            App(
                                                TypeApp {
                                                    head: "Field",
                                                    tail: Some(
                                                        App(
                                                            TypeApp {
                                                                head: "a",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ],
                                        value: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Field",
                                                tail: Some(
                                                    AtomApp(
                                                        TypeApp {
                                                            head: Int,
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f2",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Field",
                                                tail: Some(
                                                    AtomApp(
                                                        TypeApp {
                                                            head: Bool,
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "obj",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "x",
                                        ],
                                        target: "FieldAccess",
                                        params: [
                                            Var(
                                                "heap",
                                            ),
                                            Var(
                                                "f1",
                                            ),
                                            Var(
                                                "obj",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "x",
                                        ],
                                        target: "FieldAccess",
                                        params: [
                                            Var(
                                                "heap",
                                            ),
                                            Var(
                                                "obj",
                                            ),
                                            Var(
                                                "f1",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "y",
                                        ],
                                        target: "FieldAccess",
                                        params: [
                                            Var(
                                                "heap",
                                            ),
                                            Var(
                                                "obj",
                                            ),
                                            Var(
                                                "f2",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "y",
                                        ],
                                        target: "FieldAccess",
                                        params: [
                                            Var(
                                                "heap",
                                            ),
                                            Var(
                                                "obj",
                                            ),
                                            Var(
                                                "f1",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "x",
                                        ],
                                        target: "FieldAccess",
                                        params: [
                                            Var(
                                                "heap",
                                            ),
                                            Var(
                                                "obj",
                                            ),
                                            Var(
                                                "obj",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "injective",
                type_params: [
                    "b",
                ],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "heap",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [
                                            "a",
                                        ],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "ref",
                                                    tail: None,
                                                },
                                            ),
                                            App(
                                                TypeApp {
                                                    head: "Field",
                                                    tail: Some(
                                                        App(
                                                            TypeApp {
                                                                head: "a",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ],
                                        value: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "obj0",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "obj1",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "f",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Field",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "b",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "obj0",
                                ),
                                op: Neq,
                                rhs: Var(
                                    "obj1",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "heap",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "obj0",
                                                    ),
                                                    Var(
                                                        "f",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                op: Neq,
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "heap",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "obj1",
                                                    ),
                                                    Var(
                                                        "f",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "ref",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
]

[Printed]
type Field a;

function FieldAccessFun<b>(heap: <a>[ref, Field a]a, obj: ref, f: Field b) returns (res: b);

procedure FieldAccess<b>(heap: <a>[ref, Field a]a, obj: ref, f: Field b) returns (res: b) {
  start:
  res := heap[f, obj];
  res := heap[obj, f];
  assert res == FieldAccessFun(heap, obj, f);
  return;
}

procedure UseHeap(heap: <a>[ref, Field a]a) {
  var f1: Field int;
  var f2: Field bool;
  var obj: ref;
  var x: int;
  var y: bool;

  call x := FieldAccess(heap, f1, obj);
  call x := FieldAccess(heap, obj, f1);
  call y := FieldAccess(heap, obj, f2);
  call y := FieldAccess(heap, obj, f1);
  call x := FieldAccess(heap, obj, obj);
}

procedure injective<b>(heap: <a>[ref, Field a]a, obj0: ref, obj1: ref, f: Field b);
  requires obj0 != obj1;
  ensures heap[obj0, f] != heap[obj1, f];

type ref;

[Input - ../../vendor/boogie/Test/test20/PolyProcs0.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"


type Field a;

function FieldAccessFun<b>(heap : <a>[ref, Field a]a, obj : ref, f : Field b)
         returns (res:b);

procedure FieldAccess<b>(heap : <a>[ref, Field a]a, obj : ref, f : Field b)
          returns (res:b) {
  start:
    res := heap[f, obj];    // error: wrong argument order
    res := heap[obj, f];
    assert res == FieldAccessFun(heap, obj, f);
    return;
}

procedure UseHeap(heap : <a>[ref, Field a]a) {
  var f1 : Field int; var f2 : Field bool; var obj : ref;
  var x : int; var y : bool;

  call x := FieldAccess(heap, f1, obj);  // error: wrong argument order
  call x := FieldAccess(heap, obj, f1);
  call y := FieldAccess(heap, obj, f2);

  call y := FieldAccess(heap, obj, f1);  // error: wrong result type
  call x := FieldAccess(heap, obj, obj); // error: wrong argument type
}

procedure injective<b>(heap : <a>[ref, Field a]a, obj0 : ref, obj1 : ref, f : Field b);
   requires obj0 != obj1;
   ensures heap[obj0, f] != heap[obj1, f];

type ref;
