---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "T",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "f",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Map(
                                MapType {
                                    type_params: [],
                                    keys: [
                                        Atom(
                                            Int,
                                        ),
                                    ],
                                    value: Atom(
                                        Int,
                                    ),
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Map(
                                                    MapType {
                                                        type_params: [],
                                                        keys: [
                                                            Atom(
                                                                Int,
                                                            ),
                                                        ],
                                                        value: Atom(
                                                            Int,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "f",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "t",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "T",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "x",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "t",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Nat(
                                                                            "13",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Nat(
                                                        "42",
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "f",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "5",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Map(
                                                    MapType {
                                                        type_params: [],
                                                        keys: [
                                                            Atom(
                                                                Int,
                                                            ),
                                                        ],
                                                        value: Atom(
                                                            Int,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "t",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "t",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "x",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                    ArraySubscript {
                                                        keys: [
                                                            Nat(
                                                                "13",
                                                            ),
                                                        ],
                                                        value: Some(
                                                            Nat(
                                                                "42",
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "5",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "name",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Field",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Unified",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "name",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Map(
                                MapType {
                                    type_params: [],
                                    keys: [
                                        Atom(
                                            Int,
                                        ),
                                    ],
                                    value: Atom(
                                        Int,
                                    ),
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Map(
                                                    MapType {
                                                        type_params: [],
                                                        keys: [
                                                            Atom(
                                                                Int,
                                                            ),
                                                        ],
                                                        value: Atom(
                                                            Int,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Unified",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "M",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "Field",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "M",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "Field",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "x",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                    ],
                                                                                    value: Some(
                                                                                        Var(
                                                                                            "y",
                                                                                        ),
                                                                                    ),
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Unified",
                                        args: [
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "M",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "Field",
                                                                        args: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: Some(
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "M",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "Field",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                ],
                                                                                value: Some(
                                                                                    Var(
                                                                                        "y",
                                                                                    ),
                                                                                ),
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Unified",
                                                args: [
                                                    Var(
                                                        "M",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: Some(
                                                    Var(
                                                        "y",
                                                    ),
                                                ),
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
]

[Printed]
type T;

function f(x: [T][int]int): int;

axiom (forall x: [T][int]int :: {f(x)} (exists t: T :: x[t][13] == 42) ==> f(x) == 5);

procedure P() {
  var x: [T][int]int, t: T;

  x[t] := x[t][13 := 42];
  assert f(x) == 5;
}

type name;

function Field(int): name;

function Unified([name][int]int): [int]int;

axiom (forall M: [name][int]int, x: int, y: int :: {Unified(M[Field(x) := M[Field(x)][x := y]])} Unified(M[Field(x) := M[Field(x)][x := y]]) == Unified(M)[x := y]);

[Input - ../../vendor/boogie/Test/test21/Maps2.bpl]
// RUN: %boogie -typeEncoding:p -logPrefix:0p "%s" > "%t"
// RUN: %diff "%s.p.expect" "%t"
// RUN: %boogie -typeEncoding:a -logPrefix:0a "%s" > "%t"
// RUN: %diff "%s.a.expect" "%t"
// XFAIL: *

type T;

function f(x : [T][int]int) returns (int);

axiom (forall x:[T][int]int ::  {f(x)}
               (exists t:T :: x[t][13] == 42) ==> f(x) == 5);

procedure P() returns () {
  var x : [T][int]int, t : T;

  x[t] := x[t][13 := 42];

  assert f(x) == 5;
}


type name;

function Field(int) returns (name);
function Unified([name][int]int) returns ([int]int);

axiom(forall M:[name][int]int, x:int, y:int :: {Unified(M[Field(x) := M[Field(x)][x := y]])}
                     Unified(M[Field(x) := M[Field(x)][x := y]]) == Unified(M)[x := y]);
