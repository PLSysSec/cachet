---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "C",
                    type_params: [],
                    type_: None,
                },
                TypeDecl {
                    ident: "D",
                    type_params: [],
                    type_: None,
                },
                TypeDecl {
                    ident: "E",
                    type_params: [
                        "_",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "x",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "c",
                ],
                type_: App(
                    TypeApp {
                        head: "C",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "d",
                ],
                type_: App(
                    TypeApp {
                        head: "D",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Coercion(
                        CoercionExpr {
                            expr: Var(
                                "x",
                            ),
                            coercions: [
                                Type(
                                    Atom(
                                        Int,
                                    ),
                                ),
                            ],
                        },
                    ),
                    op: Gt,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Coercion(
                        CoercionExpr {
                            expr: Var(
                                "x",
                            ),
                            coercions: [
                                Type(
                                    Atom(
                                        Int,
                                    ),
                                ),
                            ],
                        },
                    ),
                    op: Lt,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Coercion(
                        CoercionExpr {
                            expr: Var(
                                "x",
                            ),
                            coercions: [
                                Type(
                                    App(
                                        TypeApp {
                                            head: "E",
                                            tail: Some(
                                                Map(
                                                    MapType {
                                                        type_params: [
                                                            "a",
                                                        ],
                                                        keys: [
                                                            App(
                                                                TypeApp {
                                                                    head: "a",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ],
                                                        value: Atom(
                                                            Int,
                                                        ),
                                                    },
                                                ),
                                            ),
                                        },
                                    ),
                                ),
                            ],
                        },
                    ),
                    op: Lt,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Coercion(
                        CoercionExpr {
                            expr: Var(
                                "c",
                            ),
                            coercions: [
                                Type(
                                    App(
                                        TypeApp {
                                            head: "D",
                                            tail: None,
                                        },
                                    ),
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "d",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Coercion(
                        CoercionExpr {
                            expr: Nat(
                                "15",
                            ),
                            coercions: [
                                Type(
                                    App(
                                        TypeApp {
                                            head: "D",
                                            tail: None,
                                        },
                                    ),
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "d",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Coercion(
                        CoercionExpr {
                            expr: Nat(
                                "15",
                            ),
                            coercions: [
                                Type(
                                    App(
                                        TypeApp {
                                            head: "E",
                                            tail: Some(
                                                AtomApp(
                                                    TypeApp {
                                                        head: Int,
                                                        tail: None,
                                                    },
                                                ),
                                            ),
                                        },
                                    ),
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "d",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Coercion(
                        CoercionExpr {
                            expr: Factor(
                                Factor {
                                    lhs: Nat(
                                        "18",
                                    ),
                                    op: Mul,
                                    rhs: Nat(
                                        "15",
                                    ),
                                },
                            ),
                            coercions: [
                                Type(
                                    Atom(
                                        Int,
                                    ),
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
]

[Printed]
type C,
  D,
  E _;

const x: int;

const c: C;

const d: D;

axiom x : int > 0;

axiom x : int < 0;

axiom x : E <a>[a]int < 0;

axiom c : D == d;

axiom 15 : D == d;

axiom 15 : E int == d;

axiom (18 * 15) : int == 0;

[Input - ../../vendor/boogie/Test/test20/Coercions.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"


type C, D, E _;

const x:int;
const c:C;
const d:D;

axiom (x:int > 0);
axiom (x:int < 0);
axiom (x:E <a>[a]int < 0);   // impossible coercion

axiom (c:D == d);            // impossible coercion

axiom (15:D == d);           // impossible coercion
axiom (15:E int == d);       // impossible coercion
axiom ((18*15):int == 0);
