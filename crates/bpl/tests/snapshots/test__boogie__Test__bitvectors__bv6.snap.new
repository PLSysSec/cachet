---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Q",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "bv32",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "bv16",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        BvTerm(
                                            BvTerm {
                                                lhs: Var(
                                                    "y",
                                                ),
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "x",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Coercion(
                                                                    CoercionExpr {
                                                                        expr: Nat(
                                                                            "16",
                                                                        ),
                                                                        coercions: [
                                                                            Nat(
                                                                                "0",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Eq,
                                            rhs: BvTerm(
                                                BvTerm {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "x",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Coercion(
                                                                            CoercionExpr {
                                                                                expr: Nat(
                                                                                    "16",
                                                                                ),
                                                                                coercions: [
                                                                                    Nat(
                                                                                        "0",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    rhs: Var(
                                                        "y",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "x",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Coercion(
                                                                    CoercionExpr {
                                                                        expr: Nat(
                                                                            "17",
                                                                        ),
                                                                        coercions: [
                                                                            Nat(
                                                                                "1",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
procedure Q() {
  var x: bv32, y: bv16;

  x := y ++ y;
  assert x[16 : 0] == y;
  assert x == x[16 : 0] ++ y;
  assert x[17 : 1] == y;
}

[Input - ../../vendor/boogie/Test/bitvectors/bv6.bpl]
// RUN: %boogie  "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

procedure Q() returns () {
  var x : bv32, y : bv16;

  x := y ++ y;
  assert x[16:0] == y;
  assert x == x[16:0] ++ y;
  assert x[17:1] == y;     // should not be verifiable
}
