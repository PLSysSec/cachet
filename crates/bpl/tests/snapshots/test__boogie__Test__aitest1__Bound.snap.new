---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "TEST",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "N",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "N",
                                            ),
                                            op: Ge,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "i",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "N",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "LoopHead",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "LoopHead",
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "LoopBody",
                                        "AfterLoop",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "LoopBody",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "N",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "i",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "LoopHead",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "AfterLoop",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "i",
                                                    ),
                                                    op: Lt,
                                                    rhs: Var(
                                                        "N",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "N",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "name",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
]

[Printed]
const TEST: name;

procedure P() {
  var i: int;
  var N: int;

  start:
  assume N >= 0;
  i := 0;
  assert i <= N;
  goto LoopHead;
  LoopHead:
  goto LoopBody, AfterLoop;
  LoopBody:
  assume i < N;
  i := i + 1;
  goto LoopHead;
  AfterLoop:
  assume !(i < N);
  assert i == N;
  return;
}

type name;

[Input - ../../vendor/boogie/Test/aitest1/Bound.bpl]
// RUN: %boogie -infer:j "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
const TEST: name;

procedure P()
{
var i: int;
var N: int;

start:
  assume N >= 0;
  i := 0;
  assert i <= N;
  goto LoopHead;

LoopHead:
  goto LoopBody, AfterLoop;

LoopBody:
  assume i < N;
  i := i + 1;
  goto LoopHead;

AfterLoop:
  assume !(i < N);
  assert i == N;
  return;
}

type name;
