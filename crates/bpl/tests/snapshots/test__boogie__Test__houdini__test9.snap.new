---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v1",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v2",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v3",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b1",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b2",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b3",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b4",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b5",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b6",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b7",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b8",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b9",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b10",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b11",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b12",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b13",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b14",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b15",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b16",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "push",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b1",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b2",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b3",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b4",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v1",
                            "v2",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "v2",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "v1",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "v1",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "1",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "pop",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v1",
                            "v2",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b5",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b6",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b7",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b8",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "v1",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "v2",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "v2",
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "foo",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v1",
                            "v2",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b9",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b10",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b11",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b12",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "push",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "pop",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "bar",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v1",
                            "v2",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b13",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b14",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b15",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "candidate",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b16",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v1",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "push",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "pop",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "main",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v1",
                            "v2",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "v1",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "1",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "foo",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "v1",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "bar",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
var v1: int;

var v2: int;

var v3: int;

const {:existential true} b1: bool;

const {:existential true} b2: bool;

const {:existential true} b3: bool;

const {:existential true} b4: bool;

const {:existential true} b5: bool;

const {:existential true} b6: bool;

const {:existential true} b7: bool;

const {:existential true} b8: bool;

const {:existential true} b9: bool;

const {:existential true} b10: bool;

const {:existential true} b11: bool;

const {:existential true} b12: bool;

const {:existential true} b13: bool;

const {:existential true} b14: bool;

const {:existential true} b15: bool;

const {:existential true} b16: bool;

procedure push()
  requires {:candidate} b1 ==> v1 == 0;
  requires {:candidate} b2 ==> v1 == 1;
  ensures {:candidate} b3 ==> v1 == 0;
  ensures {:candidate} b4 ==> v1 == 1;
  modifies v1, v2;
{
  v2 := v1;
  v1 := 1;
}

procedure pop()
  modifies v1, v2;
  requires {:candidate} b5 ==> v1 == 0;
  requires {:candidate} b6 ==> v1 == 1;
  ensures {:candidate} b7 ==> v1 == 0;
  ensures {:candidate} b8 ==> v1 == 1;
{
  v1 := v2;
  havoc v2;
}

procedure foo()
  modifies v1, v2;
  requires {:candidate} b9 ==> v1 == 0;
  requires {:candidate} b10 ==> v1 == 1;
  ensures {:candidate} b11 ==> v1 == 0;
  ensures {:candidate} b12 ==> v1 == 1;
{
  call push();
  call pop();
}

procedure bar()
  modifies v1, v2;
  requires {:candidate} b13 ==> v1 == 0;
  requires {:candidate} b14 ==> v1 == 1;
  ensures {:candidate} b15 ==> v1 == 0;
  ensures {:candidate} b16 ==> v1 == 1;
{
  call push();
  call pop();
}

procedure main()
  modifies v1, v2;
{
  v1 := 1;
  call foo();
  havoc v1;
  call bar();
}

[Input - ../../vendor/boogie/Test/houdini/test9.bpl]
// RUN: %boogie -contractInfer -printAssignment -inlineDepth:1 "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
var v1: int;
var v2: int;
var v3: int;
const{:existential true} b1: bool;
const{:existential true} b2: bool;
const{:existential true} b3: bool;
const{:existential true} b4: bool;
const{:existential true} b5: bool;
const{:existential true} b6: bool;
const{:existential true} b7: bool;
const{:existential true} b8: bool;
const{:existential true} b9: bool;
const{:existential true} b10: bool;
const{:existential true} b11: bool;
const{:existential true} b12: bool;
const{:existential true} b13: bool;
const{:existential true} b14: bool;
const{:existential true} b15: bool;
const{:existential true} b16: bool;

procedure push() 
requires {:candidate} b1 ==> v1 == 0;
requires {:candidate} b2 ==> v1 == 1;
ensures  {:candidate} b3 ==> v1 == 0;
ensures {:candidate}  b4 ==> v1 == 1;
modifies v1,v2;
{
   v2 := v1;
   v1 := 1;
}

procedure pop()
modifies v1,v2;
requires {:candidate} b5 ==> v1 == 0;
requires {:candidate} b6 ==> v1 == 1;
ensures  {:candidate} b7 ==> v1 == 0;
ensures {:candidate}  b8 ==> v1 == 1;
{
   v1 := v2;
   havoc v2;
}

procedure foo() 
modifies v1,v2;
requires {:candidate} b9 ==> v1 == 0;
requires {:candidate} b10 ==> v1 == 1;
ensures  {:candidate} b11 ==> v1 == 0;
ensures {:candidate}  b12 ==> v1 == 1;
{
   call push();
   call pop();
}

procedure bar()
modifies v1,v2;
requires {:candidate} b13 ==> v1 == 0;
requires {:candidate} b14 ==> v1 == 1;
ensures  {:candidate} b15 ==> v1 == 0;
ensures {:candidate}  b16 ==> v1 == 1;
{
   call push();
   call pop();
}

procedure main() 
modifies v1,v2;
{
   v1 := 1;
   call foo();
   havoc v1;
   call bar();
}
