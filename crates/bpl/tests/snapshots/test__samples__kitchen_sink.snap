---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Axiom(
        AxiomDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "hello",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "world",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "hello",
                        params: [
                            Expr(
                                Var(
                                    "world",
                                ),
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "world",
                        params: [
                            Expr(
                                Var(
                                    "yes",
                                ),
                            ),
                            String(
                                StringLit {
                                    text: "hello",
                                },
                            ),
                            String(
                                StringLit {
                                    text: "w\\\"o\\\"rld",
                                },
                            ),
                        ],
                    },
                ),
                Trigger(
                    [
                        Var(
                            "foo",
                        ),
                    ],
                ),
                Trigger(
                    [
                        Var(
                            "foo",
                        ),
                        Var(
                            "bar",
                        ),
                    ],
                ),
            ],
            proposition: BoolLit(
                false,
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "foo",
                    "bar",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "foo",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Bool,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "bar",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "quux",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "baz",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "z",
                    ),
                    type_: App(
                        TypeApp {
                            head: "foo",
                            tail: Some(
                                AtomApp(
                                    TypeApp {
                                        head: Int,
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "quux",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "quux",
                ),
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "quux",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "foo",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "foo",
                type_params: [
                    "T",
                ],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "foo",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "bar",
                                                    tail: Some(
                                                        App(
                                                            TypeApp {
                                                                head: "baz",
                                                                tail: Some(
                                                                    App(
                                                                        TypeApp {
                                                                            head: "quux",
                                                                            tail: Some(
                                                                                AtomApp(
                                                                                    TypeApp {
                                                                                        head: Int,
                                                                                        tail: Some(
                                                                                            AtomApp(
                                                                                                TypeApp {
                                                                                                    head: Bool,
                                                                                                    tail: None,
                                                                                                },
                                                                                            ),
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "z",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "w",
                                    ],
                                    type_: Atom(
                                        Real,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "hello",
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "bar",
                type_params: [
                    "T",
                ],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Real,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "baz",
                type_params: [
                    "T",
                ],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Real,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "hello",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "world",
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "foo",
                type_params: [
                    "T",
                ],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "bar",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: BoolLit(
                            false,
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: BoolLit(
                            false,
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Real,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "hello",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "world",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "y",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "z",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "y",
                                        ),
                                        Var(
                                            "z",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x",
                                        ),
                                        Var(
                                            "y",
                                        ),
                                        Var(
                                            "z",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                                [],
                                                [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x",
                                        ),
                                        Var(
                                            "y",
                                        ),
                                        Var(
                                            "z",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            Break(
                                BreakCmd {
                                    label: None,
                                },
                            ),
                        ),
                        StructuredCmd(
                            Break(
                                BreakCmd {
                                    label: Some(
                                        "hello",
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "foo",
                                        params: [
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                            Var(
                                                "z",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "bar",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "x",
                                            "y",
                                        ],
                                        target: "baz",
                                        params: [
                                            Var(
                                                "z",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "x",
                                        ],
                                        target: "quux",
                                        params: [
                                            Var(
                                                "y",
                                            ),
                                            Var(
                                                "z",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "aaa",
                                                params: [],
                                            },
                                        ),
                                        Attr(
                                            AttrContent {
                                                ident: "bbb",
                                                params: [],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        false,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: BoolLit(
                                        false,
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "world",
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "hello",
                                        "world",
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "hello",
                                        "world",
                                        "hello",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "x",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "x",
                                        "y",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "x",
                                        "y",
                                        "z",
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [],
                                    else_: None,
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        BoolLit(
                                            false,
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "foo",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: BoolLit(
                                                                false,
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "x",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [],
                                                    proposition: Var(
                                                        "x",
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        ElseIf(
                                            IfCmd {
                                                guard: Expr(
                                                    Var(
                                                        "y",
                                                    ),
                                                ),
                                                then: [
                                                    LabelOrCmd(
                                                        Claim(
                                                            ClaimCmd {
                                                                kind: Assert,
                                                                attrs: [],
                                                                proposition: Var(
                                                                    "y",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                                else_: Some(
                                                    ElseIf(
                                                        IfCmd {
                                                            guard: Expr(
                                                                Var(
                                                                    "z",
                                                                ),
                                                            ),
                                                            then: [
                                                                LabelOrCmd(
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assert,
                                                                            attrs: [],
                                                                            proposition: Var(
                                                                                "z",
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                            else_: Some(
                                                                Else(
                                                                    [
                                                                        LabelOrCmd(
                                                                            Call(
                                                                                CallCmd {
                                                                                    attrs: [],
                                                                                    call_params: CallParams {
                                                                                        returns: [],
                                                                                        target: "bar",
                                                                                        params: [],
                                                                                    },
                                                                                    is_async: false,
                                                                                    is_free: false,
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ],
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            ParCall(
                                ParCallCmd {
                                    attrs: [],
                                    calls: [
                                        CallParams {
                                            returns: [
                                                "x",
                                            ],
                                            target: "foo",
                                            params: [],
                                        },
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            ParCall(
                                ParCallCmd {
                                    attrs: [],
                                    calls: [
                                        CallParams {
                                            returns: [
                                                "x",
                                            ],
                                            target: "foo",
                                            params: [],
                                        },
                                        CallParams {
                                            returns: [
                                                "y",
                                            ],
                                            target: "bar",
                                            params: [],
                                        },
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            ParCall(
                                ParCallCmd {
                                    attrs: [],
                                    calls: [
                                        CallParams {
                                            returns: [
                                                "x",
                                            ],
                                            target: "foo",
                                            params: [],
                                        },
                                        CallParams {
                                            returns: [
                                                "y",
                                            ],
                                            target: "bar",
                                            params: [],
                                        },
                                        CallParams {
                                            returns: [
                                                "z",
                                            ],
                                            target: "baz",
                                            params: [],
                                        },
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            ParCall(
                                ParCallCmd {
                                    attrs: [],
                                    calls: [
                                        CallParams {
                                            returns: [
                                                "x",
                                            ],
                                            target: "foo",
                                            params: [],
                                        },
                                        CallParams {
                                            returns: [
                                                "y",
                                            ],
                                            target: "bar",
                                            params: [],
                                        },
                                        CallParams {
                                            returns: [
                                                "z",
                                            ],
                                            target: "baz",
                                            params: [],
                                        },
                                        CallParams {
                                            returns: [],
                                            target: "quux",
                                            params: [],
                                        },
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Asterisk,
                                    invariants: [],
                                    body: [],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Var(
                                            "x",
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [],
                                            expr: Var(
                                                "y",
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [],
                                            expr: Var(
                                                "z",
                                            ),
                                            is_free: true,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "foo",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "y",
                                                        ],
                                                        target: "bar",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                        LabelOrCmd(
                            Yield(
                                YieldCmd,
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Equiv(
                                            EquivExpr {
                                                lhs: Equiv(
                                                    EquivExpr {
                                                        lhs: Equiv(
                                                            EquivExpr {
                                                                lhs: Equiv(
                                                                    EquivExpr {
                                                                        lhs: Equiv(
                                                                            EquivExpr {
                                                                                lhs: Var(
                                                                                    "y",
                                                                                ),
                                                                                rhs: Implies(
                                                                                    ImpliesExpr {
                                                                                        lhs: Neg(
                                                                                            NegExpr {
                                                                                                op: Arith,
                                                                                                expr: Var(
                                                                                                    "x",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        rhs: Implies(
                                                                                            ImpliesExpr {
                                                                                                lhs: Coercion(
                                                                                                    CoercionExpr {
                                                                                                        expr: Var(
                                                                                                            "y",
                                                                                                        ),
                                                                                                        coercions: [
                                                                                                            Type(
                                                                                                                Atom(
                                                                                                                    Int,
                                                                                                                ),
                                                                                                            ),
                                                                                                            Type(
                                                                                                                App(
                                                                                                                    TypeApp {
                                                                                                                        head: "foo",
                                                                                                                        tail: None,
                                                                                                                    },
                                                                                                                ),
                                                                                                            ),
                                                                                                            Nat(
                                                                                                                "27",
                                                                                                            ),
                                                                                                            Type(
                                                                                                                App(
                                                                                                                    TypeApp {
                                                                                                                        head: "foo",
                                                                                                                        tail: Some(
                                                                                                                            Map(
                                                                                                                                MapType {
                                                                                                                                    type_params: [
                                                                                                                                        "bar",
                                                                                                                                    ],
                                                                                                                                    keys: [
                                                                                                                                        App(
                                                                                                                                            TypeApp {
                                                                                                                                                head: "baz",
                                                                                                                                                tail: None,
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                    value: App(
                                                                                                                                        TypeApp {
                                                                                                                                            head: "quux",
                                                                                                                                            tail: None,
                                                                                                                                        },
                                                                                                                                    ),
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ),
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                                rhs: Explies(
                                                                                                    ExpliesExpr {
                                                                                                        lhs: Explies(
                                                                                                            ExpliesExpr {
                                                                                                                lhs: Explies(
                                                                                                                    ExpliesExpr {
                                                                                                                        lhs: Array(
                                                                                                                            ArrayExpr {
                                                                                                                                expr: Var(
                                                                                                                                    "z",
                                                                                                                                ),
                                                                                                                                subscripts: [
                                                                                                                                    ArraySubscript {
                                                                                                                                        keys: [
                                                                                                                                            Var(
                                                                                                                                                "x",
                                                                                                                                            ),
                                                                                                                                        ],
                                                                                                                                        value: None,
                                                                                                                                    },
                                                                                                                                    ArraySubscript {
                                                                                                                                        keys: [
                                                                                                                                            Var(
                                                                                                                                                "x",
                                                                                                                                            ),
                                                                                                                                        ],
                                                                                                                                        value: Some(
                                                                                                                                            Var(
                                                                                                                                                "y",
                                                                                                                                            ),
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                    ArraySubscript {
                                                                                                                                        keys: [
                                                                                                                                            Var(
                                                                                                                                                "x",
                                                                                                                                            ),
                                                                                                                                            Var(
                                                                                                                                                "y",
                                                                                                                                            ),
                                                                                                                                        ],
                                                                                                                                        value: Some(
                                                                                                                                            Var(
                                                                                                                                                "z",
                                                                                                                                            ),
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                    ArraySubscript {
                                                                                                                                        keys: [],
                                                                                                                                        value: Some(
                                                                                                                                            Var(
                                                                                                                                                "x",
                                                                                                                                            ),
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                    ArraySubscript {
                                                                                                                                        keys: [],
                                                                                                                                        value: None,
                                                                                                                                    },
                                                                                                                                    ArraySubscript {
                                                                                                                                        keys: [
                                                                                                                                            Var(
                                                                                                                                                "x",
                                                                                                                                            ),
                                                                                                                                            Var(
                                                                                                                                                "y",
                                                                                                                                            ),
                                                                                                                                        ],
                                                                                                                                        value: None,
                                                                                                                                    },
                                                                                                                                ],
                                                                                                                            },
                                                                                                                        ),
                                                                                                                        rhs: Logical(
                                                                                                                            LogicalExpr {
                                                                                                                                lhs: Logical(
                                                                                                                                    LogicalExpr {
                                                                                                                                        lhs: Var(
                                                                                                                                            "w",
                                                                                                                                        ),
                                                                                                                                        op: And,
                                                                                                                                        rhs: Logical(
                                                                                                                                            LogicalExpr {
                                                                                                                                                lhs: Logical(
                                                                                                                                                    LogicalExpr {
                                                                                                                                                        lhs: Logical(
                                                                                                                                                            LogicalExpr {
                                                                                                                                                                lhs: Term(
                                                                                                                                                                    Term {
                                                                                                                                                                        lhs: Term(
                                                                                                                                                                            Term {
                                                                                                                                                                                lhs: Term(
                                                                                                                                                                                    Term {
                                                                                                                                                                                        lhs: Factor(
                                                                                                                                                                                            Factor {
                                                                                                                                                                                                lhs: ArithCoercion(
                                                                                                                                                                                                    ArithCoercionExpr {
                                                                                                                                                                                                        kind: Int,
                                                                                                                                                                                                        expr: Var(
                                                                                                                                                                                                            "x",
                                                                                                                                                                                                        ),
                                                                                                                                                                                                    },
                                                                                                                                                                                                ),
                                                                                                                                                                                                op: Mul,
                                                                                                                                                                                                rhs: Nat(
                                                                                                                                                                                                    "1",
                                                                                                                                                                                                ),
                                                                                                                                                                                            },
                                                                                                                                                                                        ),
                                                                                                                                                                                        op: Add,
                                                                                                                                                                                        rhs: Factor(
                                                                                                                                                                                            Factor {
                                                                                                                                                                                                lhs: Factor(
                                                                                                                                                                                                    Factor {
                                                                                                                                                                                                        lhs: Factor(
                                                                                                                                                                                                            Factor {
                                                                                                                                                                                                                lhs: ArithCoercion(
                                                                                                                                                                                                                    ArithCoercionExpr {
                                                                                                                                                                                                                        kind: Real,
                                                                                                                                                                                                                        expr: Var(
                                                                                                                                                                                                                            "y",
                                                                                                                                                                                                                        ),
                                                                                                                                                                                                                    },
                                                                                                                                                                                                                ),
                                                                                                                                                                                                                op: RealDiv,
                                                                                                                                                                                                                rhs: BvLit(
                                                                                                                                                                                                                    BvLit {
                                                                                                                                                                                                                        n: "3",
                                                                                                                                                                                                                        width: "12",
                                                                                                                                                                                                                    },
                                                                                                                                                                                                                ),
                                                                                                                                                                                                            },
                                                                                                                                                                                                        ),
                                                                                                                                                                                                        op: Div,
                                                                                                                                                                                                        rhs: Var(
                                                                                                                                                                                                            "z",
                                                                                                                                                                                                        ),
                                                                                                                                                                                                    },
                                                                                                                                                                                                ),
                                                                                                                                                                                                op: Mod,
                                                                                                                                                                                                rhs: Nat(
                                                                                                                                                                                                    "12",
                                                                                                                                                                                                ),
                                                                                                                                                                                            },
                                                                                                                                                                                        ),
                                                                                                                                                                                    },
                                                                                                                                                                                ),
                                                                                                                                                                                op: Sub,
                                                                                                                                                                                rhs: Dec(
                                                                                                                                                                                    Dec {
                                                                                                                                                                                        whole: "6",
                                                                                                                                                                                        fract: Some(
                                                                                                                                                                                            "7",
                                                                                                                                                                                        ),
                                                                                                                                                                                        exp: None,
                                                                                                                                                                                    },
                                                                                                                                                                                ),
                                                                                                                                                                            },
                                                                                                                                                                        ),
                                                                                                                                                                        op: Add,
                                                                                                                                                                        rhs: Equiv(
                                                                                                                                                                            EquivExpr {
                                                                                                                                                                                lhs: Term(
                                                                                                                                                                                    Term {
                                                                                                                                                                                        lhs: Term(
                                                                                                                                                                                            Term {
                                                                                                                                                                                                lhs: Dec(
                                                                                                                                                                                                    Dec {
                                                                                                                                                                                                        whole: "7",
                                                                                                                                                                                                        fract: None,
                                                                                                                                                                                                        exp: Some(
                                                                                                                                                                                                            Exp {
                                                                                                                                                                                                                is_neg: false,
                                                                                                                                                                                                                digits: "12",
                                                                                                                                                                                                            },
                                                                                                                                                                                                        ),
                                                                                                                                                                                                    },
                                                                                                                                                                                                ),
                                                                                                                                                                                                op: Sub,
                                                                                                                                                                                                rhs: Dec(
                                                                                                                                                                                                    Dec {
                                                                                                                                                                                                        whole: "3",
                                                                                                                                                                                                        fract: None,
                                                                                                                                                                                                        exp: Some(
                                                                                                                                                                                                            Exp {
                                                                                                                                                                                                                is_neg: true,
                                                                                                                                                                                                                digits: "10",
                                                                                                                                                                                                            },
                                                                                                                                                                                                        ),
                                                                                                                                                                                                    },
                                                                                                                                                                                                ),
                                                                                                                                                                                            },
                                                                                                                                                                                        ),
                                                                                                                                                                                        op: Add,
                                                                                                                                                                                        rhs: Dec(
                                                                                                                                                                                            Dec {
                                                                                                                                                                                                whole: "9",
                                                                                                                                                                                                fract: Some(
                                                                                                                                                                                                    "87",
                                                                                                                                                                                                ),
                                                                                                                                                                                                exp: Some(
                                                                                                                                                                                                    Exp {
                                                                                                                                                                                                        is_neg: false,
                                                                                                                                                                                                        digits: "3",
                                                                                                                                                                                                    },
                                                                                                                                                                                                ),
                                                                                                                                                                                            },
                                                                                                                                                                                        ),
                                                                                                                                                                                    },
                                                                                                                                                                                ),
                                                                                                                                                                                rhs: Nat(
                                                                                                                                                                                    "6",
                                                                                                                                                                                ),
                                                                                                                                                                            },
                                                                                                                                                                        ),
                                                                                                                                                                    },
                                                                                                                                                                ),
                                                                                                                                                                op: Or,
                                                                                                                                                                rhs: Var(
                                                                                                                                                                    "y",
                                                                                                                                                                ),
                                                                                                                                                            },
                                                                                                                                                        ),
                                                                                                                                                        op: Or,
                                                                                                                                                        rhs: Var(
                                                                                                                                                            "z",
                                                                                                                                                        ),
                                                                                                                                                    },
                                                                                                                                                ),
                                                                                                                                                op: Or,
                                                                                                                                                rhs: FuncCall(
                                                                                                                                                    FuncCall {
                                                                                                                                                        target: "foo",
                                                                                                                                                        args: [
                                                                                                                                                            FuncCall(
                                                                                                                                                                FuncCall {
                                                                                                                                                                    target: "bar",
                                                                                                                                                                    args: [
                                                                                                                                                                        FuncCall(
                                                                                                                                                                            FuncCall {
                                                                                                                                                                                target: "baz",
                                                                                                                                                                                args: [
                                                                                                                                                                                    Var(
                                                                                                                                                                                        "x",
                                                                                                                                                                                    ),
                                                                                                                                                                                ],
                                                                                                                                                                            },
                                                                                                                                                                        ),
                                                                                                                                                                        FuncCall(
                                                                                                                                                                            FuncCall {
                                                                                                                                                                                target: "quux",
                                                                                                                                                                                args: [
                                                                                                                                                                                    Var(
                                                                                                                                                                                        "y",
                                                                                                                                                                                    ),
                                                                                                                                                                                ],
                                                                                                                                                                            },
                                                                                                                                                                        ),
                                                                                                                                                                        FuncCall(
                                                                                                                                                                            FuncCall {
                                                                                                                                                                                target: "bar",
                                                                                                                                                                                args: [],
                                                                                                                                                                            },
                                                                                                                                                                        ),
                                                                                                                                                                    ],
                                                                                                                                                                },
                                                                                                                                                            ),
                                                                                                                                                        ],
                                                                                                                                                    },
                                                                                                                                                ),
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                                op: And,
                                                                                                                                rhs: Old(
                                                                                                                                    OldExpr {
                                                                                                                                        expr: IfThenElse(
                                                                                                                                            IfThenElseExpr {
                                                                                                                                                cond: Var(
                                                                                                                                                    "x",
                                                                                                                                                ),
                                                                                                                                                then: Var(
                                                                                                                                                    "y",
                                                                                                                                                ),
                                                                                                                                                else_: Var(
                                                                                                                                                    "z",
                                                                                                                                                ),
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ),
                                                                                                                rhs: Implies(
                                                                                                                    ImpliesExpr {
                                                                                                                        lhs: Var(
                                                                                                                            "x",
                                                                                                                        ),
                                                                                                                        rhs: Implies(
                                                                                                                            ImpliesExpr {
                                                                                                                                lhs: Var(
                                                                                                                                    "y",
                                                                                                                                ),
                                                                                                                                rhs: Explies(
                                                                                                                                    ExpliesExpr {
                                                                                                                                        lhs: Var(
                                                                                                                                            "z",
                                                                                                                                        ),
                                                                                                                                        rhs: Var(
                                                                                                                                            "w",
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        rhs: Logical(
                                                                                                            LogicalExpr {
                                                                                                                lhs: Rel(
                                                                                                                    RelExpr {
                                                                                                                        lhs: Var(
                                                                                                                            "x",
                                                                                                                        ),
                                                                                                                        op: Eq,
                                                                                                                        rhs: BoolLit(
                                                                                                                            false,
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ),
                                                                                                                op: Or,
                                                                                                                rhs: BoolLit(
                                                                                                                    true,
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        rhs: Neg(
                                                                            NegExpr {
                                                                                op: Logical,
                                                                                expr: Var(
                                                                                    "w",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Quant(
                                                                    QuantExpr {
                                                                        kind: ForAll,
                                                                        body: QuantBody {
                                                                            type_params: [
                                                                                "x",
                                                                            ],
                                                                            bound_vars: [],
                                                                            attrs: [],
                                                                            expr: Var(
                                                                                "y",
                                                                            ),
                                                                        },
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Quant(
                                                            QuantExpr {
                                                                kind: Exists,
                                                                body: QuantBody {
                                                                    type_params: [],
                                                                    bound_vars: [
                                                                        AttrTypedIdentsWhere {
                                                                            attrs: [],
                                                                            typed_idents_where: TypedIdentsWhere {
                                                                                typed_idents: TypedIdents {
                                                                                    idents: [
                                                                                        "x",
                                                                                    ],
                                                                                    type_: Atom(
                                                                                        Int,
                                                                                    ),
                                                                                },
                                                                                where_: None,
                                                                            },
                                                                        },
                                                                    ],
                                                                    attrs: [],
                                                                    expr: Var(
                                                                        "y",
                                                                    ),
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                                rhs: Quant(
                                                    QuantExpr {
                                                        kind: Lambda,
                                                        body: QuantBody {
                                                            type_params: [
                                                                "x",
                                                            ],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "y",
                                                                            ],
                                                                            type_: Atom(
                                                                                Int,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: Var(
                                                                "z",
                                                            ),
                                                        },
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Code(
                                            CodeExpr {
                                                local_vars: [],
                                                spec_blocks: [
                                                    SpecBlock {
                                                        label: "foo",
                                                        cmds: [
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [],
                                                                    call_params: CallParams {
                                                                        returns: [],
                                                                        target: "foo",
                                                                        params: [],
                                                                    },
                                                                    is_async: false,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ],
                                                        transfer: Goto(
                                                            SpecGoto {
                                                                labels: [
                                                                    "bar",
                                                                    "baz",
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                    SpecBlock {
                                                        label: "bar",
                                                        cmds: [
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "x",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Nat(
                                                                            "1",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "y",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Nat(
                                                                            "2",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        transfer: Goto(
                                                            SpecGoto {
                                                                labels: [
                                                                    "foo",
                                                                    "baz",
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                    SpecBlock {
                                                        label: "baz",
                                                        cmds: [],
                                                        transfer: Return(
                                                            SpecReturn {
                                                                value: Var(
                                                                    "z",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "z",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Code(
                                            CodeExpr {
                                                local_vars: [
                                                    LocalVars {
                                                        attrs: [],
                                                        vars: [
                                                            TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "a",
                                                                        "b",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        ],
                                                    },
                                                    LocalVars {
                                                        attrs: [],
                                                        vars: [
                                                            TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "c",
                                                                    ],
                                                                    type_: Atom(
                                                                        Bool,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        ],
                                                    },
                                                ],
                                                spec_blocks: [
                                                    SpecBlock {
                                                        label: "foo",
                                                        cmds: [],
                                                        transfer: Goto(
                                                            SpecGoto {
                                                                labels: [
                                                                    "bar",
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                    SpecBlock {
                                                        label: "bar",
                                                        cmds: [],
                                                        transfer: Return(
                                                            SpecReturn {
                                                                value: Var(
                                                                    "z",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    SpecBlock {
                                                        label: "baz",
                                                        cmds: [],
                                                        transfer: Goto(
                                                            SpecGoto {
                                                                labels: [
                                                                    "bar",
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "w",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Code(
                                            CodeExpr {
                                                local_vars: [],
                                                spec_blocks: [
                                                    SpecBlock {
                                                        label: "foo",
                                                        cmds: [],
                                                        transfer: Return(
                                                            SpecReturn {
                                                                value: Var(
                                                                    "w",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        IfThenElse(
                                            IfThenElseExpr {
                                                cond: Var(
                                                    "x",
                                                ),
                                                then: Var(
                                                    "y",
                                                ),
                                                else_: Equiv(
                                                    EquivExpr {
                                                        lhs: Var(
                                                            "z",
                                                        ),
                                                        rhs: Var(
                                                            "w",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        IfThenElse(
                                            IfThenElseExpr {
                                                cond: Var(
                                                    "x",
                                                ),
                                                then: IfThenElse(
                                                    IfThenElseExpr {
                                                        cond: Var(
                                                            "y",
                                                        ),
                                                        then: Var(
                                                            "z",
                                                        ),
                                                        else_: Var(
                                                            "w",
                                                        ),
                                                    },
                                                ),
                                                else_: Var(
                                                    "q",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "z",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        IfThenElse(
                                            IfThenElseExpr {
                                                cond: Var(
                                                    "a1",
                                                ),
                                                then: IfThenElse(
                                                    IfThenElseExpr {
                                                        cond: Var(
                                                            "b1",
                                                        ),
                                                        then: IfThenElse(
                                                            IfThenElseExpr {
                                                                cond: Var(
                                                                    "c1",
                                                                ),
                                                                then: Var(
                                                                    "c2",
                                                                ),
                                                                else_: Var(
                                                                    "c3",
                                                                ),
                                                            },
                                                        ),
                                                        else_: Var(
                                                            "b3",
                                                        ),
                                                    },
                                                ),
                                                else_: IfThenElse(
                                                    IfThenElseExpr {
                                                        cond: Var(
                                                            "d1",
                                                        ),
                                                        then: Var(
                                                            "d2",
                                                        ),
                                                        else_: IfThenElse(
                                                            IfThenElseExpr {
                                                                cond: Var(
                                                                    "e1",
                                                                ),
                                                                then: Var(
                                                                    "e2",
                                                                ),
                                                                else_: Var(
                                                                    "e3",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "bv64",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "y",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "bv64",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "y",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "bv64",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: BoolLit(
                                                                            true,
                                                                        ),
                                                                        op: And,
                                                                        rhs: BoolLit(
                                                                            true,
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: BoolLit(
                                                                    true,
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Implies(
                                                            ImpliesExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "foo",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "x",
                                                                                                    ),
                                                                                                    Var(
                                                                                                        "y",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: Var(
                                                                                            "y",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                op: Or,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "foo",
                                                                                                args: [
                                                                                                    FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "foo",
                                                                                                            args: [
                                                                                                                Var(
                                                                                                                    "x",
                                                                                                                ),
                                                                                                                Var(
                                                                                                                    "y",
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                    BvLit(
                                                                                                        BvLit {
                                                                                                            n: "1",
                                                                                                            width: "64",
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: Var(
                                                                                            "y",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: IfThenElse(
                                                                            IfThenElseExpr {
                                                                                cond: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "y",
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "foo",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "x",
                                                                                                    ),
                                                                                                    Var(
                                                                                                        "y",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                then: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "bar",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "baz",
                                                                                                    args: [
                                                                                                        BvLit(
                                                                                                            BvLit {
                                                                                                                n: "18446744073709551615",
                                                                                                                width: "64",
                                                                                                            },
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "y",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                else_: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "quux",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "baz",
                                                                                                    args: [
                                                                                                        BvLit(
                                                                                                            BvLit {
                                                                                                                n: "18446744073709551615",
                                                                                                                width: "64",
                                                                                                            },
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "y",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "foo",
                                                                                args: [
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "bar",
                                                                                            args: [
                                                                                                FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "baz",
                                                                                                        args: [
                                                                                                            Var(
                                                                                                                "x",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "y",
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                                FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "foo",
                                                                                                        args: [
                                                                                                            FuncCall(
                                                                                                                FuncCall {
                                                                                                                    target: "bar",
                                                                                                                    args: [
                                                                                                                        Var(
                                                                                                                            "x",
                                                                                                                        ),
                                                                                                                        Var(
                                                                                                                            "y",
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "y",
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    BvTerm(
                                                                                        BvTerm {
                                                                                            lhs: BvLit(
                                                                                                BvLit {
                                                                                                    n: "0",
                                                                                                    width: "32",
                                                                                                },
                                                                                            ),
                                                                                            rhs: BvLit(
                                                                                                BvLit {
                                                                                                    n: "63",
                                                                                                    width: "32",
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: BvLit(
                                                                            BvLit {
                                                                                n: "1",
                                                                                width: "64",
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Nat(
                                                    "1",
                                                ),
                                                op: Add,
                                                rhs: IfThenElse(
                                                    IfThenElseExpr {
                                                        cond: Var(
                                                            "x",
                                                        ),
                                                        then: Var(
                                                            "y",
                                                        ),
                                                        else_: Var(
                                                            "z",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        IfThenElse(
                                            IfThenElseExpr {
                                                cond: Var(
                                                    "x",
                                                ),
                                                then: Var(
                                                    "y",
                                                ),
                                                else_: Term(
                                                    Term {
                                                        lhs: Var(
                                                            "z",
                                                        ),
                                                        op: Add,
                                                        rhs: Nat(
                                                            "1",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: false,
                                                        whole: "1234567890ABCDEFabcdef",
                                                        fract: "1234567890ABCDEFabcdef",
                                                        exp: Exp {
                                                            is_neg: true,
                                                            digits: "16",
                                                        },
                                                    },
                                                ),
                                                sig_size: "32",
                                                exp_size: "64",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: false,
                                                        whole: "1234567890ABCDEFabcdef",
                                                        fract: "1234567890ABCDEFabcdef",
                                                        exp: Exp {
                                                            is_neg: false,
                                                            digits: "16",
                                                        },
                                                    },
                                                ),
                                                sig_size: "32",
                                                exp_size: "64",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: NotANumber,
                                                sig_size: "32",
                                                exp_size: "64",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: NotANumber,
                                                sig_size: "32",
                                                exp_size: "64",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: PosInfinity,
                                                sig_size: "32",
                                                exp_size: "64",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: NegInfinity,
                                                sig_size: "32",
                                                exp_size: "64",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "bar",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Real,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "foo",
                    type_params: [
                        "x",
                        "y",
                    ],
                    type_: Some(
                        Atom(
                            Int,
                        ),
                    ),
                },
                TypeDecl {
                    ident: "bar",
                    type_params: [],
                    type_: None,
                },
                TypeDecl {
                    ident: "baz",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Bool,
                        ),
                    ),
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "quux",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Real,
                        ),
                    ),
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "foo",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
]

[Printed]
axiom {:hello} {:world} {:hello world} {:world yes, "hello", "w\"o\"rld"} {foo} {foo, bar} false;

const foo, bar: bool;

function foo(x: int): [bool]int;

function bar(x: int, y: quux): int;

function baz(x: int, y: bool, z: foo int quux) returns (quux: int);

function quux(): foo;

implementation foo<T>(x: int, y: foo bar baz quux int bool) {
  var z: int;
  var w: real;

  hello:
}

implementation bar<T>(x: int, y: bool) returns (z: real) {
}

implementation baz<T>(x: int, y: bool) returns (z: real) {
  hello:
  world:
}

procedure foo<T>(x: int, y: bool)
  modifies bar;
  requires false;
  ensures false;
{
  var z: real;

  hello:
  world:
  x := y;
  x, y := z;
  x := y, z;
  x[y][z] := x, y, z;
  x[y, z][x, y, z] := x;
  x[x][y, z][][x, y, z] := x, y, z;
  break;
  break hello;
  call foo(x, y, z);
  call bar();
  call x, y := baz(z);
  call x := quux(y, z);
  assume {:aaa} {:bbb} false;
  assert false;
  goto world;
  goto hello, world;
  goto hello, world, hello;
  havoc x;
  havoc x, y;
  havoc x, y, z;
  if (*) {
  }
  if (false) {
    call foo();
  } else {
    assume false;
  }
  if (x) {
    assert x;
  } else if (y) {
    assert y;
  } else if (z) {
    assert z;
  } else {
    call bar();
  }
  par x := foo();
  par x := foo() | y := bar();
  par x := foo() | y := bar() | z := baz();
  par x := foo() | y := bar() | z := baz() | quux();
  while (*) {
  }
  while (x)
    invariant y;
    free invariant z;
  {
    call foo();
    call y := bar();
  }
  return;
  yield;
  x := y <==> -x ==> y : int : foo : 27 : foo <bar>[baz]quux ==> z[x][x := y][x, y := z][:= x][][x, y] <== w && (int(x) * 1 + real(y) / 3bv12 div z mod 12 - 6.7 + (7e12 - 3e-10 + 9.87e3 <==> 6) || y || z || foo(bar(baz(x), quux(y), bar()))) && old (if x then y else z) <== (x ==> y ==> z <== w) <== x == false || true <==> !w <==> (forall <x> :: y) <==> (exists x: int :: y) <==> (lambda <x> y: int :: z);
  y := |{
    foo:
      call foo();
      goto bar, baz;
    bar:
      x := 1;
      y := 2;
      goto foo, baz;
    baz:
      return z;
  }|;
  z := |{
    var a, b: int;
    var c: bool;

    foo:
      goto bar;
    bar:
      return z;
    baz:
      goto bar;
  }|;
  w := |{
    foo:
      return w;
  }|;
  x := if x then y else z <==> w;
  y := if x then if y then z else w else q;
  z := if a1 then if b1 then if c1 then c2 else c3 else b3 else if d1 then d2 else if e1 then e2 else e3;
  assert (forall x: bv64, y: bv64, y: bv64 :: true && true && true ==> (foo(x, y) == y || foo(foo(x, y), 1bv64) == y) && (if y == foo(x, y) then bar(x, baz(18446744073709551615bv64, y)) else quux(x, baz(18446744073709551615bv64, y))) ==> foo(bar(baz(x, y), foo(bar(x, y), y)), 0bv32 ++ 63bv32) == 1bv64);
  x := 1 + (if x then y else z);
  y := if x then y else z + 1;
  x := 0x1234567890ABCDEFabcdef.1234567890ABCDEFabcdefe-16f32e64;
  x := 0x1234567890ABCDEFabcdef.1234567890ABCDEFabcdefe16f32e64;
  x := 0NaN32e64;
  x := 0NaN32e64;
  x := 0+oo32e64;
  x := 0-oo32e64;
}

procedure bar(x: int, y: bool) returns (z: real);

type foo x y = int,
  bar,
  baz = bool;

type quux = real;

var foo: int;

[Input - tests/samples/kitchen_sink.bpl]
axiom {:hello} {:world} {:hello world} {:world yes, "hello", "w\"o\"rld"} {foo} {foo, bar} false;

const foo, bar: bool;

function foo(x: int): [bool]int;

function bar(x: int, y: quux) returns (int);

function baz(x: int, y: bool, z: foo int quux) returns (quux: int);

function quux(): foo;

implementation foo<T>(x: int, y: foo bar baz quux int bool) returns () {
  var z: int;
  var w: real;
  hello:
}

implementation bar<T>(x: int, y: bool) returns (z: real) {}

implementation baz<T>(x: int, y: bool) returns (z: real) {

  hello:

  world:

}

procedure foo<T>(x: int, y: bool) returns ()
modifies bar;
requires false;
ensures false;
{
  var z: real;
  hello:
  world:
  x := y;
  x, y := z;
  x := y, z;
  x[y][z] := x, y, z;
  x[y, z][x, y, z] := x;
  x[x][y, z][][x, y, z] := x, y, z;
  break;
  break hello;
  call foo(x, y, z);
  call bar();
  call x, y := baz(z);
  call x := quux(y, z);
  assume {:aaa} {:bbb} false;
  assert false;
  goto world;
  goto hello, world;
  goto hello, world, hello;
  havoc x;
  havoc x, y;
  havoc x, y, z;
  if (*) {}
  if (false) {
    call foo();
  } else {
    assume false;
  }
  if (x) {
    assert x;
  } else if (y) {
    assert y;
  } else if (z) {
    assert z;
  } else {
    call bar();
  }
  par x := foo();
  par x := foo() | y := bar();
  par x := foo() | y := bar() | z := baz();
  par x := foo() | y := bar() | z := baz() | quux();
  while (*) {}
  while (x)
  invariant y;
  free invariant z;
  {
    call foo();
    call y := bar();
  }
  return;
  yield;
  x := y <==> -x ==> y : int : foo : 27 : foo <bar>[baz]quux ==> z[x][x := y][x, y := z][:= x][][x, y] <== w && (int(x) * 1 + real(y) / 3bv12 div z mod 12 - 6.7 + (7e12 - 3e-10 + 9.87e3 <==> 6) || y || z || foo(bar(baz(x), quux(y), bar()))) && old (if x then y else z) <== (x ==> y ==> z <== w) <== x == false || true <==> !w <==> (forall <x> :: y) <==> (exists x: int :: y) <==> (lambda <x> y: int :: z);
  y := |{
    foo:
      call foo();
      goto bar, baz;
    bar:
      x := 1;
      y := 2;
      goto foo, baz;
    baz:
      return z;
  }|;
  z := |{
    var a, b: int;
    var c: bool;
    foo: goto bar;
    bar: return z;
    baz: goto bar;
  }|;
  w := |{foo:return w;}|;
  x := if x then y else z <==> w;
  y := if x then if y then z else w else q;
  z := if a1 then if b1 then if c1 then c2 else c3 else b3 else if d1 then d2 else if e1 then e2 else e3;
  assert (forall x: bv64, y: bv64, y: bv64 :: true && true && true ==> (foo(x, y) == y || foo(foo(x, y), 1bv64) == y) && (if y == foo(x, y) then bar(x, baz(18446744073709551615bv64, y)) else quux(x, baz(18446744073709551615bv64, y))) ==> foo(bar(baz(x, y), foo(bar(x, y), y)), 0bv32 ++ 63bv32) == 1bv64);
  x := 1 + if x then y else z;
  y := if x then y else z + 1;
  x := 0x1234567890ABCDEFabcdef.1234567890ABCDEFabcdefe-16f32e64;
  x := 0x1234567890ABCDEFabcdef.1234567890ABCDEFabcdefe16f32e64;
  x := 0NaN32e64;
  x := 0nan32e64;
  x := 0+oo32e64;
  x := 0-oo32e64;
}

procedure bar(x: int, y: bool) returns (z: real);

type foo x y = int, bar, baz = bool;
type quux = real;

var foo: int;
