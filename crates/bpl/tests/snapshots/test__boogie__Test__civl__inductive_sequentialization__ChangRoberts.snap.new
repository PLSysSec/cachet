---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "pid",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "Pid",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Int,
                        ),
                    ),
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "n",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "n",
                    ),
                    op: Ge,
                    rhs: Nat(
                        "1",
                    ),
                },
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "4",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "channel",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "4",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "terminated",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "4",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "id",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "4",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "leader",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "pid",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "1",
                                ),
                                op: Le,
                                rhs: Var(
                                    "pid",
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "pid",
                                ),
                                op: Le,
                                rhs: Var(
                                    "n",
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "next",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: Some(
                IfThenElse(
                    IfThenElseExpr {
                        cond: Rel(
                            RelExpr {
                                lhs: Var(
                                    "pid",
                                ),
                                op: Lt,
                                rhs: Var(
                                    "n",
                                ),
                            },
                        ),
                        then: Term(
                            Term {
                                lhs: Var(
                                    "pid",
                                ),
                                op: Add,
                                rhs: Nat(
                                    "1",
                                ),
                            },
                        ),
                        else_: Nat(
                            "1",
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "prev",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: Some(
                IfThenElse(
                    IfThenElseExpr {
                        cond: Rel(
                            RelExpr {
                                lhs: Var(
                                    "pid",
                                ),
                                op: Gt,
                                rhs: Nat(
                                    "1",
                                ),
                            },
                        ),
                        then: Term(
                            Term {
                                lhs: Var(
                                    "pid",
                                ),
                                op: Sub,
                                rhs: Nat(
                                    "1",
                                ),
                            },
                        ),
                        else_: Var(
                            "n",
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "between",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "c",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "pid",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "pid",
                                                args: [
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "pid",
                                        args: [
                                            Var(
                                                "c",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "a",
                                                                ),
                                                                op: Lt,
                                                                rhs: Var(
                                                                    "b",
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "b",
                                                                ),
                                                                op: Lt,
                                                                rhs: Var(
                                                                    "c",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: Or,
                                                rhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "c",
                                                                ),
                                                                op: Lt,
                                                                rhs: Var(
                                                                    "a",
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "a",
                                                                ),
                                                                op: Lt,
                                                                rhs: Var(
                                                                    "b",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Lt,
                                                        rhs: Var(
                                                            "c",
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "c",
                                                        ),
                                                        op: Lt,
                                                        rhs: Var(
                                                            "a",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "c",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "b",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "betweenLeftEqual",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "c",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "pid",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "pid",
                                                args: [
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "pid",
                                        args: [
                                            Var(
                                                "c",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "a",
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "b",
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Lt,
                                                        rhs: Var(
                                                            "c",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "c",
                                                        ),
                                                        op: Lt,
                                                        rhs: Var(
                                                            "a",
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "a",
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "b",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b",
                                                ),
                                                op: Lt,
                                                rhs: Var(
                                                    "c",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "c",
                                                ),
                                                op: Lt,
                                                rhs: Var(
                                                    "a",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "max",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "id",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Logical(
                            LogicalExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "pid",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "max",
                                                    args: [
                                                        Var(
                                                            "id",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: And,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "i",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "pid",
                                                                    args: [
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "i",
                                                                    ),
                                                                    op: Neq,
                                                                    rhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "max",
                                                                            args: [
                                                                                Var(
                                                                                    "id",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "id",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Lt,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "id",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "max",
                                                                                        args: [
                                                                                            Var(
                                                                                                "id",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "pending_async",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "PA",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "P",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "PA",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "PInit",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "PA",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "EmptyChannel",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: Lambda,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "i",
                                            ],
                                            type_: Atom(
                                                Int,
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Nat(
                                "0",
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "NoPAs",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "PA",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: Lambda,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "pa",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Nat(
                                "0",
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Init",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pids",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "channel",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Map(
                                MapType {
                                    type_params: [],
                                    keys: [
                                        Atom(
                                            Int,
                                        ),
                                    ],
                                    value: Atom(
                                        Int,
                                    ),
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "terminated",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "id",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "leader",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "pids",
                                                        ),
                                                        op: Eq,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "MapConst",
                                                                args: [
                                                                    BoolLit(
                                                                        true,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "channel",
                                                        ),
                                                        op: Eq,
                                                        rhs: Quant(
                                                            QuantExpr {
                                                                kind: Lambda,
                                                                body: QuantBody {
                                                                    type_params: [],
                                                                    bound_vars: [
                                                                        AttrTypedIdentsWhere {
                                                                            attrs: [],
                                                                            typed_idents_where: TypedIdentsWhere {
                                                                                typed_idents: TypedIdents {
                                                                                    idents: [
                                                                                        "i",
                                                                                    ],
                                                                                    type_: Atom(
                                                                                        Int,
                                                                                    ),
                                                                                },
                                                                                where_: None,
                                                                            },
                                                                        },
                                                                    ],
                                                                    attrs: [],
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "EmptyChannel",
                                                                            args: [],
                                                                        },
                                                                    ),
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "terminated",
                                                ),
                                                op: Eq,
                                                rhs: Quant(
                                                    QuantExpr {
                                                        kind: Lambda,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "i",
                                                                            ],
                                                                            type_: Atom(
                                                                                Int,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: BoolLit(
                                                                false,
                                                            ),
                                                        },
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "leader",
                                        ),
                                        op: Eq,
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "i",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: BoolLit(
                                                        false,
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "j",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "id",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "id",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "j",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "i",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "j",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "4",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "MAIN3",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "channel",
                            "terminated",
                            "leader",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "channel",
                                                ),
                                                Var(
                                                    "terminated",
                                                ),
                                                Var(
                                                    "id",
                                                ),
                                                Var(
                                                    "leader",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "channel",
                                        "terminated",
                                        "leader",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "i",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "pid",
                                                                        args: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "i",
                                                                        ),
                                                                        op: Neq,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "max",
                                                                                args: [
                                                                                    Var(
                                                                                        "id",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Neg(
                                                            NegExpr {
                                                                op: Logical,
                                                                expr: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "leader",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "i",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "IS_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "INV2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "P",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "choice",
                                    params: [],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "choice",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "PA",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "channel",
                            "terminated",
                            "leader",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "pool",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "INV2",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "k",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "channel",
                                                ),
                                                Var(
                                                    "terminated",
                                                ),
                                                Var(
                                                    "id",
                                                ),
                                                Var(
                                                    "leader",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "channel",
                                        "terminated",
                                        "leader",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "INV2",
                                                        },
                                                    ),
                                                    Expr(
                                                        Var(
                                                            "k",
                                                        ),
                                                    ),
                                                    Expr(
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "next",
                                                                args: [
                                                                    Var(
                                                                        "k",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                    Expr(
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "n",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "choice",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "P",
                                                args: [
                                                    Var(
                                                        "k",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "pid",
                                                                            args: [
                                                                                Var(
                                                                                    "k",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Quant(
                                                                        QuantExpr {
                                                                            kind: ForAll,
                                                                            body: QuantBody {
                                                                                type_params: [],
                                                                                bound_vars: [
                                                                                    AttrTypedIdentsWhere {
                                                                                        attrs: [],
                                                                                        typed_idents_where: TypedIdentsWhere {
                                                                                            typed_idents: TypedIdents {
                                                                                                idents: [
                                                                                                    "i",
                                                                                                ],
                                                                                                type_: Atom(
                                                                                                    Int,
                                                                                                ),
                                                                                            },
                                                                                            where_: None,
                                                                                        },
                                                                                    },
                                                                                ],
                                                                                attrs: [],
                                                                                expr: Implies(
                                                                                    ImpliesExpr {
                                                                                        lhs: Logical(
                                                                                            LogicalExpr {
                                                                                                lhs: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "pid",
                                                                                                        args: [
                                                                                                            Var(
                                                                                                                "i",
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                                op: And,
                                                                                                rhs: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "between",
                                                                                                        args: [
                                                                                                            FuncCall(
                                                                                                                FuncCall {
                                                                                                                    target: "max",
                                                                                                                    args: [
                                                                                                                        Var(
                                                                                                                            "id",
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "i",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "k",
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        rhs: Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "terminated",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "i",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Quant(
                                                                QuantExpr {
                                                                    kind: ForAll,
                                                                    body: QuantBody {
                                                                        type_params: [],
                                                                        bound_vars: [
                                                                            AttrTypedIdentsWhere {
                                                                                attrs: [],
                                                                                typed_idents_where: TypedIdentsWhere {
                                                                                    typed_idents: TypedIdents {
                                                                                        idents: [
                                                                                            "i",
                                                                                        ],
                                                                                        type_: Atom(
                                                                                            Int,
                                                                                        ),
                                                                                    },
                                                                                    where_: None,
                                                                                },
                                                                            },
                                                                        ],
                                                                        attrs: [],
                                                                        expr: Implies(
                                                                            ImpliesExpr {
                                                                                lhs: Logical(
                                                                                    LogicalExpr {
                                                                                        lhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "pid",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "i",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: And,
                                                                                        rhs: Neg(
                                                                                            NegExpr {
                                                                                                op: Logical,
                                                                                                expr: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "between",
                                                                                                        args: [
                                                                                                            FuncCall(
                                                                                                                FuncCall {
                                                                                                                    target: "max",
                                                                                                                    args: [
                                                                                                                        Var(
                                                                                                                            "id",
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "i",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "k",
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                rhs: Neg(
                                                                                    NegExpr {
                                                                                        op: Logical,
                                                                                        expr: Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "terminated",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "i",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "PAs",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Quant(
                                                            QuantExpr {
                                                                kind: Lambda,
                                                                body: QuantBody {
                                                                    type_params: [],
                                                                    bound_vars: [
                                                                        AttrTypedIdentsWhere {
                                                                            attrs: [],
                                                                            typed_idents_where: TypedIdentsWhere {
                                                                                typed_idents: TypedIdents {
                                                                                    idents: [
                                                                                        "pa",
                                                                                    ],
                                                                                    type_: App(
                                                                                        TypeApp {
                                                                                            head: "PA",
                                                                                            tail: None,
                                                                                        },
                                                                                    ),
                                                                                },
                                                                                where_: None,
                                                                            },
                                                                        },
                                                                    ],
                                                                    attrs: [],
                                                                    expr: IfThenElse(
                                                                        IfThenElseExpr {
                                                                            cond: Logical(
                                                                                LogicalExpr {
                                                                                    lhs: Logical(
                                                                                        LogicalExpr {
                                                                                            lhs: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "is#P",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "pa",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            op: And,
                                                                                            rhs: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "pid",
                                                                                                    args: [
                                                                                                        FuncCall(
                                                                                                            FuncCall {
                                                                                                                target: "pid#P",
                                                                                                                args: [
                                                                                                                    Var(
                                                                                                                        "pa",
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    op: And,
                                                                                    rhs: Neg(
                                                                                        NegExpr {
                                                                                            op: Logical,
                                                                                            expr: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "between",
                                                                                                    args: [
                                                                                                        FuncCall(
                                                                                                            FuncCall {
                                                                                                                target: "max",
                                                                                                                args: [
                                                                                                                    Var(
                                                                                                                        "id",
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                        FuncCall(
                                                                                                            FuncCall {
                                                                                                                target: "pid#P",
                                                                                                                args: [
                                                                                                                    Var(
                                                                                                                        "pa",
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "k",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            then: Nat(
                                                                                "1",
                                                                            ),
                                                                            else_: Nat(
                                                                                "0",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Logical(
                                                                LogicalExpr {
                                                                    lhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "k",
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Term(
                                                                                Term {
                                                                                    lhs: Var(
                                                                                        "n",
                                                                                    ),
                                                                                    op: Add,
                                                                                    rhs: Nat(
                                                                                        "1",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Quant(
                                                                        QuantExpr {
                                                                            kind: ForAll,
                                                                            body: QuantBody {
                                                                                type_params: [],
                                                                                bound_vars: [
                                                                                    AttrTypedIdentsWhere {
                                                                                        attrs: [],
                                                                                        typed_idents_where: TypedIdentsWhere {
                                                                                            typed_idents: TypedIdents {
                                                                                                idents: [
                                                                                                    "i",
                                                                                                ],
                                                                                                type_: Atom(
                                                                                                    Int,
                                                                                                ),
                                                                                            },
                                                                                            where_: None,
                                                                                        },
                                                                                    },
                                                                                ],
                                                                                attrs: [],
                                                                                expr: Implies(
                                                                                    ImpliesExpr {
                                                                                        lhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "pid",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "i",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        rhs: Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "terminated",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "i",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "PAs",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "NoPAs",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "i",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "msg",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "pid",
                                                                        args: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "channel",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "msg",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Gt,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "msg",
                                                                        ),
                                                                        op: Le,
                                                                        rhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "id",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "max",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "id",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Quant(
                                                                    QuantExpr {
                                                                        kind: ForAll,
                                                                        body: QuantBody {
                                                                            type_params: [],
                                                                            bound_vars: [
                                                                                AttrTypedIdentsWhere {
                                                                                    attrs: [],
                                                                                    typed_idents_where: TypedIdentsWhere {
                                                                                        typed_idents: TypedIdents {
                                                                                            idents: [
                                                                                                "j",
                                                                                            ],
                                                                                            type_: Atom(
                                                                                                Int,
                                                                                            ),
                                                                                        },
                                                                                        where_: None,
                                                                                    },
                                                                                },
                                                                            ],
                                                                            attrs: [],
                                                                            expr: Implies(
                                                                                ImpliesExpr {
                                                                                    lhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "betweenLeftEqual",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "i",
                                                                                                ),
                                                                                                Var(
                                                                                                    "j",
                                                                                                ),
                                                                                                FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "max",
                                                                                                        args: [
                                                                                                            Var(
                                                                                                                "id",
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    rhs: Rel(
                                                                                        RelExpr {
                                                                                            lhs: Var(
                                                                                                "msg",
                                                                                            ),
                                                                                            op: Neq,
                                                                                            rhs: Array(
                                                                                                ArrayExpr {
                                                                                                    expr: Var(
                                                                                                        "id",
                                                                                                    ),
                                                                                                    subscripts: [
                                                                                                        ArraySubscript {
                                                                                                            keys: [
                                                                                                                Var(
                                                                                                                    "j",
                                                                                                                ),
                                                                                                            ],
                                                                                                            value: None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "i",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "pid",
                                                                        args: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "i",
                                                                        ),
                                                                        op: Neq,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "max",
                                                                                args: [
                                                                                    Var(
                                                                                        "id",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Neg(
                                                            NegExpr {
                                                                op: Logical,
                                                                expr: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "leader",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "i",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "IS_abstraction",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "P'",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "P",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "channel",
                            "terminated",
                            "leader",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "msg",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "pid",
                                            args: [
                                                Var(
                                                    "pid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "terminated",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "pid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "m",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "channel",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "pid",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "m",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Gt,
                                                                rhs: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "m",
                                                                ),
                                                                op: Le,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "id",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "max",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "id",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "j",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "pid",
                                                                        args: [
                                                                            Var(
                                                                                "j",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "between",
                                                                        args: [
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "max",
                                                                                    args: [
                                                                                        Var(
                                                                                            "id",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            Var(
                                                                                "j",
                                                                            ),
                                                                            Var(
                                                                                "pid",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "terminated",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "j",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "terminated",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "PAs",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "NoPAs",
                                                                args: [],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "channel",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "pid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "msg",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Gt,
                                                                    rhs: Nat(
                                                                        "0",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "channel",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "pid",
                                                                            ),
                                                                        ],
                                                                        [
                                                                            Var(
                                                                                "msg",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Term(
                                                                    Term {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "channel",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "pid",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "msg",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Sub,
                                                                        rhs: Nat(
                                                                            "1",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                StructuredCmd(
                                                    If(
                                                        IfCmd {
                                                            guard: Expr(
                                                                Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "msg",
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "id",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "pid",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                            then: [
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "leader",
                                                                                    subscripts: [
                                                                                        [
                                                                                            Var(
                                                                                                "pid",
                                                                                            ),
                                                                                        ],
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                BoolLit(
                                                                                    true,
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "terminated",
                                                                                    subscripts: [
                                                                                        [
                                                                                            Var(
                                                                                                "pid",
                                                                                            ),
                                                                                        ],
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                BoolLit(
                                                                                    true,
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "PAs",
                                                                                    subscripts: [],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "NoPAs",
                                                                                        args: [],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                            else_: Some(
                                                                Else(
                                                                    [
                                                                        StructuredCmd(
                                                                            If(
                                                                                IfCmd {
                                                                                    guard: Expr(
                                                                                        Rel(
                                                                                            RelExpr {
                                                                                                lhs: Var(
                                                                                                    "msg",
                                                                                                ),
                                                                                                op: Gt,
                                                                                                rhs: Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Var(
                                                                                                            "id",
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "pid",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                    then: [
                                                                                        LabelOrCmd(
                                                                                            Assign(
                                                                                                AssignCmd {
                                                                                                    lhs: [
                                                                                                        AssignLhs {
                                                                                                            ident: "channel",
                                                                                                            subscripts: [
                                                                                                                [
                                                                                                                    FuncCall(
                                                                                                                        FuncCall {
                                                                                                                            target: "next",
                                                                                                                            args: [
                                                                                                                                Var(
                                                                                                                                    "pid",
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ),
                                                                                                                ],
                                                                                                                [
                                                                                                                    Var(
                                                                                                                        "msg",
                                                                                                                    ),
                                                                                                                ],
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                    rhs: [
                                                                                                        Term(
                                                                                                            Term {
                                                                                                                lhs: Array(
                                                                                                                    ArrayExpr {
                                                                                                                        expr: Var(
                                                                                                                            "channel",
                                                                                                                        ),
                                                                                                                        subscripts: [
                                                                                                                            ArraySubscript {
                                                                                                                                keys: [
                                                                                                                                    FuncCall(
                                                                                                                                        FuncCall {
                                                                                                                                            target: "next",
                                                                                                                                            args: [
                                                                                                                                                Var(
                                                                                                                                                    "pid",
                                                                                                                                                ),
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                value: None,
                                                                                                                            },
                                                                                                                            ArraySubscript {
                                                                                                                                keys: [
                                                                                                                                    Var(
                                                                                                                                        "msg",
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                value: None,
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    },
                                                                                                                ),
                                                                                                                op: Add,
                                                                                                                rhs: Nat(
                                                                                                                    "1",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                    else_: None,
                                                                                },
                                                                            ),
                                                                        ),
                                                                        LabelOrCmd(
                                                                            Assign(
                                                                                AssignCmd {
                                                                                    lhs: [
                                                                                        AssignLhs {
                                                                                            ident: "PAs",
                                                                                            subscripts: [],
                                                                                        },
                                                                                    ],
                                                                                    rhs: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "NoPAs",
                                                                                                        args: [],
                                                                                                    },
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            FuncCall(
                                                                                                                FuncCall {
                                                                                                                    target: "P",
                                                                                                                    args: [
                                                                                                                        Var(
                                                                                                                            "pid",
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: Some(
                                                                                                            Nat(
                                                                                                                "1",
                                                                                                            ),
                                                                                                        ),
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ],
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "IS",
                            params: [
                                String(
                                    StringLit {
                                        text: "MAIN3",
                                    },
                                ),
                                String(
                                    StringLit {
                                        text: "INV2",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "elim",
                            params: [
                                String(
                                    StringLit {
                                        text: "P",
                                    },
                                ),
                                String(
                                    StringLit {
                                        text: "P'",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "MAIN2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "P",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "channel",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "channel",
                                                ),
                                                Var(
                                                    "terminated",
                                                ),
                                                Var(
                                                    "id",
                                                ),
                                                Var(
                                                    "leader",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "INV2",
                                                        },
                                                    ),
                                                    Expr(
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "next",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "max",
                                                                            args: [
                                                                                Var(
                                                                                    "id",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "channel",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "i",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Nat(
                                                                            "1",
                                                                        ),
                                                                        op: Le,
                                                                        rhs: Var(
                                                                            "i",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "i",
                                                                        ),
                                                                        op: Le,
                                                                        rhs: Var(
                                                                            "n",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "channel",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "next",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "i",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: FuncCall(
                                                                            FuncCall {
                                                                                target: "EmptyChannel",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "id",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "i",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: Some(
                                                                                    Nat(
                                                                                        "1",
                                                                                    ),
                                                                                ),
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "i",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "i",
                                                                        ),
                                                                        op: Lt,
                                                                        rhs: Nat(
                                                                            "1",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: Or,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "i",
                                                                        ),
                                                                        op: Gt,
                                                                        rhs: Var(
                                                                            "n",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "channel",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "i",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "EmptyChannel",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "pa",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "PA",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: IfThenElse(
                                                        IfThenElseExpr {
                                                            cond: Logical(
                                                                LogicalExpr {
                                                                    lhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "is#P",
                                                                            args: [
                                                                                Var(
                                                                                    "pa",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "pid",
                                                                            args: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid#P",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pa",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            then: Nat(
                                                                "1",
                                                            ),
                                                            else_: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "i",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "msg",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "pid",
                                                                        args: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "channel",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "msg",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Gt,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "msg",
                                                                ),
                                                                op: Eq,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "id",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "prev",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "i",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "IS_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "INV1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "PInit",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "P",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "choice",
                                    params: [],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "choice",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "PA",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "channel",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "pool",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "INV1",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "k",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "channel",
                                                ),
                                                Var(
                                                    "terminated",
                                                ),
                                                Var(
                                                    "id",
                                                ),
                                                Var(
                                                    "leader",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "channel",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "INV1",
                                                        },
                                                    ),
                                                    Expr(
                                                        Var(
                                                            "k",
                                                        ),
                                                    ),
                                                    Expr(
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "k",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "PInit",
                                                        },
                                                    ),
                                                    Expr(
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "PInit",
                                                                args: [
                                                                    Var(
                                                                        "n",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "pid",
                                                    args: [
                                                        Var(
                                                            "k",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "k",
                                                    ),
                                                    op: Eq,
                                                    rhs: Nat(
                                                        "0",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Quant(
                                                        QuantExpr {
                                                            kind: ForAll,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "i",
                                                                                ],
                                                                                type_: Atom(
                                                                                    Int,
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: Implies(
                                                                    ImpliesExpr {
                                                                        lhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Nat(
                                                                                            "1",
                                                                                        ),
                                                                                        op: Le,
                                                                                        rhs: Var(
                                                                                            "i",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "i",
                                                                                        ),
                                                                                        op: Le,
                                                                                        rhs: Var(
                                                                                            "k",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "channel",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "next",
                                                                                                            args: [
                                                                                                                Var(
                                                                                                                    "i",
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Eq,
                                                                                rhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "EmptyChannel",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Array(
                                                                                                        ArrayExpr {
                                                                                                            expr: Var(
                                                                                                                "id",
                                                                                                            ),
                                                                                                            subscripts: [
                                                                                                                ArraySubscript {
                                                                                                                    keys: [
                                                                                                                        Var(
                                                                                                                            "i",
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    value: None,
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                                value: Some(
                                                                                                    Nat(
                                                                                                        "1",
                                                                                                    ),
                                                                                                ),
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Quant(
                                                        QuantExpr {
                                                            kind: ForAll,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "i",
                                                                                ],
                                                                                type_: Atom(
                                                                                    Int,
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: Implies(
                                                                    ImpliesExpr {
                                                                        lhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "k",
                                                                                        ),
                                                                                        op: Lt,
                                                                                        rhs: Var(
                                                                                            "i",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "i",
                                                                                        ),
                                                                                        op: Le,
                                                                                        rhs: Var(
                                                                                            "n",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "channel",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "next",
                                                                                                            args: [
                                                                                                                Var(
                                                                                                                    "i",
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Eq,
                                                                                rhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "EmptyChannel",
                                                                                        args: [],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "i",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "i",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Nat(
                                                                                    "1",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: Or,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "i",
                                                                                ),
                                                                                op: Gt,
                                                                                rhs: Var(
                                                                                    "n",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "channel",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "EmptyChannel",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "pool",
                                                                        params: [
                                                                            String(
                                                                                StringLit {
                                                                                    text: "PInit",
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "pa",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "PA",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: IfThenElse(
                                                        IfThenElseExpr {
                                                            cond: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "is#PInit",
                                                                                    args: [
                                                                                        Var(
                                                                                            "pa",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "k",
                                                                                    ),
                                                                                    op: Lt,
                                                                                    rhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "pid#PInit",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "pa",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "pid#PInit",
                                                                                    args: [
                                                                                        Var(
                                                                                            "pa",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Le,
                                                                            rhs: Var(
                                                                                "n",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            then: Nat(
                                                                "1",
                                                            ),
                                                            else_: IfThenElse(
                                                                IfThenElseExpr {
                                                                    cond: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Logical(
                                                                                LogicalExpr {
                                                                                    lhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "is#P",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "pa",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: And,
                                                                                    rhs: Rel(
                                                                                        RelExpr {
                                                                                            lhs: Nat(
                                                                                                "1",
                                                                                            ),
                                                                                            op: Le,
                                                                                            rhs: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "pid#P",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "pa",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "pid#P",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "pa",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: Le,
                                                                                    rhs: Var(
                                                                                        "k",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    then: Nat(
                                                                        "1",
                                                                    ),
                                                                    else_: Nat(
                                                                        "0",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "choice",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "PInit",
                                                args: [
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "k",
                                                            ),
                                                            op: Add,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "IS",
                            params: [
                                String(
                                    StringLit {
                                        text: "MAIN2",
                                    },
                                ),
                                String(
                                    StringLit {
                                        text: "INV1",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "elim",
                            params: [
                                String(
                                    StringLit {
                                        text: "PInit",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "MAIN1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "PInit",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "channel",
                                                ),
                                                Var(
                                                    "terminated",
                                                ),
                                                Var(
                                                    "id",
                                                ),
                                                Var(
                                                    "leader",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "INV1",
                                                        },
                                                    ),
                                                    Expr(
                                                        Nat(
                                                            "0",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "pa",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "PA",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: IfThenElse(
                                                        IfThenElseExpr {
                                                            cond: Logical(
                                                                LogicalExpr {
                                                                    lhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "is#PInit",
                                                                            args: [
                                                                                Var(
                                                                                    "pa",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "pid",
                                                                            args: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid#PInit",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pa",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            then: Nat(
                                                                "1",
                                                            ),
                                                            else_: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "PInit",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "P",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "channel",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "pid",
                                            args: [
                                                Var(
                                                    "pid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "channel",
                                            subscripts: [
                                                [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "next",
                                                            args: [
                                                                Var(
                                                                    "pid",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                [
                                                    Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "id",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "pid",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "channel",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "next",
                                                                            args: [
                                                                                Var(
                                                                                    "pid",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                            ArraySubscript {
                                                                keys: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "id",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "pid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "NoPAs",
                                                        args: [],
                                                    },
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "P",
                                                                    args: [
                                                                        Var(
                                                                            "pid",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        value: Some(
                                                            Nat(
                                                                "1",
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "P",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "P",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "channel",
                            "terminated",
                            "leader",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "msg",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "pid",
                                            args: [
                                                Var(
                                                    "pid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "terminated",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "pid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "m",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "channel",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "pid",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "m",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Gt,
                                                                rhs: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "m",
                                                                ),
                                                                op: Le,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "id",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "max",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "id",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "terminated",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "PAs",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "NoPAs",
                                                                args: [],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "channel",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "pid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "msg",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Gt,
                                                                    rhs: Nat(
                                                                        "0",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "channel",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "pid",
                                                                            ),
                                                                        ],
                                                                        [
                                                                            Var(
                                                                                "msg",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Term(
                                                                    Term {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "channel",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "pid",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "msg",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Sub,
                                                                        rhs: Nat(
                                                                            "1",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                StructuredCmd(
                                                    If(
                                                        IfCmd {
                                                            guard: Expr(
                                                                Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "msg",
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "id",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "pid",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                            then: [
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "leader",
                                                                                    subscripts: [
                                                                                        [
                                                                                            Var(
                                                                                                "pid",
                                                                                            ),
                                                                                        ],
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                BoolLit(
                                                                                    true,
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "terminated",
                                                                                    subscripts: [
                                                                                        [
                                                                                            Var(
                                                                                                "pid",
                                                                                            ),
                                                                                        ],
                                                                                    ],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                BoolLit(
                                                                                    true,
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "PAs",
                                                                                    subscripts: [],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "NoPAs",
                                                                                        args: [],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                            else_: Some(
                                                                Else(
                                                                    [
                                                                        StructuredCmd(
                                                                            If(
                                                                                IfCmd {
                                                                                    guard: Expr(
                                                                                        Rel(
                                                                                            RelExpr {
                                                                                                lhs: Var(
                                                                                                    "msg",
                                                                                                ),
                                                                                                op: Gt,
                                                                                                rhs: Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Var(
                                                                                                            "id",
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "pid",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                    then: [
                                                                                        LabelOrCmd(
                                                                                            Assign(
                                                                                                AssignCmd {
                                                                                                    lhs: [
                                                                                                        AssignLhs {
                                                                                                            ident: "channel",
                                                                                                            subscripts: [
                                                                                                                [
                                                                                                                    FuncCall(
                                                                                                                        FuncCall {
                                                                                                                            target: "next",
                                                                                                                            args: [
                                                                                                                                Var(
                                                                                                                                    "pid",
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ),
                                                                                                                ],
                                                                                                                [
                                                                                                                    Var(
                                                                                                                        "msg",
                                                                                                                    ),
                                                                                                                ],
                                                                                                            ],
                                                                                                        },
                                                                                                    ],
                                                                                                    rhs: [
                                                                                                        Term(
                                                                                                            Term {
                                                                                                                lhs: Array(
                                                                                                                    ArrayExpr {
                                                                                                                        expr: Var(
                                                                                                                            "channel",
                                                                                                                        ),
                                                                                                                        subscripts: [
                                                                                                                            ArraySubscript {
                                                                                                                                keys: [
                                                                                                                                    FuncCall(
                                                                                                                                        FuncCall {
                                                                                                                                            target: "next",
                                                                                                                                            args: [
                                                                                                                                                Var(
                                                                                                                                                    "pid",
                                                                                                                                                ),
                                                                                                                                            ],
                                                                                                                                        },
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                value: None,
                                                                                                                            },
                                                                                                                            ArraySubscript {
                                                                                                                                keys: [
                                                                                                                                    Var(
                                                                                                                                        "msg",
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                value: None,
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    },
                                                                                                                ),
                                                                                                                op: Add,
                                                                                                                rhs: Nat(
                                                                                                                    "1",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                    else_: None,
                                                                                },
                                                                            ),
                                                                        ),
                                                                        LabelOrCmd(
                                                                            Assign(
                                                                                AssignCmd {
                                                                                    lhs: [
                                                                                        AssignLhs {
                                                                                            ident: "PAs",
                                                                                            subscripts: [],
                                                                                        },
                                                                                    ],
                                                                                    rhs: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "NoPAs",
                                                                                                        args: [],
                                                                                                    },
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            FuncCall(
                                                                                                                FuncCall {
                                                                                                                    target: "P",
                                                                                                                    args: [
                                                                                                                        Var(
                                                                                                                            "pid",
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: Some(
                                                                                                            Nat(
                                                                                                                "1",
                                                                                                            ),
                                                                                                        ),
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ],
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "MAIN1",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "main",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "Init",
                                args: [
                                    Var(
                                        "pids",
                                    ),
                                    Var(
                                        "channel",
                                    ),
                                    Var(
                                        "terminated",
                                    ),
                                    Var(
                                        "id",
                                    ),
                                    Var(
                                        "leader",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "pending_async",
                                        params: [],
                                    },
                                ),
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "1",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "PAs",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "PA",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "pid",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "pid",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "pid",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "pids'",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "pids'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "pids",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "i",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "1",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "n",
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "cooperates",
                                                        params: [],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "1",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Le,
                                                            rhs: Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "n",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "ii",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "pid",
                                                                                args: [
                                                                                    Var(
                                                                                        "ii",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "ii",
                                                                                ),
                                                                                op: Ge,
                                                                                rhs: Var(
                                                                                    "i",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "pids'",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "ii",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "PAs",
                                                    ),
                                                    op: Eq,
                                                    rhs: Quant(
                                                        QuantExpr {
                                                            kind: Lambda,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "pa",
                                                                                ],
                                                                                type_: App(
                                                                                    TypeApp {
                                                                                        head: "PA",
                                                                                        tail: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: IfThenElse(
                                                                    IfThenElseExpr {
                                                                        cond: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Logical(
                                                                                    LogicalExpr {
                                                                                        lhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "is#PInit",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "pa",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: And,
                                                                                        rhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "pid",
                                                                                                args: [
                                                                                                    FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "pid#PInit",
                                                                                                            args: [
                                                                                                                Var(
                                                                                                                    "pa",
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "pid#PInit",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "pa",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Lt,
                                                                                        rhs: Var(
                                                                                            "i",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        then: Nat(
                                                                            "1",
                                                                        ),
                                                                        else_: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "pid",
                                                            "pids'",
                                                        ],
                                                        target: "linear_transfer",
                                                        params: [
                                                            Var(
                                                                "i",
                                                            ),
                                                            Var(
                                                                "pids'",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "pinit",
                                                        params: [
                                                            Var(
                                                                "pid",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: true,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "i",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "PInit",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "pinit",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "pid",
                                args: [
                                    Var(
                                        "pid",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "m",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "m",
                                        ],
                                        target: "get_id",
                                        params: [
                                            Var(
                                                "pid",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "send",
                                        params: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "next",
                                                    args: [
                                                        Var(
                                                            "pid",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "m",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "p",
                                        params: [
                                            Var(
                                                "pid",
                                            ),
                                        ],
                                    },
                                    is_async: true,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "P",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "p",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "pid",
                                args: [
                                    Var(
                                        "pid",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "m",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "i",
                                        ],
                                        target: "get_id",
                                        params: [
                                            Var(
                                                "pid",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "m",
                                        ],
                                        target: "receive",
                                        params: [
                                            Var(
                                                "pid",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "m",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "i",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "set_leader",
                                                        params: [
                                                            Var(
                                                                "pid",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "set_terminated",
                                                        params: [
                                                            Var(
                                                                "pid",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                StructuredCmd(
                                                    If(
                                                        IfCmd {
                                                            guard: Expr(
                                                                Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "m",
                                                                        ),
                                                                        op: Gt,
                                                                        rhs: Var(
                                                                            "i",
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                            then: [
                                                                LabelOrCmd(
                                                                    Call(
                                                                        CallCmd {
                                                                            attrs: [],
                                                                            call_params: CallParams {
                                                                                returns: [],
                                                                                target: "send",
                                                                                params: [
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "next",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "pid",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    Var(
                                                                                        "m",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                            is_async: false,
                                                                            is_free: false,
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                            else_: None,
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Call(
                                                        CallCmd {
                                                            attrs: [],
                                                            call_params: CallParams {
                                                                returns: [],
                                                                target: "p",
                                                                params: [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                            },
                                                            is_async: true,
                                                            is_free: false,
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "intro",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "set_terminated",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "terminated",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "terminated",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            true,
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "GET_ID",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "i",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "id",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "pid",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SET_LEADER",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "leader",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "leader",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            true,
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SEND",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "m",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "channel",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "channel",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "m",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "channel",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "m",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "right",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "RECEIVE",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "m",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "channel",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "channel",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "pid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "m",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "channel",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "m",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "channel",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "m",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Sub,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "GET_ID",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "get_id",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "SET_LEADER",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "set_leader",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "SEND",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "send",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "m",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "RECEIVE",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "receive",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "m",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "LINEAR_TRANSFER",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "p",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids'",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "pids",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "i",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "p",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "i",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "pids'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "pids",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "i",
                                                            ),
                                                        ],
                                                        value: Some(
                                                            BoolLit(
                                                                false,
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "LINEAR_TRANSFER",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "linear_transfer",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "p",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids'",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
]

[Printed]
type {:linear "pid"} Pid = int;

const n: int;

axiom n >= 1;

var {:layer 0, 4} channel: [int][int]int;

var {:layer 1, 4} terminated: [int]bool;

var {:layer 0, 4} id: [int]int;

var {:layer 0, 4} leader: [int]bool;

function {:inline} pid(pid: int): bool {
  1 <= pid && pid <= n
}

function {:inline} next(pid: int): int {
  if pid < n then pid + 1 else 1
}

function {:inline} prev(pid: int): int {
  if pid > 1 then pid - 1 else n
}

function {:inline} between(a: int, b: int, c: int): bool {
  pid(a) && pid(b) && pid(c) && ((a < b && b < c) || (c < a && a < b) || (b < c && c < a) || (a == c && a != b))
}

function {:inline} betweenLeftEqual(a: int, b: int, c: int): bool {
  pid(a) && pid(b) && pid(c) && ((a <= b && b < c) || (c < a && a <= b) || (b < c && c < a))
}

function max([int]int): int;

axiom (forall id: [int]int :: pid(max(id)) && (forall i: int :: pid(i) && i != max(id) ==> id[i] < id[max(id)]));

type {:pending_async} {:datatype} PA;

function {:constructor} P(pid: int): PA;

function {:constructor} PInit(pid: int): PA;

function EmptyChannel(): [int]int {
  (lambda i: int :: 0)
}

function NoPAs(): [PA]int {
  (lambda pa: PA :: 0)
}

function {:inline} Init(pids: [int]bool, channel: [int][int]int, terminated: [int]bool, id: [int]int, leader: [int]bool): bool {
  pids == MapConst(true) && channel == (lambda i: int :: EmptyChannel()) && terminated == (lambda i: int :: false) && leader == (lambda i: int :: false) && (forall i: int, j: int :: id[i] == id[j] ==> i == j)
}

procedure {:atomic} {:layer 4} MAIN3({:linear_in "pid"} pids: [int]bool)
  modifies channel, terminated, leader;
{
  assert Init(pids, channel, terminated, id, leader);
  havoc channel, terminated, leader;
  assume (forall i: int :: pid(i) && i != max(id) ==> !leader[i]);
}

procedure {:IS_invariant} {:layer 3} INV2({:linear_in "pid"} pids: [int]bool) returns ({:pending_async "P"} PAs: [PA]int, {:choice} choice: PA)
  modifies channel, terminated, leader;
{
  var {:pool "INV2"} k: int;

  assert Init(pids, channel, terminated, id, leader);
  havoc channel, terminated, leader;
  assume {:add_to_pool "INV2", k, next(k), n + 1} true;
  choice := P(k);
  if (*) {
    assume pid(k) && (forall i: int :: pid(i) && between(max(id), i, k) ==> terminated[i]) && (forall i: int :: pid(i) && !between(max(id), i, k) ==> !terminated[i]);
    PAs := (lambda pa: PA :: if is#P(pa) && pid(pid#P(pa)) && !between(max(id), pid#P(pa), k) then 1 else 0);
  } else {
    assume k == n + 1 && (forall i: int :: pid(i) ==> terminated[i]);
    PAs := NoPAs();
  }
  assume (forall i: int, msg: int :: pid(i) && channel[i][msg] > 0 ==> msg <= id[max(id)] && (forall j: int :: betweenLeftEqual(i, j, max(id)) ==> msg != id[j]));
  assume (forall i: int :: pid(i) && i != max(id) ==> !leader[i]);
}

procedure {:IS_abstraction} {:layer 3} P'({:linear_in "pid"} pid: int) returns ({:pending_async "P"} PAs: [PA]int)
  modifies channel, terminated, leader;
{
  var msg: int;

  assert pid(pid);
  assert !terminated[pid];
  assert (forall m: int :: channel[pid][m] > 0 ==> m <= id[max(id)]);
  assert (forall j: int :: pid(j) && between(max(id), j, pid) ==> terminated[j]);
  if (*) {
    terminated[pid] := true;
    PAs := NoPAs();
  } else {
    assume channel[pid][msg] > 0;
    channel[pid][msg] := channel[pid][msg] - 1;
    if (msg == id[pid]) {
      leader[pid] := true;
      terminated[pid] := true;
      PAs := NoPAs();
    } else {
      if (msg > id[pid]) {
        channel[next(pid)][msg] := channel[next(pid)][msg] + 1;
      }
      PAs := NoPAs()[P(pid) := 1];
    }
  }
}

procedure {:atomic} {:layer 3} {:IS "MAIN3", "INV2"} {:elim "P", "P'"} MAIN2({:linear_in "pid"} pids: [int]bool) returns ({:pending_async "P"} PAs: [PA]int)
  modifies channel;
{
  assert Init(pids, channel, terminated, id, leader);
  assume {:add_to_pool "INV2", next(max(id))} true;
  havoc channel;
  assume (forall i: int :: 1 <= i && i <= n ==> channel[next(i)] == EmptyChannel()[id[i] := 1]);
  assume (forall i: int :: i < 1 || i > n ==> channel[i] == EmptyChannel());
  PAs := (lambda pa: PA :: if is#P(pa) && pid(pid#P(pa)) then 1 else 0);
  assume (forall i: int, msg: int :: pid(i) && channel[i][msg] > 0 ==> msg == id[prev(i)]);
}

procedure {:IS_invariant} {:layer 2} INV1({:linear_in "pid"} pids: [int]bool) returns ({:pending_async "PInit", "P"} PAs: [PA]int, {:choice} choice: PA)
  modifies channel;
{
  var {:pool "INV1"} k: int;

  assert Init(pids, channel, terminated, id, leader);
  havoc channel;
  assume {:add_to_pool "INV1", k, k + 1} {:add_to_pool "PInit", PInit(n)} pid(k) || k == 0;
  assume (forall i: int :: 1 <= i && i <= k ==> channel[next(i)] == EmptyChannel()[id[i] := 1]) && (forall i: int :: k < i && i <= n ==> channel[next(i)] == EmptyChannel()) && (forall i: int :: i < 1 || i > n ==> channel[i] == EmptyChannel());
  PAs := (lambda {:pool "PInit"} pa: PA :: if is#PInit(pa) && k < pid#PInit(pa) && pid#PInit(pa) <= n then 1 else if is#P(pa) && 1 <= pid#P(pa) && pid#P(pa) <= k then 1 else 0);
  choice := PInit(k + 1);
}

procedure {:atomic} {:layer 2} {:IS "MAIN2", "INV1"} {:elim "PInit"} MAIN1({:linear_in "pid"} pids: [int]bool) returns ({:pending_async "PInit"} PAs: [PA]int) {
  assert Init(pids, channel, terminated, id, leader);
  assume {:add_to_pool "INV1", 0} true;
  PAs := (lambda pa: PA :: if is#PInit(pa) && pid(pid#PInit(pa)) then 1 else 0);
}

procedure {:left} {:layer 2} PInit({:linear_in "pid"} pid: int) returns ({:pending_async "P"} PAs: [PA]int)
  modifies channel;
{
  assert pid(pid);
  channel[next(pid)][id[pid]] := channel[next(pid)][id[pid]] + 1;
  PAs := NoPAs()[P(pid) := 1];
}

procedure {:atomic} {:layer 2, 3} P({:linear_in "pid"} pid: int) returns ({:pending_async "P"} PAs: [PA]int)
  modifies channel, terminated, leader;
{
  var msg: int;

  assert pid(pid);
  assert !terminated[pid];
  assert (forall m: int :: channel[pid][m] > 0 ==> m <= id[max(id)]);
  if (*) {
    terminated[pid] := true;
    PAs := NoPAs();
  } else {
    assume channel[pid][msg] > 0;
    channel[pid][msg] := channel[pid][msg] - 1;
    if (msg == id[pid]) {
      leader[pid] := true;
      terminated[pid] := true;
      PAs := NoPAs();
    } else {
      if (msg > id[pid]) {
        channel[next(pid)][msg] := channel[next(pid)][msg] + 1;
      }
      PAs := NoPAs()[P(pid) := 1];
    }
  }
}

procedure {:yields} {:layer 1} {:refines "MAIN1"} main({:linear_in "pid"} pids: [int]bool)
  requires {:layer 1} Init(pids, channel, terminated, id, leader);
{
  var {:pending_async} {:layer 1} PAs: [PA]int;
  var {:linear "pid"} pid: int;
  var {:linear "pid"} pids': [int]bool;
  var i: int;

  pids' := pids;
  i := 1;
  while (i <= n)
    invariant {:layer 1} {:cooperates} true;
    invariant {:layer 1} 1 <= i && i <= n + 1;
    invariant {:layer 1} (forall ii: int :: pid(ii) && ii >= i ==> pids'[ii]);
    invariant {:layer 1} PAs == (lambda pa: PA :: if is#PInit(pa) && pid(pid#PInit(pa)) && pid#PInit(pa) < i then 1 else 0);
  {
    call pid, pids' := linear_transfer(i, pids');
    async call pinit(pid);
    i := i + 1;
  }
}

procedure {:yields} {:layer 1} {:refines "PInit"} pinit({:linear_in "pid"} pid: int)
  requires {:layer 1} pid(pid);
{
  var m: int;

  call m := get_id(pid);
  call send(next(pid), m);
  async call p(pid);
}

procedure {:yields} {:layer 1} {:refines "P"} p({:linear_in "pid"} pid: int)
  requires {:layer 1} pid(pid);
{
  var m: int;
  var i: int;

  call i := get_id(pid);
  call m := receive(pid);
  if (m == i) {
    call set_leader(pid);
    call set_terminated(pid);
  } else {
    if (m > i) {
      call send(next(pid), m);
    }
    async call p(pid);
  }
}

procedure {:intro} {:layer 1} set_terminated(pid: int)
  modifies terminated;
{
  terminated[pid] := true;
}

procedure {:both} {:layer 1} GET_ID({:linear "pid"} pid: int) returns (i: int) {
  i := id[pid];
}

procedure {:both} {:layer 1} SET_LEADER({:linear "pid"} pid: int)
  modifies leader;
{
  leader[pid] := true;
}

procedure {:left} {:layer 1} SEND(pid: int, m: int)
  modifies channel;
{
  channel[pid][m] := channel[pid][m] + 1;
}

procedure {:right} {:layer 1} RECEIVE(pid: int) returns (m: int)
  modifies channel;
{
  assume channel[pid][m] > 0;
  channel[pid][m] := channel[pid][m] - 1;
}

procedure {:yields} {:layer 0} {:refines "GET_ID"} get_id({:linear "pid"} pid: int) returns (i: int);

procedure {:yields} {:layer 0} {:refines "SET_LEADER"} set_leader({:linear "pid"} pid: int);

procedure {:yields} {:layer 0} {:refines "SEND"} send(pid: int, m: int);

procedure {:yields} {:layer 0} {:refines "RECEIVE"} receive(pid: int) returns (m: int);

procedure {:both} {:layer 1} LINEAR_TRANSFER(i: int, {:linear_in "pid"} pids: [int]bool) returns ({:linear "pid"} p: int, {:linear "pid"} pids': [int]bool) {
  assert pids[i];
  p := i;
  pids' := pids[i := false];
}

procedure {:yields} {:layer 0} {:refines "LINEAR_TRANSFER"} linear_transfer(i: int, {:linear_in "pid"} pids: [int]bool) returns ({:linear "pid"} p: int, {:linear "pid"} pids': [int]bool);

[Input - ../../vendor/boogie/Test/civl/inductive-sequentialization/ChangRoberts.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

type {:linear "pid"} Pid = int;
const n:int;
axiom n >= 1;

var {:layer 0,4} channel:[int][int]int;  // (pid x msg) -> count
var {:layer 1,4} terminated:[int]bool;   // Ghost var to keep terminated node info
var {:layer 0,4} id:[int]int;            // pid -> ID
var {:layer 0,4} leader:[int]bool;       // leader[pid] iff pid is a leader

function {:inline} pid (pid:int) : bool { 1 <= pid && pid <= n }

function {:inline} next (pid:int) : int { if pid < n then pid + 1 else 1 }
function {:inline} prev (pid:int) : int { if pid > 1 then pid - 1 else n }

// True iff b is between a and c in a ring, excluding the boundaries
// Between relation is assumed to be growing such that when a == c, every b in the ring is between a and c
function {:inline} between (a:int, b:int, c:int) : bool
{
  pid(a) && pid(b) && pid(c) &&
  (
    (a < b && b < c) ||
    (c < a && a < b) ||
    (b < c && c < a) ||
    (a == c && a != b)
  )
}

// True iff b is between a and c excluding only c
// Between relation is assumed to be growing such that when a == c, every b in the ring is between a and c
function {:inline} betweenLeftEqual (a:int, b:int, c:int) : bool
{
  pid(a) && pid(b) && pid(c) &&
  (
    (a <= b && b < c) ||
    (c < a && a <= b) ||
    (b < c && c < a)
  )
}

// Returns pid with maximum id number
function max ([int]int) : int;
axiom (forall id:[int]int :: pid(max(id)) && (forall i:int :: pid(i) && i != max(id) ==> id[i] < id[max(id)]));

// A type for keeping track of pending asyncs
type {:pending_async}{:datatype} PA;
function {:constructor} P(pid:int) : PA;
function {:constructor} PInit(pid:int) : PA;

function EmptyChannel() : [int]int { (lambda i:int :: 0) }
function NoPAs() : [PA]int { (lambda pa:PA :: 0) }

////////////////////////////////////////////////////////////////////////////////

function {:inline} Init(pids:[int]bool, channel:[int][int]int,
  terminated:[int]bool, id:[int]int, leader:[int]bool) : bool
{
  pids == MapConst(true) &&
  channel == (lambda i:int :: EmptyChannel()) &&
  terminated == (lambda i:int :: false) &&
  leader == (lambda i:int :: false) &&
  (forall i:int, j:int :: id[i] == id[j] ==> i == j)
}

////////////////////////////////////////////////////////////////////////////////

procedure {:atomic}{:layer 4}
MAIN3 ({:linear_in "pid"} pids:[int]bool)
returns ()
modifies channel, terminated, leader;
{
  assert Init(pids, channel, terminated, id, leader);
  havoc channel, terminated, leader;
  assume (forall i:int :: pid(i) && i != max(id) ==> !leader[i]);
}

procedure {:IS_invariant}{:layer 3}
INV2 ({:linear_in "pid"} pids:[int]bool)
returns ({:pending_async "P"} PAs:[PA]int, {:choice} choice:PA)
modifies channel, terminated, leader;
{
  var {:pool "INV2"} k: int;
  assert Init(pids, channel, terminated, id, leader);

  havoc channel, terminated, leader;

  assume
    {:add_to_pool "INV2", k, next(k), n+1}
    true;

  choice := P(k);
  if (*) {
    assume
      pid(k) &&
      (forall i:int :: pid(i) && between(max(id),i,k) ==> terminated[i]) &&
      (forall i:int :: pid(i) && !between(max(id),i,k) ==> !terminated[i]);
    PAs := (lambda pa:PA :: if is#P(pa) && pid(pid#P(pa)) && !between(max(id), pid#P(pa), k) then 1 else 0);
  } else {
    assume
      k == n + 1 &&
      (forall i:int :: pid(i) ==> terminated[i]);
    PAs := NoPAs();
  }


  assume (forall i:int, msg:int :: pid(i) && channel[i][msg] > 0 ==> msg <= id[max(id)] && (forall j:int:: betweenLeftEqual(i,j,max(id)) ==> msg != id[j]));
  assume (forall i:int :: pid(i) && i != max(id) ==> !leader[i]);
}

procedure {:IS_abstraction}{:layer 3}
P' ({:linear_in "pid"} pid:int)
returns ({:pending_async "P"} PAs:[PA]int)
modifies channel, terminated, leader;
{
  var msg:int;

  assert pid(pid);
  assert !terminated[pid];
  assert (forall m:int :: channel[pid][m] > 0 ==> m <= id[max(id)]);

  assert (forall j:int :: pid(j) && between(max(id), j, pid) ==> terminated[j]);

  if (*)
  {
    terminated[pid] := true;
    PAs := NoPAs();
  }
  else
  {
    assume channel[pid][msg] > 0;
    channel[pid][msg] := channel[pid][msg] - 1;

    if (msg == id[pid])
    {
      leader[pid] := true;
      terminated[pid] := true;
      PAs := NoPAs();
    }
    else
    {
      if (msg > id[pid])
      {
        channel[next(pid)][msg] := channel[next(pid)][msg] + 1;
      }
      PAs := NoPAs()[P(pid) := 1];
    }
  }
}

////////////////////////////////////////////////////////////////////////////////

procedure {:atomic}{:layer 3}
{:IS "MAIN3","INV2"}{:elim "P", "P'" }
MAIN2 ({:linear_in "pid"} pids:[int]bool)
returns ({:pending_async "P"} PAs:[PA]int)
modifies channel;
{
  assert Init(pids, channel, terminated, id, leader);
  assume
    {:add_to_pool "INV2", next(max(id))}
    true;

  havoc channel;

  assume (forall i:int :: 1 <= i && i <= n ==> channel[next(i)] == EmptyChannel()[id[i] := 1 ]);
  assume (forall i:int :: i < 1  || i > n ==> channel[i] == EmptyChannel());
  PAs := (lambda pa:PA ::  if is#P(pa) && pid(pid#P(pa)) then 1 else 0);
  assume (forall i:int, msg:int :: pid(i) && channel[i][msg] > 0 ==> msg == id[prev(i)]);
}

procedure {:IS_invariant}{:layer 2}
INV1 ({:linear_in "pid"} pids:[int]bool)
returns ({:pending_async "PInit", "P"} PAs:[PA]int, {:choice} choice:PA)
modifies channel;
{
  var {:pool "INV1"} k: int;
  assert Init(pids, channel, terminated, id, leader);

  havoc channel;

  assume
    {:add_to_pool "INV1", k, k+1}
    {:add_to_pool "PInit", PInit(n)}
    pid(k) || k == 0;
  assume
    (forall i:int :: 1 <= i && i <= k ==> channel[next(i)] == EmptyChannel()[id[i] := 1 ]) &&
    (forall i:int :: k < i && i <= n ==> channel[next(i)] == EmptyChannel()) &&
    (forall i:int :: i < 1  || i > n ==> channel[i] == EmptyChannel());
  PAs := (lambda {:pool "PInit"} pa:PA :: if is#PInit(pa) && k < pid#PInit(pa) && pid#PInit(pa) <= n then 1
              else if is#P(pa) &&  1 <= pid#P(pa) && pid#P(pa) <= k  then 1 else 0);
  choice := PInit(k+1);
}

////////////////////////////////////////////////////////////////////////////////

procedure {:atomic}{:layer 2}
{:IS "MAIN2","INV1"}{:elim "PInit"}
MAIN1 ({:linear_in "pid"} pids:[int]bool)
returns ({:pending_async "PInit"} PAs:[PA]int)
{
  assert Init(pids, channel, terminated, id, leader);
  assume
    {:add_to_pool "INV1", 0}
    true;
  PAs := (lambda pa:PA :: if is#PInit(pa) && pid(pid#PInit(pa)) then 1 else 0);
}

procedure {:left}{:layer 2}
PInit ({:linear_in "pid"} pid:int)
returns ({:pending_async "P"} PAs:[PA]int)
modifies channel;
{
  assert pid(pid);
  channel[next(pid)][id[pid]] := channel[next(pid)][id[pid]] + 1;
  PAs := NoPAs()[P(pid) := 1];
}

procedure {:atomic}{:layer 2, 3}
P ({:linear_in "pid"} pid:int)
returns ({:pending_async "P"} PAs:[PA]int)
modifies channel, terminated, leader;
{
  var msg:int;

  assert pid(pid);
  assert !terminated[pid];
  assert (forall m:int :: channel[pid][m] > 0 ==> m <= id[max(id)]);

  if (*)
  {
    terminated[pid] := true;
    PAs := NoPAs();
  }
  else
  {
    assume channel[pid][msg] > 0;
    channel[pid][msg] := channel[pid][msg] - 1;

    if (msg == id[pid])
    {
      leader[pid] := true;
      terminated[pid] := true;
      PAs := NoPAs();
    }
    else
    {
      if (msg > id[pid])
      {
        channel[next(pid)][msg] := channel[next(pid)][msg] + 1;
      }
      PAs := NoPAs()[P(pid) := 1];
    }
  }
}

////////////////////////////////////////////////////////////////////////////////

procedure {:yields}{:layer 1}{:refines "MAIN1"}
main ({:linear_in "pid"} pids:[int]bool)
requires {:layer 1} Init(pids, channel, terminated, id, leader);
{
  var {:pending_async}{:layer 1} PAs:[PA]int;
  var {:linear "pid"} pid:int;
  var {:linear "pid"} pids':[int]bool;
  var i:int;

  pids' := pids;
  i := 1;
  while (i <= n)
  invariant {:layer 1}{:cooperates} true;
  invariant {:layer 1} 1 <= i && i <= n+1;
  invariant {:layer 1} (forall ii:int :: pid(ii) && ii >= i ==> pids'[ii]);
  invariant {:layer 1} PAs == (lambda pa:PA :: if is#PInit(pa) && pid(pid#PInit(pa)) && pid#PInit(pa) < i then 1 else 0);
  {
    call pid, pids' := linear_transfer(i, pids');
    async call pinit(pid);
    i := i + 1;
  }
}

procedure {:yields}{:layer 1}{:refines "PInit"}
pinit ({:linear_in "pid"} pid:int)
requires {:layer 1} pid(pid);
{
  var m:int;

  call m := get_id(pid);
  call send(next(pid), m);
  async call p(pid);
}

procedure {:yields}{:layer 1}{:refines "P"}
p ({:linear_in "pid"} pid:int)
requires {:layer 1} pid(pid);
{
  var m:int;
  var i:int;

  call i := get_id(pid);
  call m := receive(pid);
  if (m == i)
  {
    call set_leader(pid);
    call set_terminated(pid);
  }
  else
  {
    if (m > i)
    {
      call send(next(pid), m);
    }
    async call p(pid);
  }
}

procedure {:intro}{:layer 1} set_terminated(pid:int)
modifies terminated;
{
  terminated[pid] := true;
}

////////////////////////////////////////////////////////////////////////////////

procedure {:both}{:layer 1} GET_ID({:linear "pid"} pid:int) returns (i:int)
{
  i := id[pid];
}

procedure {:both}{:layer 1} SET_LEADER({:linear "pid"} pid:int)
modifies leader;
{
  leader[pid] := true;
}

procedure {:left}{:layer 1} SEND(pid:int, m:int)
modifies channel;
{
  channel[pid][m] := channel[pid][m] + 1;
}

procedure {:right}{:layer 1} RECEIVE(pid:int) returns (m:int)
modifies channel;
{
  assume channel[pid][m] > 0;
  channel[pid][m] := channel[pid][m] - 1;
}

procedure {:yields}{:layer 0}{:refines "GET_ID"} get_id({:linear "pid"} pid:int) returns (i:int);
procedure {:yields}{:layer 0}{:refines "SET_LEADER"} set_leader({:linear "pid"} pid:int);
procedure {:yields}{:layer 0}{:refines "SEND"} send(pid:int, m:int);
procedure {:yields}{:layer 0}{:refines "RECEIVE"} receive(pid:int) returns (m:int);

procedure {:both}{:layer 1}
LINEAR_TRANSFER(i:int, {:linear_in "pid"} pids:[int]bool)
returns ({:linear "pid"} p:int, {:linear "pid"} pids':[int]bool)
{
  assert pids[i];
  p := i;
  pids' := pids[i := false];
}

procedure {:yields}{:layer 0}{:refines "LINEAR_TRANSFER"} linear_transfer(i:int, {:linear_in "pid"} pids:[int]bool)
returns ({:linear "pid"} p:int, {:linear "pid"} pids':[int]bool);
