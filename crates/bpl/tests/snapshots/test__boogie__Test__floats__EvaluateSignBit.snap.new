---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "foo",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "float53e11",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "float53e11",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "float53e11",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "a",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: false,
                                                        whole: "3",
                                                        fract: "2",
                                                        exp: Exp {
                                                            is_neg: false,
                                                            digits: "1",
                                                        },
                                                    },
                                                ),
                                                sig_size: "53",
                                                exp_size: "11",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "b",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: false,
                                                        whole: "1",
                                                        fract: "fd70a3d70a3d7",
                                                        exp: Exp {
                                                            is_neg: false,
                                                            digits: "0",
                                                        },
                                                    },
                                                ),
                                                sig_size: "53",
                                                exp_size: "11",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "c",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: true,
                                                        whole: "1",
                                                        fract: "fd70a3d70a3d7",
                                                        exp: Exp {
                                                            is_neg: false,
                                                            digits: "0",
                                                        },
                                                    },
                                                ),
                                                sig_size: "53",
                                                exp_size: "11",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "b",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Factor(
                                            Factor {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: Var(
                                                            "a",
                                                        ),
                                                    },
                                                ),
                                                op: RealDiv,
                                                rhs: Var(
                                                    "a",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "c",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Factor(
                                            Factor {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "c",
                                                        ),
                                                        op: Mul,
                                                        rhs: Var(
                                                            "a",
                                                        ),
                                                    },
                                                ),
                                                op: RealDiv,
                                                rhs: Var(
                                                    "a",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "b",
                                            ),
                                            op: Gt,
                                            rhs: Float(
                                                Float {
                                                    value: Plain(
                                                        PlainFloatValue {
                                                            is_neg: false,
                                                            whole: "0",
                                                            fract: "0",
                                                            exp: Exp {
                                                                is_neg: false,
                                                                digits: "0",
                                                            },
                                                        },
                                                    ),
                                                    sig_size: "53",
                                                    exp_size: "11",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "c",
                                            ),
                                            op: Lt,
                                            rhs: Float(
                                                Float {
                                                    value: Plain(
                                                        PlainFloatValue {
                                                            is_neg: false,
                                                            whole: "0",
                                                            fract: "0",
                                                            exp: Exp {
                                                                is_neg: false,
                                                                digits: "0",
                                                            },
                                                        },
                                                    ),
                                                    sig_size: "53",
                                                    exp_size: "11",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
procedure foo() {
  var a: float53e11;
  var b: float53e11;
  var c: float53e11;

  a := 0x3.2e1f53e11;
  b := 0x1.fd70a3d70a3d7e0f53e11;
  c := -0x1.fd70a3d70a3d7e0f53e11;
  b := b * a / a;
  c := c * a / a;
  assert b > 0x0.0e0f53e11;
  assert c < 0x0.0e0f53e11;
}

[Input - ../../vendor/boogie/Test/floats/EvaluateSignBit.bpl]
// RUN: %boogie -proverWarnings:1 "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
procedure foo()
{
  var a : float53e11;
  var b : float53e11;
  var c : float53e11;
  a := 0x3.2e1f53e11; //50.0
  b := 0x1.fd70a3d70a3d7e0f53e11; //1.99
  c := -0x1.fd70a3d70a3d7e0f53e11; //-1.99
  b := (b * a) / a;
  c := (c * a) / a;
  assert (b > 0x0.0e0f53e11); //b should be positive
  assert (c < 0x0.0e0f53e11); //c should be negative
}
