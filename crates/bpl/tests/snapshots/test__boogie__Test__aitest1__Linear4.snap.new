---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "x",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "y",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "p",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "x",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "A",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "B",
                                        "C",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "B",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Factor(
                                            Factor {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Mul,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "C",
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
var x: int;

var y: int;

procedure p()
  modifies x;
{
  A:
  assume x < y;
  goto B, C;
  B:
  x := x * x;
  return;
  C:
  return;
}

[Input - ../../vendor/boogie/Test/aitest1/Linear4.bpl]
// RUN: %boogie -infer:j -instrumentInfer:e -printInstrumented -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
// Simple test file for checking the inference of linear constraints.

var x: int;
var y: int;

procedure p()
  modifies x;
{
  A:
    assume x < y;
    goto B, C;
  B:
    x := x*x;
    return;
  C:
    return;
}
