---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "Seq",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "Seq",
                    type_params: [
                        "_",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.empty",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Empty_int",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            AtomApp(
                                TypeApp {
                                    head: Int,
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.len",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Len_int",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                AtomApp(
                                    TypeApp {
                                        head: Int,
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.++",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Concat_int",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                AtomApp(
                                    TypeApp {
                                        head: Int,
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                AtomApp(
                                    TypeApp {
                                        head: Int,
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            AtomApp(
                                TypeApp {
                                    head: Int,
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.unit",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Unit_int",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            AtomApp(
                                TypeApp {
                                    head: Int,
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.nth",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Nth_int",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                AtomApp(
                                    TypeApp {
                                        head: Int,
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.extract",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Extract_int",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                AtomApp(
                                    TypeApp {
                                        head: Int,
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pos",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "length",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            AtomApp(
                                TypeApp {
                                    head: Int,
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "test",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Seq",
                                                tail: Some(
                                                    AtomApp(
                                                        TypeApp {
                                                            head: Int,
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Seq_Concat_int",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Seq_Empty_int",
                                                            args: [],
                                                        },
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Seq_Unit_int",
                                                            args: [
                                                                Nat(
                                                                    "0",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Seq_Concat_int",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Seq_Unit_int",
                                                            args: [
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Seq_Concat_int",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Seq_Unit_int",
                                                            args: [
                                                                Nat(
                                                                    "2",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "Seq_Len_int",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "3",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "Seq_Extract_int",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                        Nat(
                                                            "1",
                                                        ),
                                                        Nat(
                                                            "2",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "Seq_Concat_int",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "Seq_Unit_int",
                                                                args: [
                                                                    Nat(
                                                                        "1",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "Seq_Unit_int",
                                                                args: [
                                                                    Nat(
                                                                        "2",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "Seq_Nth_int",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                        Nat(
                                                            "1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
type {:builtin "Seq"} Seq _;

function {:builtin "seq.empty"} Seq_Empty_int(): Seq int;

function {:builtin "seq.len"} Seq_Len_int(a: Seq int): int;

function {:builtin "seq.++"} Seq_Concat_int(a: Seq int, b: Seq int): Seq int;

function {:builtin "seq.unit"} Seq_Unit_int(v: int): Seq int;

function {:builtin "seq.nth"} Seq_Nth_int(a: Seq int, i: int): int;

function {:builtin "seq.extract"} Seq_Extract_int(a: Seq int, pos: int, length: int): Seq int;

procedure test() {
  var s: Seq int;

  s := Seq_Concat_int(Seq_Empty_int(), Seq_Unit_int(0));
  s := Seq_Concat_int(s, Seq_Unit_int(1));
  s := Seq_Concat_int(s, Seq_Unit_int(2));
  assert Seq_Len_int(s) == 3;
  assert Seq_Extract_int(s, 1, 2) == Seq_Concat_int(Seq_Unit_int(1), Seq_Unit_int(2));
  assert Seq_Nth_int(s, 1) == 1;
}

[Input - ../../vendor/boogie/Test/sequences/intseq.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

type {:builtin "Seq"} Seq _;
function {:builtin "seq.empty"} Seq_Empty_int(): Seq int;
function {:builtin "seq.len"} Seq_Len_int(a: Seq int): int;
function {:builtin "seq.++"} Seq_Concat_int(a: Seq int, b: Seq int): Seq int;
function {:builtin "seq.unit"} Seq_Unit_int(v: int): Seq int;
function {:builtin "seq.nth"} Seq_Nth_int(a: Seq int, i: int): int;
function {:builtin "seq.extract"} Seq_Extract_int(a: Seq int, pos: int, length: int): Seq int;

procedure test()
{
  var s: Seq int;

  s := Seq_Concat_int(Seq_Empty_int(), Seq_Unit_int(0));
  s := Seq_Concat_int(s, Seq_Unit_int(1));
  s := Seq_Concat_int(s, Seq_Unit_int(2));
  assert Seq_Len_int(s) == 3;
  assert Seq_Extract_int(s, 1, 2) == Seq_Concat_int(Seq_Unit_int(1), Seq_Unit_int(2));
  assert Seq_Nth_int(s, 1) == 1;
}
