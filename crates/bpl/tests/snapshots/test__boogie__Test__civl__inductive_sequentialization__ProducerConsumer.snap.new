---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "pid",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "Pid",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Int,
                        ),
                    ),
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "C",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "head",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "tail",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "prod_id",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "cons_id",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "pending_async",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "PA",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "PRODUCER",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "PA",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "CONSUMER",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "PA",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "NoPAs",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "PA",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: Lambda,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "pa",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Nat(
                                "0",
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "IS",
                            params: [
                                String(
                                    StringLit {
                                        text: "MAIN'",
                                    },
                                ),
                                String(
                                    StringLit {
                                        text: "INV",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "elim",
                            params: [
                                String(
                                    StringLit {
                                        text: "PRODUCER",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "elim",
                            params: [
                                String(
                                    StringLit {
                                        text: "CONSUMER",
                                    },
                                ),
                                String(
                                    StringLit {
                                        text: "CONSUMER'",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "MAIN",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "prod_pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "cons_pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "PRODUCER",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "CONSUMER",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "prod_pid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "prod_id",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "cons_pid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "cons_id",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "head",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "tail",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "NoPAs",
                                                        args: [],
                                                    },
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "PRODUCER",
                                                                    args: [
                                                                        Nat(
                                                                            "1",
                                                                        ),
                                                                        Var(
                                                                            "prod_pid",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        value: Some(
                                                            Nat(
                                                                "1",
                                                            ),
                                                        ),
                                                    },
                                                    ArraySubscript {
                                                        keys: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "CONSUMER",
                                                                    args: [
                                                                        Nat(
                                                                            "1",
                                                                        ),
                                                                        Var(
                                                                            "cons_pid",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        value: Some(
                                                            Nat(
                                                                "1",
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "MAIN'",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "prod_pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "cons_pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "C",
                            "head",
                            "tail",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "prod_pid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "prod_id",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "cons_pid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "cons_id",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "head",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "tail",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "C",
                                        "head",
                                        "tail",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "head",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "tail",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "IS_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "INV",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "prod_pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "cons_pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "PRODUCER",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "CONSUMER",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "choice",
                                    params: [],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "choice",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "PA",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "C",
                            "head",
                            "tail",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "prod_pid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "prod_id",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "cons_pid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "cons_id",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "head",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "tail",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "C",
                                        "head",
                                        "tail",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: Exists,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "c",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "c",
                                                                ),
                                                                op: Gt,
                                                                rhs: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Logical(
                                                                                    LogicalExpr {
                                                                                        lhs: Logical(
                                                                                            LogicalExpr {
                                                                                                lhs: Rel(
                                                                                                    RelExpr {
                                                                                                        lhs: Var(
                                                                                                            "head",
                                                                                                        ),
                                                                                                        op: Eq,
                                                                                                        rhs: Var(
                                                                                                            "tail",
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                op: And,
                                                                                                rhs: Rel(
                                                                                                    RelExpr {
                                                                                                        lhs: Var(
                                                                                                            "PAs",
                                                                                                        ),
                                                                                                        op: Eq,
                                                                                                        rhs: Array(
                                                                                                            ArrayExpr {
                                                                                                                expr: FuncCall(
                                                                                                                    FuncCall {
                                                                                                                        target: "NoPAs",
                                                                                                                        args: [],
                                                                                                                    },
                                                                                                                ),
                                                                                                                subscripts: [
                                                                                                                    ArraySubscript {
                                                                                                                        keys: [
                                                                                                                            FuncCall(
                                                                                                                                FuncCall {
                                                                                                                                    target: "PRODUCER",
                                                                                                                                    args: [
                                                                                                                                        Var(
                                                                                                                                            "c",
                                                                                                                                        ),
                                                                                                                                        Var(
                                                                                                                                            "prod_pid",
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        ],
                                                                                                                        value: Some(
                                                                                                                            Nat(
                                                                                                                                "1",
                                                                                                                            ),
                                                                                                                        ),
                                                                                                                    },
                                                                                                                    ArraySubscript {
                                                                                                                        keys: [
                                                                                                                            FuncCall(
                                                                                                                                FuncCall {
                                                                                                                                    target: "CONSUMER",
                                                                                                                                    args: [
                                                                                                                                        Var(
                                                                                                                                            "c",
                                                                                                                                        ),
                                                                                                                                        Var(
                                                                                                                                            "cons_pid",
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        ],
                                                                                                                        value: Some(
                                                                                                                            Nat(
                                                                                                                                "1",
                                                                                                                            ),
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        op: And,
                                                                                        rhs: Rel(
                                                                                            RelExpr {
                                                                                                lhs: Var(
                                                                                                    "choice",
                                                                                                ),
                                                                                                op: Eq,
                                                                                                rhs: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "PRODUCER",
                                                                                                        args: [
                                                                                                            Var(
                                                                                                                "c",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "prod_pid",
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                op: Or,
                                                                                rhs: Logical(
                                                                                    LogicalExpr {
                                                                                        lhs: Logical(
                                                                                            LogicalExpr {
                                                                                                lhs: Logical(
                                                                                                    LogicalExpr {
                                                                                                        lhs: Rel(
                                                                                                            RelExpr {
                                                                                                                lhs: Var(
                                                                                                                    "tail",
                                                                                                                ),
                                                                                                                op: Eq,
                                                                                                                rhs: Term(
                                                                                                                    Term {
                                                                                                                        lhs: Var(
                                                                                                                            "head",
                                                                                                                        ),
                                                                                                                        op: Add,
                                                                                                                        rhs: Nat(
                                                                                                                            "1",
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        op: And,
                                                                                                        rhs: Rel(
                                                                                                            RelExpr {
                                                                                                                lhs: Array(
                                                                                                                    ArrayExpr {
                                                                                                                        expr: Var(
                                                                                                                            "C",
                                                                                                                        ),
                                                                                                                        subscripts: [
                                                                                                                            ArraySubscript {
                                                                                                                                keys: [
                                                                                                                                    Var(
                                                                                                                                        "head",
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                value: None,
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    },
                                                                                                                ),
                                                                                                                op: Eq,
                                                                                                                rhs: Nat(
                                                                                                                    "0",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                op: And,
                                                                                                rhs: Rel(
                                                                                                    RelExpr {
                                                                                                        lhs: Var(
                                                                                                            "PAs",
                                                                                                        ),
                                                                                                        op: Eq,
                                                                                                        rhs: Array(
                                                                                                            ArrayExpr {
                                                                                                                expr: FuncCall(
                                                                                                                    FuncCall {
                                                                                                                        target: "NoPAs",
                                                                                                                        args: [],
                                                                                                                    },
                                                                                                                ),
                                                                                                                subscripts: [
                                                                                                                    ArraySubscript {
                                                                                                                        keys: [
                                                                                                                            FuncCall(
                                                                                                                                FuncCall {
                                                                                                                                    target: "CONSUMER",
                                                                                                                                    args: [
                                                                                                                                        Var(
                                                                                                                                            "c",
                                                                                                                                        ),
                                                                                                                                        Var(
                                                                                                                                            "cons_pid",
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        ],
                                                                                                                        value: Some(
                                                                                                                            Nat(
                                                                                                                                "1",
                                                                                                                            ),
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        op: And,
                                                                                        rhs: Rel(
                                                                                            RelExpr {
                                                                                                lhs: Var(
                                                                                                    "choice",
                                                                                                ),
                                                                                                op: Eq,
                                                                                                rhs: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "CONSUMER",
                                                                                                        args: [
                                                                                                            Var(
                                                                                                                "c",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "cons_pid",
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: Or,
                                                                        rhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Logical(
                                                                                    LogicalExpr {
                                                                                        lhs: Logical(
                                                                                            LogicalExpr {
                                                                                                lhs: Rel(
                                                                                                    RelExpr {
                                                                                                        lhs: Var(
                                                                                                            "tail",
                                                                                                        ),
                                                                                                        op: Eq,
                                                                                                        rhs: Term(
                                                                                                            Term {
                                                                                                                lhs: Var(
                                                                                                                    "head",
                                                                                                                ),
                                                                                                                op: Add,
                                                                                                                rhs: Nat(
                                                                                                                    "1",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                op: And,
                                                                                                rhs: Rel(
                                                                                                    RelExpr {
                                                                                                        lhs: Array(
                                                                                                            ArrayExpr {
                                                                                                                expr: Var(
                                                                                                                    "C",
                                                                                                                ),
                                                                                                                subscripts: [
                                                                                                                    ArraySubscript {
                                                                                                                        keys: [
                                                                                                                            Var(
                                                                                                                                "head",
                                                                                                                            ),
                                                                                                                        ],
                                                                                                                        value: None,
                                                                                                                    },
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                        op: Eq,
                                                                                                        rhs: Var(
                                                                                                            "c",
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        op: And,
                                                                                        rhs: Rel(
                                                                                            RelExpr {
                                                                                                lhs: Var(
                                                                                                    "PAs",
                                                                                                ),
                                                                                                op: Eq,
                                                                                                rhs: Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: FuncCall(
                                                                                                            FuncCall {
                                                                                                                target: "NoPAs",
                                                                                                                args: [],
                                                                                                            },
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    FuncCall(
                                                                                                                        FuncCall {
                                                                                                                            target: "PRODUCER",
                                                                                                                            args: [
                                                                                                                                Term(
                                                                                                                                    Term {
                                                                                                                                        lhs: Var(
                                                                                                                                            "c",
                                                                                                                                        ),
                                                                                                                                        op: Add,
                                                                                                                                        rhs: Nat(
                                                                                                                                            "1",
                                                                                                                                        ),
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                                Var(
                                                                                                                                    "prod_pid",
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: Some(
                                                                                                                    Nat(
                                                                                                                        "1",
                                                                                                                    ),
                                                                                                                ),
                                                                                                            },
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    FuncCall(
                                                                                                                        FuncCall {
                                                                                                                            target: "CONSUMER",
                                                                                                                            args: [
                                                                                                                                Var(
                                                                                                                                    "c",
                                                                                                                                ),
                                                                                                                                Var(
                                                                                                                                    "cons_pid",
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: Some(
                                                                                                                    Nat(
                                                                                                                        "1",
                                                                                                                    ),
                                                                                                                ),
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "choice",
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "CONSUMER",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "c",
                                                                                                    ),
                                                                                                    Var(
                                                                                                        "cons_pid",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: Or,
                                                                rhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "head",
                                                                                ),
                                                                                op: Eq,
                                                                                rhs: Var(
                                                                                    "tail",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "PAs",
                                                                                ),
                                                                                op: Eq,
                                                                                rhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "NoPAs",
                                                                                        args: [],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "PRODUCER",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "PRODUCER",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "C",
                            "tail",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "pid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "prod_id",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "C",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "tail",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "tail",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "tail",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "PAs",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "NoPAs",
                                                                        args: [],
                                                                    },
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "PRODUCER",
                                                                                    args: [
                                                                                        Term(
                                                                                            Term {
                                                                                                lhs: Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                op: Add,
                                                                                                rhs: Nat(
                                                                                                    "1",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        Var(
                                                                                            "pid",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Nat(
                                                                                "1",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "C",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "tail",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Nat(
                                                                    "0",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "tail",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Term(
                                                                    Term {
                                                                        lhs: Var(
                                                                            "tail",
                                                                        ),
                                                                        op: Add,
                                                                        rhs: Nat(
                                                                            "1",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "PAs",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "NoPAs",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "CONSUMER",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "CONSUMER",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "head",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x'",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "pid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "cons_id",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "head",
                                                    ),
                                                    op: Lt,
                                                    rhs: Var(
                                                        "tail",
                                                    ),
                                                },
                                            ),
                                            rhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "C",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "head",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "x",
                                                            ),
                                                        },
                                                    ),
                                                    op: Or,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "C",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "head",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "head",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "tail",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "C",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "head",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "head",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "head",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x'",
                                                ),
                                                op: Neq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "PAs",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "NoPAs",
                                                                        args: [],
                                                                    },
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "CONSUMER",
                                                                                    args: [
                                                                                        Term(
                                                                                            Term {
                                                                                                lhs: Var(
                                                                                                    "x'",
                                                                                                ),
                                                                                                op: Add,
                                                                                                rhs: Nat(
                                                                                                    "1",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        Var(
                                                                                            "pid",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Nat(
                                                                                "1",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "PAs",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "NoPAs",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "IS_abstraction",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "CONSUMER'",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "CONSUMER",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "head",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x'",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "pid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "cons_id",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "head",
                                                    ),
                                                    op: Lt,
                                                    rhs: Var(
                                                        "tail",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "C",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "head",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "x",
                                                            ),
                                                        },
                                                    ),
                                                    op: Or,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "C",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "head",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "head",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "tail",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "C",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "head",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "head",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "head",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x'",
                                                ),
                                                op: Neq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "PAs",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "NoPAs",
                                                                        args: [],
                                                                    },
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "CONSUMER",
                                                                                    args: [
                                                                                        Term(
                                                                                            Term {
                                                                                                lhs: Var(
                                                                                                    "x'",
                                                                                                ),
                                                                                                op: Add,
                                                                                                rhs: Nat(
                                                                                                    "1",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        Var(
                                                                                            "pid",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Nat(
                                                                                "1",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "PAs",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "NoPAs",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "MAIN",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "main",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "prod_pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "cons_pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "producer",
                                        params: [
                                            Nat(
                                                "1",
                                            ),
                                            Var(
                                                "prod_pid",
                                            ),
                                        ],
                                    },
                                    is_async: true,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "consumer",
                                        params: [
                                            Nat(
                                                "1",
                                            ),
                                            Var(
                                                "cons_pid",
                                            ),
                                        ],
                                    },
                                    is_async: true,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "PRODUCER",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "producer",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "send",
                                                        params: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "producer",
                                                        params: [
                                                            Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "x",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                            Var(
                                                                "pid",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: true,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Call(
                                                        CallCmd {
                                                            attrs: [],
                                                            call_params: CallParams {
                                                                returns: [],
                                                                target: "send",
                                                                params: [
                                                                    Nat(
                                                                        "0",
                                                                    ),
                                                                ],
                                                            },
                                                            is_async: false,
                                                            is_free: false,
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "CONSUMER",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "consumer",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y'",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "y'",
                                        ],
                                        target: "receive",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "y'",
                                                ),
                                                op: Neq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "assert_eq",
                                                        params: [
                                                            Var(
                                                                "y'",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "consumer",
                                                        params: [
                                                            Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "y'",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                            Var(
                                                                "pid",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: true,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SEND",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "m",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "C",
                            "tail",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "C",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tail",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "m",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "tail",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "tail",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "RECEIVE",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "m",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "C",
                            "head",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "head",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "tail",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "m",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "C",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "head",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "head",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "head",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "ASSERT_EQ",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "a",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "b",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "SEND",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "send",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "m",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "RECEIVE",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "receive",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "m",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "ASSERT_EQ",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "assert_eq",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
]

[Printed]
type {:linear "pid"} Pid = int;

var {:layer 0, 3} C: [int]int;

var {:layer 0, 3} head: int;

var {:layer 0, 3} tail: int;

const unique prod_id: int;

const unique cons_id: int;

type {:pending_async} {:datatype} PA;

function {:constructor} PRODUCER(x: int, pid: int): PA;

function {:constructor} CONSUMER(x: int, pid: int): PA;

function {:inline} NoPAs(): [PA]int {
  (lambda pa: PA :: 0)
}

procedure {:atomic} {:layer 2} {:IS "MAIN'", "INV"} {:elim "PRODUCER"} {:elim "CONSUMER", "CONSUMER'"} MAIN({:linear_in "pid"} prod_pid: int, {:linear_in "pid"} cons_pid: int) returns ({:pending_async "PRODUCER", "CONSUMER"} PAs: [PA]int) {
  assert prod_pid == prod_id;
  assert cons_pid == cons_id;
  assert head == tail;
  PAs := NoPAs()[PRODUCER(1, prod_pid) := 1][CONSUMER(1, cons_pid) := 1];
}

procedure {:atomic} {:layer 3} MAIN'({:linear_in "pid"} prod_pid: int, {:linear_in "pid"} cons_pid: int)
  modifies C, head, tail;
{
  assert prod_pid == prod_id;
  assert cons_pid == cons_id;
  assert head == tail;
  havoc C, head, tail;
  assume head == tail;
}

procedure {:IS_invariant} {:layer 2} INV({:linear_in "pid"} prod_pid: int, {:linear_in "pid"} cons_pid: int) returns ({:pending_async "PRODUCER", "CONSUMER"} PAs: [PA]int, {:choice} choice: PA)
  modifies C, head, tail;
{
  assert prod_pid == prod_id;
  assert cons_pid == cons_id;
  assert head == tail;
  havoc C, head, tail;
  assume (exists c: int :: c > 0 && ((head == tail && PAs == NoPAs()[PRODUCER(c, prod_pid) := 1][CONSUMER(c, cons_pid) := 1] && choice == PRODUCER(c, prod_pid)) || (tail == head + 1 && C[head] == 0 && PAs == NoPAs()[CONSUMER(c, cons_pid) := 1] && choice == CONSUMER(c, cons_pid)) || (tail == head + 1 && C[head] == c && PAs == NoPAs()[PRODUCER(c + 1, prod_pid) := 1][CONSUMER(c, cons_pid) := 1] && choice == CONSUMER(c, cons_pid)) || (head == tail && PAs == NoPAs())));
}

procedure {:left} {:layer 2} PRODUCER(x: int, {:linear_in "pid"} pid: int) returns ({:pending_async "PRODUCER"} PAs: [PA]int)
  modifies C, tail;
{
  assert pid == prod_id;
  if (*) {
    C[tail] := x;
    tail := tail + 1;
    PAs := NoPAs()[PRODUCER(x + 1, pid) := 1];
  } else {
    C[tail] := 0;
    tail := tail + 1;
    PAs := NoPAs();
  }
}

procedure {:atomic} {:layer 2} CONSUMER(x: int, {:linear_in "pid"} pid: int) returns ({:pending_async "CONSUMER"} PAs: [PA]int)
  modifies head;
{
  var x': int;

  assert pid == cons_id;
  assert head < tail ==> C[head] == x || C[head] == 0;
  assume head < tail;
  x' := C[head];
  head := head + 1;
  if (x' != 0) {
    PAs := NoPAs()[CONSUMER(x' + 1, pid) := 1];
  } else {
    PAs := NoPAs();
  }
}

procedure {:IS_abstraction} {:layer 2} CONSUMER'(x: int, {:linear_in "pid"} pid: int) returns ({:pending_async "CONSUMER"} PAs: [PA]int)
  modifies head;
{
  var x': int;

  assert pid == cons_id;
  assert head < tail && (C[head] == x || C[head] == 0);
  assume head < tail;
  x' := C[head];
  head := head + 1;
  if (x' != 0) {
    PAs := NoPAs()[CONSUMER(x' + 1, pid) := 1];
  } else {
    PAs := NoPAs();
  }
}

procedure {:yields} {:layer 1} {:refines "MAIN"} main({:linear_in "pid"} prod_pid: int, {:linear_in "pid"} cons_pid: int) {
  async call producer(1, prod_pid);
  async call consumer(1, cons_pid);
}

procedure {:yields} {:layer 1} {:refines "PRODUCER"} producer(x: int, {:linear_in "pid"} pid: int) {
  if (*) {
    call send(x);
    async call producer(x + 1, pid);
  } else {
    call send(0);
  }
}

procedure {:yields} {:layer 1} {:refines "CONSUMER"} consumer(y: int, {:linear_in "pid"} pid: int) {
  var y': int;

  call y' := receive();
  if (y' != 0) {
    call assert_eq(y', y);
    async call consumer(y' + 1, pid);
  }
}

procedure {:atomic} {:layer 1} SEND(m: int)
  modifies C, tail;
{
  C[tail] := m;
  tail := tail + 1;
}

procedure {:atomic} {:layer 1} RECEIVE() returns (m: int)
  modifies C, head;
{
  assume head < tail;
  m := C[head];
  head := head + 1;
}

procedure {:both} {:layer 1} ASSERT_EQ(a: int, b: int) {
  assert a == b;
}

procedure {:yields} {:layer 0} {:refines "SEND"} send(m: int);

procedure {:yields} {:layer 0} {:refines "RECEIVE"} receive() returns (m: int);

procedure {:yields} {:layer 0} {:refines "ASSERT_EQ"} assert_eq(a: int, b: int);

[Input - ../../vendor/boogie/Test/civl/inductive-sequentialization/ProducerConsumer.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

type {:linear "pid"} Pid = int;
var {:layer 0,3} C:[int]int; // FIFO channel
var {:layer 0,3} head:int;   // head index of the channel
var {:layer 0,3} tail:int;   // tail index of the channel

const unique prod_id:int;
const unique cons_id:int;

type {:pending_async}{:datatype} PA;
function {:constructor} PRODUCER(x:int, pid:int) : PA;
function {:constructor} CONSUMER(x:int, pid:int) : PA;

function {:inline} NoPAs () : [PA]int
{ (lambda pa:PA :: 0) }

////////////////////////////////////////////////////////////////////////////////

procedure {:atomic}{:layer 2}
{:IS "MAIN'","INV"}{:elim "PRODUCER"}{:elim "CONSUMER","CONSUMER'"}
MAIN ({:linear_in "pid"} prod_pid:int, {:linear_in "pid"} cons_pid:int)
returns ({:pending_async "PRODUCER","CONSUMER"} PAs:[PA]int)
{
  assert prod_pid == prod_id;
  assert cons_pid == cons_id;
  assert head == tail;
  PAs := NoPAs()[PRODUCER(1, prod_pid) := 1][CONSUMER(1, cons_pid) := 1];
}

procedure {:atomic}{:layer 3}
MAIN' ({:linear_in "pid"} prod_pid:int, {:linear_in "pid"} cons_pid:int)
modifies C, head, tail;
{
  assert prod_pid == prod_id;
  assert cons_pid == cons_id;
  assert head == tail;
  havoc C, head, tail;
  assume head == tail;
}

procedure {:IS_invariant}{:layer 2}
INV ({:linear_in "pid"} prod_pid:int, {:linear_in "pid"} cons_pid:int)
returns ({:pending_async "PRODUCER","CONSUMER"} PAs:[PA]int, {:choice} choice:PA)
modifies C, head, tail;
{
  assert prod_pid == prod_id;
  assert cons_pid == cons_id;
  assert head == tail;

  havoc C, head, tail;

  assume
  (exists c:int ::  c > 0 &&
    (
      (head == tail &&
       PAs == NoPAs()[PRODUCER(c, prod_pid) := 1][CONSUMER(c, cons_pid) := 1] &&
       choice == PRODUCER(c, prod_pid))
      ||
      (tail == head + 1 && C[head] == 0 &&
       PAs == NoPAs()[CONSUMER(c, cons_pid) := 1] &&
       choice == CONSUMER(c, cons_pid))
      ||
      (tail == head + 1 && C[head] == c &&
       PAs == NoPAs()[PRODUCER(c+1, prod_pid) := 1][CONSUMER(c, cons_pid) := 1] &&
       choice == CONSUMER(c, cons_pid))
      ||
      (head == tail &&
       PAs == NoPAs())
    )
  );
}

////////////////////////////////////////////////////////////////////////////////

procedure {:left}{:layer 2}
PRODUCER (x:int, {:linear_in "pid"} pid:int)
returns ({:pending_async "PRODUCER"} PAs:[PA]int)
modifies C, tail;
{
  assert pid == prod_id;

  if (*)
  {
    C[tail] := x;
    tail := tail + 1;
    PAs := NoPAs()[PRODUCER(x+1, pid) := 1];
  }
  else
  {
    C[tail] := 0;
    tail := tail + 1;
    PAs := NoPAs();
  }
}

procedure {:atomic}{:layer 2}
CONSUMER (x:int, {:linear_in "pid"} pid:int)
returns ({:pending_async "CONSUMER"} PAs:[PA]int)
modifies head;
{
  var x':int;

  assert pid == cons_id;
  assert head < tail ==> C[head] == x || C[head] == 0;  // assertion to discharge

  assume head < tail;
  x' := C[head];
  head := head + 1;
  if (x' != 0)
  {
    PAs := NoPAs()[CONSUMER(x'+1, pid) := 1];
  }
  else
  {
    PAs := NoPAs();
  }
}

////////////////////////////////////////////////////////////////////////////////

procedure {:IS_abstraction}{:layer 2}
CONSUMER' (x:int, {:linear_in "pid"} pid:int)
returns ({:pending_async "CONSUMER"} PAs:[PA]int)
modifies head;
{
  var x':int;

  assert pid == cons_id;
  assert head < tail && (C[head] == x || C[head] == 0);

  assume head < tail;
  x' := C[head];
  head := head + 1;
  if (x' != 0)
  {
    PAs := NoPAs()[CONSUMER(x'+1, pid) := 1];
  }
  else
  {
    PAs := NoPAs();
  }
}

////////////////////////////////////////////////////////////////////////////////

procedure {:yields}{:layer 1}{:refines "MAIN"}
main ({:linear_in "pid"} prod_pid:int, {:linear_in "pid"} cons_pid:int)
{
  async call producer(1, prod_pid);
  async call consumer(1, cons_pid);
}

procedure {:yields}{:layer 1}{:refines "PRODUCER"}
producer (x:int, {:linear_in "pid"} pid:int)
{
  if (*)
  {
    call send(x);
    async call producer(x+1, pid);
  }
  else
  {
    call send(0);
  }
}

procedure {:yields}{:layer 1}{:refines "CONSUMER"}
consumer (y:int, {:linear_in "pid"} pid:int)
{
  var y':int;

  call y' := receive();
  if (y' != 0)
  {
    call assert_eq(y', y); // low-level assertion to discharge
    async call consumer(y'+1, pid);
  }
}

////////////////////////////////////////////////////////////////////////////////

procedure {:atomic}{:layer 1} SEND (m:int)
modifies C, tail;
{
  C[tail] := m;
  tail := tail + 1;
}

procedure {:atomic}{:layer 1} RECEIVE () returns (m:int)
modifies C, head;
{
  assume head < tail;
  m := C[head];
  head := head + 1;
}

procedure {:both}{:layer 1} ASSERT_EQ (a:int, b:int)
{
  assert a == b;
}

procedure {:yields}{:layer 0}{:refines "SEND"} send (m:int);
procedure {:yields}{:layer 0}{:refines "RECEIVE"} receive () returns (m:int);
procedure {:yields}{:layer 0}{:refines "ASSERT_EQ"} assert_eq (a:int, b:int);
