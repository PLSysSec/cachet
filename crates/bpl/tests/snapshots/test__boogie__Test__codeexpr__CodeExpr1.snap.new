---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "F",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Lt,
                                rhs: Var(
                                    "y",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "z",
                                ),
                                op: Eq,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Nat(
                                            "3",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "z",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Code(
                                            CodeExpr {
                                                local_vars: [
                                                    LocalVars {
                                                        attrs: [],
                                                        vars: [
                                                            TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "a",
                                                                    ],
                                                                    type_: Atom(
                                                                        Bool,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                            TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "b",
                                                                    ],
                                                                    type_: Atom(
                                                                        Bool,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        ],
                                                    },
                                                ],
                                                spec_blocks: [
                                                    SpecBlock {
                                                        label: "B",
                                                        cmds: [
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "a",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "x",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Nat(
                                                                                    "3",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        transfer: Return(
                                                            SpecReturn {
                                                                value: Var(
                                                                    "a",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "r",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "F'",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "t",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "x",
                                                                ),
                                                                op: Lt,
                                                                rhs: Term(
                                                                    Term {
                                                                        lhs: Nat(
                                                                            "3",
                                                                        ),
                                                                        op: Add,
                                                                        rhs: Var(
                                                                            "t",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "r",
                                                                args: [
                                                                    Var(
                                                                        "t",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "r",
                                            args: [
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "F''",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "t",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Code(
                                                    CodeExpr {
                                                        local_vars: [
                                                            LocalVars {
                                                                attrs: [],
                                                                vars: [
                                                                    TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "a",
                                                                            ],
                                                                            type_: Atom(
                                                                                Bool,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                ],
                                                            },
                                                        ],
                                                        spec_blocks: [
                                                            SpecBlock {
                                                                label: "Start",
                                                                cmds: [
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "a",
                                                                                    subscripts: [],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "x",
                                                                                        ),
                                                                                        op: Lt,
                                                                                        rhs: Term(
                                                                                            Term {
                                                                                                lhs: Nat(
                                                                                                    "3",
                                                                                                ),
                                                                                                op: Add,
                                                                                                rhs: Var(
                                                                                                    "t",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                transfer: Goto(
                                                                    SpecGoto {
                                                                        labels: [
                                                                            "X",
                                                                            "Y",
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                            SpecBlock {
                                                                label: "X",
                                                                cmds: [
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: Var(
                                                                                "a",
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                                transfer: Return(
                                                                    SpecReturn {
                                                                        value: FuncCall(
                                                                            FuncCall {
                                                                                target: "r",
                                                                                args: [
                                                                                    Var(
                                                                                        "t",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                            SpecBlock {
                                                                label: "Y",
                                                                cmds: [
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: Neg(
                                                                                NegExpr {
                                                                                    op: Logical,
                                                                                    expr: Var(
                                                                                        "a",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                                transfer: Return(
                                                                    SpecReturn {
                                                                        value: BoolLit(
                                                                            true,
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "r",
                                            args: [
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "G",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Lt,
                                rhs: Var(
                                    "y",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "z",
                                ),
                                op: Eq,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Nat(
                                            "3",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "z",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Code(
                                            CodeExpr {
                                                local_vars: [
                                                    LocalVars {
                                                        attrs: [],
                                                        vars: [
                                                            TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "a",
                                                                    ],
                                                                    type_: Atom(
                                                                        Bool,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                            TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "b",
                                                                    ],
                                                                    type_: Atom(
                                                                        Bool,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        ],
                                                    },
                                                ],
                                                spec_blocks: [
                                                    SpecBlock {
                                                        label: "B",
                                                        cmds: [
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "a",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "x",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Nat(
                                                                                    "3",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        transfer: Return(
                                                            SpecReturn {
                                                                value: Neg(
                                                                    NegExpr {
                                                                        op: Logical,
                                                                        expr: Var(
                                                                            "a",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "G'",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "t",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Term(
                                                                    Term {
                                                                        lhs: Var(
                                                                            "x",
                                                                        ),
                                                                        op: Add,
                                                                        rhs: Nat(
                                                                            "3",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: Lt,
                                                                rhs: Var(
                                                                    "t",
                                                                ),
                                                            },
                                                        ),
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "r",
                                                                args: [
                                                                    Var(
                                                                        "t",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "r",
                                            args: [
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "G''",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "t",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Code(
                                                    CodeExpr {
                                                        local_vars: [
                                                            LocalVars {
                                                                attrs: [],
                                                                vars: [
                                                                    TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "a",
                                                                            ],
                                                                            type_: Atom(
                                                                                Bool,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                ],
                                                            },
                                                        ],
                                                        spec_blocks: [
                                                            SpecBlock {
                                                                label: "Start",
                                                                cmds: [
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "a",
                                                                                    subscripts: [],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                Rel(
                                                                                    RelExpr {
                                                                                        lhs: Term(
                                                                                            Term {
                                                                                                lhs: Var(
                                                                                                    "x",
                                                                                                ),
                                                                                                op: Add,
                                                                                                rhs: Nat(
                                                                                                    "3",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        op: Lt,
                                                                                        rhs: Var(
                                                                                            "t",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                transfer: Goto(
                                                                    SpecGoto {
                                                                        labels: [
                                                                            "X",
                                                                            "Y",
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                            SpecBlock {
                                                                label: "X",
                                                                cmds: [
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: Var(
                                                                                "a",
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                                transfer: Return(
                                                                    SpecReturn {
                                                                        value: FuncCall(
                                                                            FuncCall {
                                                                                target: "r",
                                                                                args: [
                                                                                    Var(
                                                                                        "t",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                            SpecBlock {
                                                                label: "Y",
                                                                cmds: [
                                                                    Claim(
                                                                        ClaimCmd {
                                                                            kind: Assume,
                                                                            attrs: [],
                                                                            proposition: Neg(
                                                                                NegExpr {
                                                                                    op: Logical,
                                                                                    expr: Var(
                                                                                        "a",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                                transfer: Return(
                                                                    SpecReturn {
                                                                        value: BoolLit(
                                                                            true,
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "r",
                                            args: [
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
procedure F(x: int, y: int) returns (z: bool)
  requires x < y;
  ensures z == (x < 3);
{
  start:
  z := |{
    var a: bool, b: bool;

    B:
      a := x < 3;
      return a;
  }|;
  return;
}

function r(int): bool;

procedure F'(x: int, y: int) returns (z: bool) {
  start:
  assume x < y;
  assume (forall t: int :: x < 3 + t ==> r(t));
  assert r(y);
}

procedure F''(x: int, y: int) returns (z: bool) {
  start:
  assume x < y;
  assume (forall t: int :: |{
    var a: bool;

    Start:
      a := x < 3 + t;
      goto X, Y;
    X:
      assume a;
      return r(t);
    Y:
      assume !a;
      return true;
  }|);
  assert r(y);
}

procedure G(x: int, y: int) returns (z: bool)
  requires x < y;
  ensures z == (x < 3);
{
  start:
  z := |{
    var a: bool, b: bool;

    B:
      a := x < 3;
      return !a;
  }|;
  return;
}

procedure G'(x: int, y: int) returns (z: bool) {
  start:
  assume x < y;
  assume (forall t: int :: x + 3 < t ==> r(t));
  assert r(y);
}

procedure G''(x: int, y: int) returns (z: bool) {
  start:
  assume x < y;
  assume (forall t: int :: |{
    var a: bool;

    Start:
      a := x + 3 < t;
      goto X, Y;
    X:
      assume a;
      return r(t);
    Y:
      assume !a;
      return true;
  }|);
  assert r(y);
}

[Input - ../../vendor/boogie/Test/codeexpr/CodeExpr1.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
// ------ the good ------

procedure F(x: int, y: int) returns (z: bool)
  requires x < y;
  ensures z == (x < 3);
{
  start:
    z := |{ var a : bool, b : bool; B: a := x < 3; return a; }|;
    return;
}

function r(int): bool;

procedure F'(x: int, y: int) returns (z: bool)
{
  start:
    assume x < y;
    assume (forall t: int :: x < 3 + t ==> r(t));
    assert r(y);
}

procedure F''(x: int, y: int) returns (z: bool)
{
  start:
    assume x < y;
    assume (forall t: int :: |{ var a: bool;
                                Start:
                                a := x < 3 + t;
                                goto X, Y;
                                X: assume a; return r(t);
                                Y: assume !a; return true;
                             }|);
    assert r(y);
}

// ------ the bad ------

procedure G(x: int, y: int) returns (z: bool)
  requires x < y;
  ensures z == (x < 3);
{
  start:
    z := |{ var a : bool, b : bool; B: a := x < 3; return !a; }|;
    return;  // error: postcondition violation
}

procedure G'(x: int, y: int) returns (z: bool)
{
  start:
    assume x < y;
    assume (forall t: int :: x + 3 < t ==> r(t));
    assert r(y);  // error
}

procedure G''(x: int, y: int) returns (z: bool)
{
  start:
    assume x < y;
    assume (forall t: int :: |{ var a: bool;
                                Start:
                                a := x + 3 < t;
                                goto X, Y;
                                X: assume a; return r(t);
                                Y: assume !a; return true;
                             }|);
    assert r(y);  // error
}
