---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "ar",
                ],
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "ar",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "ar",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "S",
                    type_params: [],
                    type_: None,
                },
                TypeDecl {
                    ident: "T",
                    type_params: [],
                    type_: None,
                },
                TypeDecl {
                    ident: "C",
                    type_params: [
                        "a",
                        "b",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "m",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "S",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "n",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "f",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "C",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "a",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "T",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "a",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "f2",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "C",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "a",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "T",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "a",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "g",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "T",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "h",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "a",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "a",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "k",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "C",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "a",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "a",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "l",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "a",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "o",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "a",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "con",
                ],
                type_: App(
                    TypeApp {
                        head: "T",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "someConst",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "b",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "C",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "b",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "b",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: FuncCall(
                            FuncCall {
                                target: "k",
                                args: [
                                    Var(
                                        "x",
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "C",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "S",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "T",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "S",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "f2",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "S",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Logical(
                            LogicalExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "l",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "n",
                                                args: [
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "con",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "m",
                                                args: [
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "g",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "h",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "g",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: Var(
                                    "x",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "b",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "b",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "h",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: Var(
                                    "x",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "b",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "b",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "b",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "o",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "o",
                                            args: [
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "o",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "someConst",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "42",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "b",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "C",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "b",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "b",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "k",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: FuncCall(
                            FuncCall {
                                target: "k",
                                args: [
                                    Var(
                                        "x",
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "C",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "S",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "S",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "C",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "S",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "T",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v2",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "S",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v3",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "ar",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Nat(
                                                                    "27",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: BoolLit(
                                                false,
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "k",
                                            args: [
                                                Var(
                                                    "v0",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "v1",
                                                        ),
                                                        Var(
                                                            "v2",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "f2",
                                                    args: [
                                                        Var(
                                                            "v1",
                                                        ),
                                                        Var(
                                                            "v2",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "n",
                                                    args: [
                                                        Var(
                                                            "v3",
                                                        ),
                                                        Var(
                                                            "con",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "m",
                                                    args: [
                                                        Var(
                                                            "v3",
                                                        ),
                                                        Var(
                                                            "v2",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Q",
                type_params: [
                    "a",
                ],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "a",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "someConst",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "42",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "o",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "o",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "someConst",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "42",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "someConst",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "43",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
const ar: [int]bool;

axiom (forall x: int :: {ar[x]} !ar[x]);

type S,
  T,
  C a b;

function m(T, S): bool;

function n(T, T): bool;

function f<a>(C a T, a): int;

function f2<a>(C a T, a): int;

function g(T): T;

function h<a>(a): a;

function k<a>(C a a): bool;

function l<a>(a): bool;

function o<a>(a): bool;

const con: T;

const someConst: int;

axiom (forall <b> x: C b b :: k(x));

axiom (forall x: C S T, y: S :: f(x, y) == f2(x, y));

axiom (forall x: S, y: T :: l(x) && n(y, con) == m(y, x));

axiom (forall x: T :: {g(h(x))} {g(x)} x == x);

axiom (forall <b> x: b :: {h(x)} x == x);

axiom (forall <b> x: b, y: b :: {o(x), o(y)} o(x) ==> someConst == 42);

axiom (forall <b> x: C b b :: {k(x)} k(x));

procedure P() {
  var v0: C S S, v1: C S T, v2: S, v3: T;

  assert ar[27] == false;
  assert k(v0);
  assert f(v1, v2) == f2(v1, v2);
  assert n(v3, con) == m(v3, v2);
}

procedure Q<a>(x: a) {
  assert someConst == 42;
  assume o(x) == o(x);
  assert someConst == 42;
  assert someConst == 43;
}

[Input - ../../vendor/boogie/Test/test21/Triggers0.bpl]
// RUN: %boogie -typeEncoding:p -logPrefix:0p "%s" > "%t"
// RUN: %diff "%s.p.expect" "%t"
// RUN: %boogie -typeEncoding:a -logPrefix:0a "%s" > "%t"
// RUN: %diff "%s.a.expect" "%t"


const ar : [int]bool;
axiom (forall x:int :: {ar[x]} !ar[x]);

type S, T, C a b;

function m(T,S) returns (bool);
function n(T,T) returns (bool);
function f<a>(C a T, a) returns (int);
function f2<a>(C a T, a) returns (int);
function g(T) returns (T);
function h<a>(a) returns (a);
function k<a>(C a a) returns (bool);
function l<a>(a) returns (bool);
function o<a>(a) returns (bool);

const con : T;
const someConst : int;

axiom (forall <b> x:C b b :: k(x));
axiom (forall x:C S T, y : S :: f(x,y) == f2(x,y));
axiom (forall x:S, y:T :: l(x) && n(y, con) == m(y,x));
axiom (forall x:T :: {g(h(x))} {g(x)} x == x);
axiom (forall <b> x:b :: {h(x)} x == x);
axiom (forall <b> x:b, y:b :: {o(x), o(y)} o(x) ==> someConst == 42);
axiom (forall <b> x:C b b :: {k(x)} k(x));

procedure P() returns () {
  var v0 : C S S, v1 : C S T, v2 : S, v3 : T;

  assert ar[27] == false;
  assert k(v0);
  assert f(v1, v2) == f2(v1, v2);
  assert n(v3, con) == m(v3, v2);
}

procedure Q<a>(x : a) returns () {
  assert someConst == 42; // should not be provable

  assume o(x) == o(x);
  assert someConst == 42;
  assert someConst == 43; // should not be provable
}
