---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "p",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "a",
                        ],
                        keys: [],
                        value: App(
                            TypeApp {
                                head: "a",
                                tail: None,
                            },
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "q",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "a",
                            "b",
                        ],
                        keys: [
                            App(
                                TypeApp {
                                    head: "a",
                                    tail: None,
                                },
                            ),
                        ],
                        value: App(
                            TypeApp {
                                head: "b",
                                tail: None,
                            },
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                                ArraySubscript {
                                    keys: [
                                        Nat(
                                            "13",
                                        ),
                                    ],
                                    value: Some(
                                        BoolLit(
                                            false,
                                        ),
                                    ),
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "q",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                                ArraySubscript {
                                    keys: [
                                        Nat(
                                            "13",
                                        ),
                                    ],
                                    value: Some(
                                        BoolLit(
                                            false,
                                        ),
                                    ),
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "c",
                ],
                type_: App(
                    TypeApp {
                        head: "bv17",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: BvTerm(
                        BvTerm {
                            lhs: BvTerm(
                                BvTerm {
                                    lhs: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "p",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    rhs: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "p",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                            rhs: Var(
                                "c",
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: BvTerm(
                        BvTerm {
                            lhs: Array(
                                ArrayExpr {
                                    expr: Var(
                                        "p",
                                    ),
                                    subscripts: [
                                        ArraySubscript {
                                            keys: [],
                                            value: None,
                                        },
                                    ],
                                },
                            ),
                            rhs: Array(
                                ArrayExpr {
                                    expr: Var(
                                        "p",
                                    ),
                                    subscripts: [
                                        ArraySubscript {
                                            keys: [],
                                            value: None,
                                        },
                                    ],
                                },
                            ),
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "c",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "c",
                    ),
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "List",
                    type_params: [
                        "_",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "emptyList",
            type_params: [
                "a",
            ],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "List",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "a",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "append",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "List",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "a",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "List",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "a",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "List",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "a",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "l",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "List",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "append",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "emptyList",
                                                    args: [],
                                                },
                                            ),
                                            Var(
                                                "l",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "l",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "l",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "List",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "append",
                                        args: [
                                            Var(
                                                "l",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "emptyList",
                                                    args: [],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "l",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "append",
                            args: [
                                FuncCall(
                                    FuncCall {
                                        target: "emptyList",
                                        args: [],
                                    },
                                ),
                                FuncCall(
                                    FuncCall {
                                        target: "emptyList",
                                        args: [],
                                    },
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: FuncCall(
                        FuncCall {
                            target: "emptyList",
                            args: [],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "l",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "List",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "l",
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "emptyList",
                                                args: [],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "append",
                                                args: [
                                                    Var(
                                                        "l",
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "emptyList",
                                                            args: [],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "emptyList",
                                                args: [],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "x",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [
                                    "a",
                                ],
                                keys: [],
                                value: App(
                                    TypeApp {
                                        head: "a",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "y",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [
                                    "a",
                                ],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "a",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "a",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "x",
                            "y",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [
                                                [],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "15",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [
                                                [],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            false,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [
                                                [],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "p",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [
                                                [],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "q",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            BoolLit(
                                                                false,
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [
                                                [
                                                    Nat(
                                                        "13",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "q",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            BoolLit(
                                                                false,
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
const p: <a>[]a;

const q: <a, b>[a]b;

axiom p[] == p[];

axiom p[][13 := false] == q;

axiom p[][13 := false] == p[];

const c: bv17;

axiom p[] ++ p[] ++ c == p[];

axiom p[] ++ p[] == c;

axiom p[] == c;

type List _;

function emptyList<a>(): List a;

function append<a>(List a, List a): List a;

axiom (forall <a> l: List a :: append(emptyList(), l) == l);

axiom (forall <a> l: List a :: append(l, emptyList()) == l);

axiom append(emptyList(), emptyList()) == emptyList();

axiom (forall <a> l: List a :: l == emptyList() ==> append(l, emptyList()) == emptyList());

var x: <a>[]a;

var y: <a>[a]a;

procedure P()
  modifies x, y;
{
  x[] := 15;
  x[] := false;
  x[] := p[];
  x[] := q[false];
  y[13] := q[false];
}

[Input - ../../vendor/boogie/Test/test20/PolyPolyPoly2.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

const p: <a>[]a;
const q: <a,b>[a]b;

axiom (p[] == p[]);               // warning
axiom (p[][13 := false] == q);
axiom (p[][13 := false] == p[]);  // warning

const c: bv17;

axiom (p[] ++ p[] ++ c == p[]);   // warning
axiom (p[] ++ p[] == c);          // warning
axiom (p[] == c);

type List _;

function emptyList<a>() returns (List a);
function append<a>(List a, List a) returns (List a);

axiom (forall<a> l:List a :: append(emptyList(), l) == l);
axiom (forall<a> l:List a :: append(l, emptyList()) == l);
axiom (append(emptyList(), emptyList()) == emptyList());   // warning
axiom (forall<a> l:List a :: l==emptyList() ==> append(l, emptyList()) == emptyList());

var x: <a>[]a;
var y: <a>[a]a;

procedure P() returns () modifies x, y; {
  x[] := 15;
  x[] := false;
  x[] := p[];       // warning
  x[] := q[false];  // warning
  y[13] := q[false];
}
