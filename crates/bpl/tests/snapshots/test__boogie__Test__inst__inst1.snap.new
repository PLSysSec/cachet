---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "PA",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "ADD",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "PA",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "INV0",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "PAs",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "PA",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "i",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [
                                                            Attr(
                                                                AttrContent {
                                                                    ident: "pool",
                                                                    params: [
                                                                        String(
                                                                            StringLit {
                                                                                text: "A0",
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "pa",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "PA",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "PAs",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "pa",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: IfThenElse(
                                                            IfThenElseExpr {
                                                                cond: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "is#ADD",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pa",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "i",
                                                                                        ),
                                                                                        op: Lt,
                                                                                        rhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "i#ADD",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "pa",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "i#ADD",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pa",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Le,
                                                                                rhs: Var(
                                                                                    "n",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                then: Nat(
                                                                    "1",
                                                                ),
                                                                else_: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [
                                                            Attr(
                                                                AttrContent {
                                                                    ident: "pool",
                                                                    params: [
                                                                        String(
                                                                            StringLit {
                                                                                text: "A0",
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "pa",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "PA",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "PAs",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "pa",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: Nat(
                                                            "0",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "A0",
                                                        },
                                                    ),
                                                    Expr(
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "ADD",
                                                                args: [
                                                                    Var(
                                                                        "n",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "INV1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "m",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "PAs",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "PA",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "i",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [
                                                            Attr(
                                                                AttrContent {
                                                                    ident: "pool",
                                                                    params: [
                                                                        String(
                                                                            StringLit {
                                                                                text: "A1",
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "pa",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "PA",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "PAs",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "pa",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: IfThenElse(
                                                            IfThenElseExpr {
                                                                cond: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "is#ADD",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pa",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "i",
                                                                                        ),
                                                                                        op: Lt,
                                                                                        rhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "i#ADD",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "pa",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "i#ADD",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pa",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Le,
                                                                                rhs: Var(
                                                                                    "n",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                then: Nat(
                                                                    "1",
                                                                ),
                                                                else_: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [
                                                            Attr(
                                                                AttrContent {
                                                                    ident: "pool",
                                                                    params: [
                                                                        String(
                                                                            StringLit {
                                                                                text: "A1",
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "pa",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "PA",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "PAs",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "pa",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: Nat(
                                                            "0",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "m",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "n",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "m",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "m",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "A1",
                                                        },
                                                    ),
                                                    Expr(
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "ADD",
                                                                args: [
                                                                    Term(
                                                                        Term {
                                                                            lhs: Var(
                                                                                "m",
                                                                            ),
                                                                            op: Sub,
                                                                            rhs: Nat(
                                                                                "2",
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "INV2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "PAs",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "PA",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "i",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "pool",
                                                                        params: [
                                                                            String(
                                                                                StringLit {
                                                                                    text: "A2",
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "pa",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "PA",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "pool",
                                                                params: [
                                                                    String(
                                                                        StringLit {
                                                                            text: "A2",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    expr: IfThenElse(
                                                        IfThenElseExpr {
                                                            cond: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "is#ADD",
                                                                                    args: [
                                                                                        Var(
                                                                                            "pa",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "i",
                                                                                    ),
                                                                                    op: Lt,
                                                                                    rhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "i#ADD",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "pa",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "i#ADD",
                                                                                    args: [
                                                                                        Var(
                                                                                            "pa",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Le,
                                                                            rhs: Var(
                                                                                "n",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            then: Nat(
                                                                "1",
                                                            ),
                                                            else_: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "pa",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "PA",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "PAs",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "pa",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: Nat(
                                                            "0",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "A2",
                                                        },
                                                    ),
                                                    Expr(
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "ADD",
                                                                args: [
                                                                    Var(
                                                                        "n",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "INV3",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "PAs",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "PA",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "i",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "PAs",
                                        ],
                                        target: "CreateLambda",
                                        params: [
                                            Var(
                                                "i",
                                            ),
                                            Var(
                                                "n",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "LookupLambda",
                                        params: [
                                            Var(
                                                "i",
                                            ),
                                            Var(
                                                "n",
                                            ),
                                            Var(
                                                "PAs",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "inline",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "CreateLambda",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "pool",
                                                                        params: [
                                                                            String(
                                                                                StringLit {
                                                                                    text: "A3",
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "pa",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "PA",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "pool",
                                                                params: [
                                                                    String(
                                                                        StringLit {
                                                                            text: "A3",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    expr: IfThenElse(
                                                        IfThenElseExpr {
                                                            cond: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "is#ADD",
                                                                                    args: [
                                                                                        Var(
                                                                                            "pa",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "i",
                                                                                    ),
                                                                                    op: Lt,
                                                                                    rhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "i#ADD",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "pa",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "i#ADD",
                                                                                    args: [
                                                                                        Var(
                                                                                            "pa",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Le,
                                                                            rhs: Var(
                                                                                "n",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            then: Nat(
                                                                "1",
                                                            ),
                                                            else_: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "inline",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "LookupLambda",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "pa",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "PA",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "PAs",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "pa",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: Nat(
                                                            "0",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "A3",
                                                        },
                                                    ),
                                                    Expr(
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "ADD",
                                                                args: [
                                                                    Var(
                                                                        "n",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
type {:datatype} PA;

function {:constructor} ADD(i: int): PA;

procedure INV0(n: int) {
  var i: int;
  var PAs: [PA]int;

  assume 0 <= i;
  assume i <= n;
  assume (forall {:pool "A0"} pa: PA :: PAs[pa] == (if is#ADD(pa) && i < i#ADD(pa) && i#ADD(pa) <= n then 1 else 0));
  assume (forall {:pool "A0"} pa: PA :: PAs[pa] == 0);
  assert {:add_to_pool "A0", ADD(n)} i == n;
}

procedure INV1(n: int) {
  var m: int;
  var i: int;
  var PAs: [PA]int;

  assume 0 <= i;
  assume i <= n;
  assume (forall {:pool "A1"} pa: PA :: PAs[pa] == (if is#ADD(pa) && i < i#ADD(pa) && i#ADD(pa) <= n then 1 else 0));
  assume (forall {:pool "A1"} pa: PA :: PAs[pa] == 0);
  m := n + 1;
  m := m + 1;
  assert {:add_to_pool "A1", ADD(m - 2)} i == n;
}

procedure INV2(n: int) {
  var i: int;
  var PAs: [PA]int;

  assume 0 <= i;
  assume i <= n;
  PAs := (lambda {:pool "A2"} pa: PA :: {:pool "A2"} if is#ADD(pa) && i < i#ADD(pa) && i#ADD(pa) <= n then 1 else 0);
  assume (forall pa: PA :: PAs[pa] == 0);
  assert {:add_to_pool "A2", ADD(n)} i == n;
}

procedure INV3(n: int) {
  var i: int;
  var PAs: [PA]int;

  assume 0 <= i;
  assume i <= n;
  call PAs := CreateLambda(i, n);
  call LookupLambda(i, n, PAs);
}

procedure {:inline 1} CreateLambda(i: int, n: int) returns (PAs: [PA]int) {
  PAs := (lambda {:pool "A3"} pa: PA :: {:pool "A3"} if is#ADD(pa) && i < i#ADD(pa) && i#ADD(pa) <= n then 1 else 0);
}

procedure {:inline 1} LookupLambda(i: int, n: int, PAs: [PA]int) {
  assume (forall pa: PA :: PAs[pa] == 0);
  assert {:add_to_pool "A3", ADD(n)} i == n;
}

[Input - ../../vendor/boogie/Test/inst/inst1.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

type {:datatype} PA;
function {:constructor} ADD(i: int) : PA;

procedure INV0(n: int)
{
  var i: int;
  var PAs: [PA]int;

  assume 0 <= i;
  assume i <= n;
  assume (forall {:pool "A0"} pa: PA :: PAs[pa] == if is#ADD(pa) && i < i#ADD(pa) && i#ADD(pa) <= n then 1 else 0);
  assume (forall {:pool "A0"} pa: PA :: PAs[pa] == 0);
  assert {:add_to_pool "A0", ADD(n)} i == n;
}

procedure INV1(n: int)
{
  var m: int;
  var i: int;
  var PAs: [PA]int;

  assume 0 <= i;
  assume i <= n;
  assume (forall {:pool "A1"} pa: PA :: PAs[pa] == if is#ADD(pa) && i < i#ADD(pa) && i#ADD(pa) <= n then 1 else 0);
  assume (forall {:pool "A1"} pa: PA :: PAs[pa] == 0);
  m := n + 1;
  m := m + 1;
  assert {:add_to_pool "A1", ADD(m-2)} i == n;
}

procedure INV2(n: int)
{
  var i: int;
  var PAs: [PA]int;

  assume 0 <= i;
  assume i <= n;
  // add all labels used in :pool attributes on bound variables to the body of the lambda
  // to avoid the lambda getting unified with the logically identical lambda on line 64
  PAs := (lambda {:pool "A2"} pa: PA :: {:pool "A2"} if is#ADD(pa) && i < i#ADD(pa) && i#ADD(pa) <= n then 1 else 0);
  assume (forall pa: PA :: PAs[pa] == 0);
  assert {:add_to_pool "A2", ADD(n)} i == n;
}

procedure INV3(n: int)
{
  var i: int;
  var PAs: [PA]int;

  assume 0 <= i;
  assume i <= n;

  call PAs := CreateLambda(i, n);
  call LookupLambda(i, n, PAs);
}

procedure {:inline 1} CreateLambda(i: int, n: int) returns (PAs: [PA]int)
{
  // add all labels used in :pool attributes on bound variables to the body of the lambda
  // to avoid the lambda getting unified with the logically identical lambda on line 43
  PAs := (lambda {:pool "A3"} pa: PA :: {:pool "A3"} if is#ADD(pa) && i < i#ADD(pa) && i#ADD(pa) <= n then 1 else 0);
}

procedure {:inline 1} LookupLambda(i: int, n: int, PAs: [PA]int)
{
  assume (forall pa: PA :: PAs[pa] == 0);
  assert {:add_to_pool "A3", ADD(n)} i == n;
}
