---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "Incorrect",
                        params: [
                            Expr(
                                BvTerm(
                                    BvTerm {
                                        lhs: Var(
                                            "pux0",
                                        ),
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "F0",
                                                args: [
                                                    Var(
                                                        "pux1",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "pux0",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "Incorrect",
                        params: [
                            Expr(
                                Term(
                                    Term {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "F0",
                                                args: [
                                                    Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "pux0",
                                                            ),
                                                            op: Lt,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Add,
                                        rhs: Var(
                                            "pux1",
                                        ),
                                    },
                                ),
                            ),
                        ],
                    },
                ),
            ],
            ident: "F0",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "Incorrect",
                        params: [
                            Expr(
                                FuncCall(
                                    FuncCall {
                                        target: "F0",
                                        args: [
                                            Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "pux0",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "pux1",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ),
                        ],
                    },
                ),
            ],
            proposition: BoolLit(
                true,
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "Incorrect",
                        params: [
                            Expr(
                                Logical(
                                    LogicalExpr {
                                        lhs: Var(
                                            "pux0",
                                        ),
                                        op: And,
                                        rhs: Var(
                                            "pux1",
                                        ),
                                    },
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "pux1",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "Incorrect",
                            params: [
                                Expr(
                                    Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Term(
                                                Term {
                                                    lhs: Var(
                                                        "pux0",
                                                    ),
                                                    op: Sub,
                                                    rhs: Var(
                                                        "pux1",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "Incorrect",
                            params: [
                                Expr(
                                    Implies(
                                        ImpliesExpr {
                                            lhs: Var(
                                                "pux0",
                                            ),
                                            rhs: Var(
                                                "pux1",
                                            ),
                                        },
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [],
            },
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "Correct",
                        params: [
                            Expr(
                                Term(
                                    Term {
                                        lhs: Var(
                                            "hux0",
                                        ),
                                        op: Add,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "F1",
                                                args: [
                                                    Var(
                                                        "hux1",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "hux0",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "Correct",
                        params: [
                            Expr(
                                Term(
                                    Term {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "F1",
                                                args: [
                                                    Var(
                                                        "hux0",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Add,
                                        rhs: Var(
                                            "hux1",
                                        ),
                                    },
                                ),
                            ),
                        ],
                    },
                ),
            ],
            ident: "F1",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "Correct",
                        params: [
                            Expr(
                                FuncCall(
                                    FuncCall {
                                        target: "F1",
                                        args: [
                                            Term(
                                                Term {
                                                    lhs: Var(
                                                        "hux0",
                                                    ),
                                                    op: Add,
                                                    rhs: Var(
                                                        "hux1",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ),
                        ],
                    },
                ),
            ],
            proposition: BoolLit(
                true,
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "Correct",
                        params: [
                            Expr(
                                Factor(
                                    Factor {
                                        lhs: Var(
                                            "hux0",
                                        ),
                                        op: Mul,
                                        rhs: Var(
                                            "hux1",
                                        ),
                                    },
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "hux1",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "Correct",
                            params: [
                                Expr(
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "hux0",
                                            ),
                                            op: Sub,
                                            rhs: Var(
                                                "hux1",
                                            ),
                                        },
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "H",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "Correct",
                            params: [
                                Expr(
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "hux0",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "hux1",
                                            ),
                                        },
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "AlsoCorrect",
                            params: [
                                String(
                                    StringLit {
                                        text: "hello",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "H",
                type_params: [],
                var_params: [],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [],
            },
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "any",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
]

[Printed]
const {:Incorrect pux0 ++ F0(pux1)} pux0: int;

function {:Incorrect F0(pux0 < 0) + pux1} F0(int): int;

axiom {:Incorrect F0(pux0 == pux1)} true;

var {:Incorrect pux0 && pux1} pux1: int;

procedure {:Incorrect !(pux0 - pux1)} P();

implementation {:Incorrect pux0 ==> pux1} P() {
}

const {:Correct hux0 + F1(hux1)} hux0: int;

function {:Correct F1(hux0) + hux1} F1(int): int;

axiom {:Correct F1(hux0 + hux1)} true;

var {:Correct hux0 * hux1} hux1: int;

procedure {:Correct hux0 - hux1} H();

implementation {:Correct hux0 + hux1} {:AlsoCorrect "hello"} H() {
}

type any;

[Input - ../../vendor/boogie/Test/test1/AttributeTyping.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"


const {:Incorrect pux0 ++ F0(pux1)} pux0: int;

function {:Incorrect F0(pux0 < 0) + pux1} F0(int) returns (int);

axiom {:Incorrect F0(pux0 == pux1)} true;

var {:Incorrect pux0 && pux1} pux1: int;

procedure {:Incorrect !(pux0 - pux1)} P();

implementation {:Incorrect pux0 ==> pux1} P()
{
}

// ------  and here are various correct things



const {:Correct hux0 + F1(hux1)} hux0: int;

function {:Correct F1(hux0) + hux1} F1(int) returns (int);

axiom {:Correct F1(hux0 + hux1)} true;

var {:Correct hux0*hux1} hux1: int;

procedure {:Correct hux0 - hux1} H();

implementation {:Correct hux0 + hux1} {:AlsoCorrect "hello"} H()
{
}


type any;
