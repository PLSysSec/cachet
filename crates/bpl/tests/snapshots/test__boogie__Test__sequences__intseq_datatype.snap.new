---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "Value",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "Integer",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Value",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "Vector",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ValueArray",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Value",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "Seq",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "Seq",
                    type_params: [
                        "_",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.empty",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Empty_Value",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "Value",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.len",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Len_Value",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "Value",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.++",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Concat_Value",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "Value",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "Value",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "Value",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.unit",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Unit_Value",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Value",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "Value",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.nth",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Nth_Value",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "Value",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Value",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.extract",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Extract_Value",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "Value",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pos",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "length",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "Value",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "ValueArray",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "ValueArray",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "Value",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "ValueArray",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "EmptyValueArray",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "ValueArray",
                        tail: None,
                    },
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "ValueArray",
                        args: [
                            FuncCall(
                                FuncCall {
                                    target: "Seq_Empty_Value",
                                    args: [],
                                },
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "AddValueArray",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ValueArray",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Value",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "ValueArray",
                        tail: None,
                    },
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "ValueArray",
                        args: [
                            FuncCall(
                                FuncCall {
                                    target: "Seq_Concat_Value",
                                    args: [
                                        FuncCall(
                                            FuncCall {
                                                target: "v#ValueArray",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        FuncCall(
                                            FuncCall {
                                                target: "Seq_Unit_Value",
                                                args: [
                                                    Var(
                                                        "v",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "RemoveValueArray",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ValueArray",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "ValueArray",
                        tail: None,
                    },
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "ValueArray",
                        args: [
                            FuncCall(
                                FuncCall {
                                    target: "Seq_Extract_Value",
                                    args: [
                                        FuncCall(
                                            FuncCall {
                                                target: "v#ValueArray",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        Nat(
                                            "0",
                                        ),
                                        Term(
                                            Term {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "Seq_Len_Value",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "v#ValueArray",
                                                                    args: [
                                                                        Var(
                                                                            "a",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Sub,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "ConcatValueArray",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ValueArray",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a2",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ValueArray",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "ValueArray",
                        tail: None,
                    },
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "ValueArray",
                        args: [
                            FuncCall(
                                FuncCall {
                                    target: "Seq_Concat_Value",
                                    args: [
                                        FuncCall(
                                            FuncCall {
                                                target: "v#ValueArray",
                                                args: [
                                                    Var(
                                                        "a1",
                                                    ),
                                                ],
                                            },
                                        ),
                                        FuncCall(
                                            FuncCall {
                                                target: "v#ValueArray",
                                                args: [
                                                    Var(
                                                        "a2",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "IsEmpty",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ValueArray",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Rel(
                    RelExpr {
                        lhs: FuncCall(
                            FuncCall {
                                target: "Seq_Len_Value",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v#ValueArray",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                        op: Eq,
                        rhs: Nat(
                            "0",
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "LenValueArray",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ValueArray",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "Seq_Len_Value",
                        args: [
                            FuncCall(
                                FuncCall {
                                    target: "v#ValueArray",
                                    args: [
                                        Var(
                                            "a",
                                        ),
                                    ],
                                },
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "ValueArrayAt",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ValueArray",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Value",
                        tail: None,
                    },
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "Seq_Nth_Value",
                        args: [
                            FuncCall(
                                FuncCall {
                                    target: "v#ValueArray",
                                    args: [
                                        Var(
                                            "a",
                                        ),
                                    ],
                                },
                            ),
                            Var(
                                "i",
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "test",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ValueArray",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "EmptyValueArray",
                                                args: [],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "IsEmpty",
                                            args: [
                                                Var(
                                                    "s",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "AddValueArray",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Integer",
                                                            args: [
                                                                Nat(
                                                                    "0",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "AddValueArray",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Integer",
                                                            args: [
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "AddValueArray",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Integer",
                                                            args: [
                                                                Nat(
                                                                    "2",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "LenValueArray",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "3",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "ValueArrayAt",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                        Nat(
                                                            "1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "Integer",
                                                    args: [
                                                        Nat(
                                                            "1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "RemoveValueArray",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "LenValueArray",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "2",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "ConcatValueArray",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    Var(
                                                        "s",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "LenValueArray",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "4",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "ValueArrayAt",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "Integer",
                                                    args: [
                                                        Nat(
                                                            "1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
type {:datatype} Value;

function {:constructor} Integer(i: int): Value;

function {:constructor} Vector(v: ValueArray): Value;

type {:builtin "Seq"} Seq _;

function {:builtin "seq.empty"} Seq_Empty_Value(): Seq Value;

function {:builtin "seq.len"} Seq_Len_Value(a: Seq Value): int;

function {:builtin "seq.++"} Seq_Concat_Value(a: Seq Value, b: Seq Value): Seq Value;

function {:builtin "seq.unit"} Seq_Unit_Value(v: Value): Seq Value;

function {:builtin "seq.nth"} Seq_Nth_Value(a: Seq Value, i: int): Value;

function {:builtin "seq.extract"} Seq_Extract_Value(a: Seq Value, pos: int, length: int): Seq Value;

type {:datatype} ValueArray;

function {:constructor} ValueArray(v: Seq Value): ValueArray;

function {:inline} EmptyValueArray(): ValueArray {
  ValueArray(Seq_Empty_Value())
}

function {:inline} AddValueArray(a: ValueArray, v: Value): ValueArray {
  ValueArray(Seq_Concat_Value(v#ValueArray(a), Seq_Unit_Value(v)))
}

function {:inline} RemoveValueArray(a: ValueArray): ValueArray {
  ValueArray(Seq_Extract_Value(v#ValueArray(a), 0, Seq_Len_Value(v#ValueArray(a)) - 1))
}

function {:inline} ConcatValueArray(a1: ValueArray, a2: ValueArray): ValueArray {
  ValueArray(Seq_Concat_Value(v#ValueArray(a1), v#ValueArray(a2)))
}

function {:inline} IsEmpty(a: ValueArray): bool {
  Seq_Len_Value(v#ValueArray(a)) == 0
}

function {:inline} LenValueArray(a: ValueArray): int {
  Seq_Len_Value(v#ValueArray(a))
}

function {:inline} ValueArrayAt(a: ValueArray, i: int): Value {
  Seq_Nth_Value(v#ValueArray(a), i)
}

procedure test() {
  var s: ValueArray;

  s := EmptyValueArray();
  assert IsEmpty(s);
  s := AddValueArray(s, Integer(0));
  s := AddValueArray(s, Integer(1));
  s := AddValueArray(s, Integer(2));
  assert LenValueArray(s) == 3;
  assert ValueArrayAt(s, 1) == Integer(1);
  s := RemoveValueArray(s);
  assert LenValueArray(s) == 2;
  s := ConcatValueArray(s, s);
  assert LenValueArray(s) == 4;
  assert ValueArrayAt(s, 3) == Integer(1);
}

[Input - ../../vendor/boogie/Test/sequences/intseq_datatype.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

type {:datatype} Value;

function {:constructor} Integer(i: int): Value;
function {:constructor} Vector(v: ValueArray): Value;

type {:builtin "Seq"} Seq _;
function {:builtin "seq.empty"} Seq_Empty_Value(): Seq Value;
function {:builtin "seq.len"} Seq_Len_Value(a: Seq Value): int;
function {:builtin "seq.++"} Seq_Concat_Value(a: Seq Value, b: Seq Value): Seq Value;
function {:builtin "seq.unit"} Seq_Unit_Value(v: Value): Seq Value;
function {:builtin "seq.nth"} Seq_Nth_Value(a: Seq Value, i: int): Value;
function {:builtin "seq.extract"} Seq_Extract_Value(a: Seq Value, pos: int, length: int): Seq Value;

type {:datatype} ValueArray;
function {:constructor} ValueArray(v: Seq Value): ValueArray;
function {:inline} EmptyValueArray(): ValueArray {
    ValueArray(Seq_Empty_Value())
}
function {:inline} AddValueArray(a: ValueArray, v: Value): ValueArray {
    ValueArray(Seq_Concat_Value(v#ValueArray(a),Seq_Unit_Value(v)))
}
function {:inline} RemoveValueArray(a: ValueArray): ValueArray {
    ValueArray(Seq_Extract_Value(v#ValueArray(a), 0, Seq_Len_Value(v#ValueArray(a)) - 1))
}
function {:inline} ConcatValueArray(a1: ValueArray, a2: ValueArray): ValueArray {
    ValueArray(Seq_Concat_Value(v#ValueArray(a1), v#ValueArray(a2)))
}
function {:inline} IsEmpty(a: ValueArray): bool {
    Seq_Len_Value(v#ValueArray(a)) == 0
}
function {:inline} LenValueArray(a: ValueArray): int {
    Seq_Len_Value(v#ValueArray(a))
}
function {:inline} ValueArrayAt(a: ValueArray, i: int): Value {
    Seq_Nth_Value(v#ValueArray(a), i)
}

procedure test()
{
  var s: ValueArray;

  s := EmptyValueArray();
  assert IsEmpty(s);
  s := AddValueArray(s, Integer(0));
  s := AddValueArray(s, Integer(1));
  s := AddValueArray(s, Integer(2));
  assert LenValueArray(s) == 3;
  assert ValueArrayAt(s, 1) == Integer(1);
  s := RemoveValueArray(s);
  assert(LenValueArray(s)) == 2;
  s := ConcatValueArray(s, s);
  assert LenValueArray(s) == 4;
  assert ValueArrayAt(s, 3) == Integer(1);
}
