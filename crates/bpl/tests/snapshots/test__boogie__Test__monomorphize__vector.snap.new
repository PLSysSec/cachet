---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "test0",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Vec",
                                                tail: Some(
                                                    AtomApp(
                                                        TypeApp {
                                                            head: Int,
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vec_Append",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Empty",
                                                            args: [],
                                                        },
                                                    ),
                                                    Nat(
                                                        "0",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vec_Append",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    Nat(
                                                        "1",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vec_Append",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    Nat(
                                                        "2",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "Vec_Len",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "3",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "Vec_Nth",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                        Nat(
                                                            "1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vec_Update",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    Nat(
                                                        "1",
                                                    ),
                                                    Nat(
                                                        "3",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "Vec_Nth",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                        Nat(
                                                            "0",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "Vec_Nth",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                        Nat(
                                                            "1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "3",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "Vec_Len",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "3",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "test1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "x",
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Vec_Len",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "0",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Lt,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "Vec_Len",
                                                                    args: [
                                                                        Var(
                                                                            "s",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Nat(
                                                        "0",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Vec_Nth",
                                        args: [
                                            Var(
                                                "s",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "test2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "y",
                                        ),
                                        op: Lt,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Vec_Len",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                        "j",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Nat(
                                                                        "0",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "i",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "i",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "j",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "j",
                                                            ),
                                                            op: Lt,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "Vec_Len",
                                                                    args: [
                                                                        Var(
                                                                            "s",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Le,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                                Var(
                                                                    "j",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Vec_Nth",
                                        args: [
                                            Var(
                                                "s",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Le,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Vec_Nth",
                                        args: [
                                            Var(
                                                "s",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "lookup",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "b",
                                ),
                                op: Eq,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "i",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Nat(
                                                                        "0",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "i",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "i",
                                                                    ),
                                                                    op: Lt,
                                                                    rhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "Vec_Len",
                                                                            args: [
                                                                                Var(
                                                                                    "s",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Eq,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "Vec_Nth",
                                                                    args: [
                                                                        Var(
                                                                            "s",
                                                                        ),
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "b",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            false,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "i",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Lt,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "Vec_Len",
                                                        args: [
                                                            Var(
                                                                "s",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [],
                                            expr: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "u",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Nat(
                                                                                    "0",
                                                                                ),
                                                                                op: Le,
                                                                                rhs: Var(
                                                                                    "u",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "u",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Var(
                                                                                    "i",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "x",
                                                                        ),
                                                                        op: Neq,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "Vec_Nth",
                                                                                args: [
                                                                                    Var(
                                                                                        "s",
                                                                                    ),
                                                                                    Var(
                                                                                        "u",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Nat(
                                                        "0",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "i",
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "Vec_Nth",
                                                                        args: [
                                                                            Var(
                                                                                "s",
                                                                            ),
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "x",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "b",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        BoolLit(
                                                                            true,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        TransferCmd(
                                                            Return(
                                                                ReturnCmd,
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "i",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "equality",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s'",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Vec_Len",
                                        args: [
                                            Var(
                                                "s",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Vec_Len",
                                        args: [
                                            Var(
                                                "s'",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "0",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Lt,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "Vec_Len",
                                                                    args: [
                                                                        Var(
                                                                            "s",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s'",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "s",
                                ),
                                op: Eq,
                                rhs: Var(
                                    "s'",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "update",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pos",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s'",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "pos",
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "pos",
                                        ),
                                        op: Lt,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Vec_Len",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Vec_Nth",
                                        args: [
                                            Var(
                                                "s",
                                            ),
                                            Var(
                                                "pos",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "val",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "s'",
                                ),
                                op: Eq,
                                rhs: Var(
                                    "s",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vec_Update",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    Var(
                                                        "pos",
                                                    ),
                                                    Var(
                                                        "val",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "sorted_update",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pos",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s'",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                        "j",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Nat(
                                                                        "0",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "i",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "i",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "j",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "j",
                                                            ),
                                                            op: Lt,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "Vec_Len",
                                                                    args: [
                                                                        Var(
                                                                            "s",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Le,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                                Var(
                                                                    "j",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "pos",
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "pos",
                                        ),
                                        op: Lt,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Vec_Len",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "0",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Lt,
                                                            rhs: Var(
                                                                "pos",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "val",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "pos",
                                                            ),
                                                            op: Lt,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Lt,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "Vec_Len",
                                                                    args: [
                                                                        Var(
                                                                            "s",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "val",
                                                    ),
                                                    op: Le,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                        "j",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Nat(
                                                                        "0",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "i",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "i",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "j",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "j",
                                                            ),
                                                            op: Lt,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "Vec_Len",
                                                                    args: [
                                                                        Var(
                                                                            "s'",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s'",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Le,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s'",
                                                                ),
                                                                Var(
                                                                    "j",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vec_Update",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    Var(
                                                        "pos",
                                                    ),
                                                    Var(
                                                        "val",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "sorted_insert",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s'",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                        "j",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Nat(
                                                                        "0",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "i",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "i",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "j",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "j",
                                                            ),
                                                            op: Lt,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "Vec_Len",
                                                                    args: [
                                                                        Var(
                                                                            "s",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Le,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                                Var(
                                                                    "j",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                        "j",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Nat(
                                                                        "0",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "i",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "i",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "j",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "j",
                                                            ),
                                                            op: Lt,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "Vec_Len",
                                                                    args: [
                                                                        Var(
                                                                            "s'",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s'",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Le,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "Vec_Nth",
                                                            args: [
                                                                Var(
                                                                    "s'",
                                                                ),
                                                                Var(
                                                                    "j",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "pos",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "val",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "pos",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "pos",
                                                        ),
                                                        op: Lt,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "Vec_Len",
                                                                args: [
                                                                    Var(
                                                                        "s",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "Vec_Nth",
                                                                args: [
                                                                    Var(
                                                                        "s",
                                                                    ),
                                                                    Var(
                                                                        "pos",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "x",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Nat(
                                                        "0",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "pos",
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [],
                                            expr: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "i",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Nat(
                                                                                    "0",
                                                                                ),
                                                                                op: Le,
                                                                                rhs: Var(
                                                                                    "i",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "i",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Var(
                                                                                    "pos",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "Vec_Nth",
                                                                                args: [
                                                                                    Var(
                                                                                        "s",
                                                                                    ),
                                                                                    Var(
                                                                                        "i",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Le,
                                                                        rhs: Var(
                                                                            "x",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "pos",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "pos",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "val",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "s",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "pos",
                                                ),
                                                op: Lt,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "Vec_Len",
                                                        args: [
                                                            Var(
                                                                "s'",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Nat(
                                                        "0",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "pos",
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [],
                                            expr: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "i",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Nat(
                                                                                    "0",
                                                                                ),
                                                                                op: Le,
                                                                                rhs: Var(
                                                                                    "i",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "i",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Var(
                                                                                    "pos",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "Vec_Nth",
                                                                                args: [
                                                                                    Var(
                                                                                        "s'",
                                                                                    ),
                                                                                    Var(
                                                                                        "i",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Le,
                                                                        rhs: Var(
                                                                            "val",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [],
                                            expr: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "i",
                                                                            "j",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Nat(
                                                                                            "0",
                                                                                        ),
                                                                                        op: Le,
                                                                                        rhs: Var(
                                                                                            "i",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "i",
                                                                                        ),
                                                                                        op: Le,
                                                                                        rhs: Var(
                                                                                            "j",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "j",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "Vec_Len",
                                                                                        args: [
                                                                                            Var(
                                                                                                "s'",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "Vec_Nth",
                                                                                args: [
                                                                                    Var(
                                                                                        "s'",
                                                                                    ),
                                                                                    Var(
                                                                                        "i",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Le,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "Vec_Nth",
                                                                                args: [
                                                                                    Var(
                                                                                        "s'",
                                                                                    ),
                                                                                    Var(
                                                                                        "j",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [],
                                            expr: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "i",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "pos",
                                                                                ),
                                                                                op: Le,
                                                                                rhs: Var(
                                                                                    "i",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "i",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "Vec_Len",
                                                                                        args: [
                                                                                            Var(
                                                                                                "s'",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "val",
                                                                        ),
                                                                        op: Le,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "Vec_Nth",
                                                                                args: [
                                                                                    Var(
                                                                                        "s'",
                                                                                    ),
                                                                                    Var(
                                                                                        "i",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "s'",
                                                            subscripts: [],
                                                        },
                                                        AssignLhs {
                                                            ident: "val",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "Vec_Update",
                                                                args: [
                                                                    Var(
                                                                        "s'",
                                                                    ),
                                                                    Var(
                                                                        "pos",
                                                                    ),
                                                                    Var(
                                                                        "val",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "Vec_Nth",
                                                                args: [
                                                                    Var(
                                                                        "s'",
                                                                    ),
                                                                    Var(
                                                                        "pos",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "pos",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "pos",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vec_Append",
                                                args: [
                                                    Var(
                                                        "s'",
                                                    ),
                                                    Var(
                                                        "val",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "Value",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "Integer",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Value",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "Vector",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "Value",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Value",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "test3",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Value",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val'",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Value",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "is#Vector",
                                                args: [
                                                    Var(
                                                        "val",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "Vec_Len",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "v#Vector",
                                                                    args: [
                                                                        Var(
                                                                            "val",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Vec_Nth",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v#Vector",
                                                            args: [
                                                                Var(
                                                                    "val",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Nat(
                                                        "0",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Integer",
                                                args: [
                                                    Nat(
                                                        "0",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "val",
                                ),
                                op: Eq,
                                rhs: Var(
                                    "val'",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Vec",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "Value",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vec_Empty",
                                                args: [],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vec_Append",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Integer",
                                                            args: [
                                                                Nat(
                                                                    "0",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "val'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vector",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "has_zero",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "val",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Value",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Paren(
                        Atom(
                            Bool,
                        ),
                    ),
                ),
            },
            body: Some(
                IfThenElse(
                    IfThenElseExpr {
                        cond: FuncCall(
                            FuncCall {
                                target: "is#Integer",
                                args: [
                                    Var(
                                        "val",
                                    ),
                                ],
                            },
                        ),
                        then: Rel(
                            RelExpr {
                                lhs: Var(
                                    "val",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Integer",
                                        args: [
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        else_: Quant(
                            QuantExpr {
                                kind: Exists,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "0",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Lt,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "Vec_Len",
                                                                    args: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "v#Vector",
                                                                                args: [
                                                                                    Var(
                                                                                        "val",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "has_zero",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "Vec_Nth",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "v#Vector",
                                                                            args: [
                                                                                Var(
                                                                                    "val",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    Var(
                                                                        "i",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "traverse",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Value",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "b",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "has_zero",
                                        args: [
                                            Var(
                                                "val",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Vec",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "Value",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "b",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            false,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        FuncCall(
                                            FuncCall {
                                                target: "is#Integer",
                                                args: [
                                                    Var(
                                                        "val",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "b",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "val",
                                                                ),
                                                                op: Eq,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "Integer",
                                                                        args: [
                                                                            Nat(
                                                                                "0",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        TransferCmd(
                                            Return(
                                                ReturnCmd,
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "v#Vector",
                                                args: [
                                                    Var(
                                                        "val",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "i",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Lt,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "Vec_Len",
                                                        args: [
                                                            Var(
                                                                "s",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [],
                                            expr: Neg(
                                                NegExpr {
                                                    op: Logical,
                                                    expr: Var(
                                                        "b",
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Nat(
                                                        "0",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "i",
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [],
                                            expr: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "j",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Nat(
                                                                                    "0",
                                                                                ),
                                                                                op: Le,
                                                                                rhs: Var(
                                                                                    "j",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "j",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Var(
                                                                                    "i",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Neg(
                                                                    NegExpr {
                                                                        op: Logical,
                                                                        expr: FuncCall(
                                                                            FuncCall {
                                                                                target: "has_zero",
                                                                                args: [
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "Vec_Nth",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "s",
                                                                                                ),
                                                                                                Var(
                                                                                                    "j",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "b",
                                                        ],
                                                        target: "traverse",
                                                        params: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "Vec_Nth",
                                                                    args: [
                                                                        Var(
                                                                            "s",
                                                                        ),
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Var(
                                                            "b",
                                                        ),
                                                    ),
                                                    then: [
                                                        TransferCmd(
                                                            Return(
                                                                ReturnCmd,
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [],
                                                    proposition: Neg(
                                                        NegExpr {
                                                            op: Logical,
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "has_zero",
                                                                    args: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "Vec_Nth",
                                                                                args: [
                                                                                    Var(
                                                                                        "s",
                                                                                    ),
                                                                                    Var(
                                                                                        "i",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "i",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
procedure test0() {
  var s: Vec int;

  s := Vec_Append(Vec_Empty(), 0);
  s := Vec_Append(s, 1);
  s := Vec_Append(s, 2);
  assert Vec_Len(s) == 3;
  assert Vec_Nth(s, 1) == 1;
  s := Vec_Update(s, 1, 3);
  assert Vec_Nth(s, 0) == 0;
  assert Vec_Nth(s, 1) == 3;
  assert Vec_Len(s) == 3;
}

procedure test1(s: Vec int, x: int)
  requires 0 <= x && x < Vec_Len(s);
  requires (forall i: int :: 0 <= i && i < Vec_Len(s) ==> Vec_Nth(s, i) == 0);
  ensures Vec_Nth(s, x) == 0;
{
}

procedure test2(s: Vec int, x: int, y: int)
  requires 0 <= x && x <= y && y < Vec_Len(s);
  requires (forall i, j: int :: 0 <= i && i <= j && j < Vec_Len(s) ==> Vec_Nth(s, i) <= Vec_Nth(s, j));
  ensures Vec_Nth(s, x) <= Vec_Nth(s, y);
{
}

procedure lookup(s: Vec int, x: int) returns (b: bool)
  ensures b == (exists i: int :: 0 <= i && i < Vec_Len(s) && x == Vec_Nth(s, i));
{
  var i: int;

  b := false;
  i := 0;
  while (i < Vec_Len(s))
    invariant (forall u: int :: 0 <= u && u < i ==> x != Vec_Nth(s, u));
    invariant 0 <= i;
  {
    if (Vec_Nth(s, i) == x) {
      b := true;
      return;
    }
    i := i + 1;
  }
}

procedure equality(s: Vec int, s': Vec int)
  requires Vec_Len(s) == Vec_Len(s');
  requires (forall i: int :: 0 <= i && i < Vec_Len(s) ==> Vec_Nth(s, i) == Vec_Nth(s', i));
  ensures s == s';
{
}

procedure update(s: Vec int, pos: int, val: int) returns (s': Vec int)
  requires 0 <= pos && pos < Vec_Len(s);
  requires Vec_Nth(s, pos) == val;
  ensures s' == s;
{
  s' := Vec_Update(s, pos, val);
}

procedure sorted_update(s: Vec int, pos: int, val: int) returns (s': Vec int)
  requires (forall i, j: int :: 0 <= i && i <= j && j < Vec_Len(s) ==> Vec_Nth(s, i) <= Vec_Nth(s, j));
  requires 0 <= pos && pos < Vec_Len(s);
  requires (forall i: int :: 0 <= i && i < pos ==> Vec_Nth(s, i) <= val);
  requires (forall i: int :: pos < i && i < Vec_Len(s) ==> val <= Vec_Nth(s, i));
  ensures (forall i, j: int :: 0 <= i && i <= j && j < Vec_Len(s') ==> Vec_Nth(s', i) <= Vec_Nth(s', j));
{
  s' := Vec_Update(s, pos, val);
}

procedure sorted_insert(s: Vec int, x: int) returns (s': Vec int)
  requires (forall i, j: int :: 0 <= i && i <= j && j < Vec_Len(s) ==> Vec_Nth(s, i) <= Vec_Nth(s, j));
  ensures (forall i, j: int :: 0 <= i && i <= j && j < Vec_Len(s') ==> Vec_Nth(s', i) <= Vec_Nth(s', j));
{
  var pos: int;
  var val: int;

  pos := 0;
  while (pos < Vec_Len(s) && Vec_Nth(s, pos) <= x)
    invariant 0 <= pos;
    invariant (forall i: int :: 0 <= i && i < pos ==> Vec_Nth(s, i) <= x);
  {
    pos := pos + 1;
  }
  val := x;
  s' := s;
  while (pos < Vec_Len(s'))
    invariant 0 <= pos;
    invariant (forall i: int :: 0 <= i && i < pos ==> Vec_Nth(s', i) <= val);
    invariant (forall i, j: int :: 0 <= i && i <= j && j < Vec_Len(s') ==> Vec_Nth(s', i) <= Vec_Nth(s', j));
    invariant (forall i: int :: pos <= i && i < Vec_Len(s') ==> val <= Vec_Nth(s', i));
  {
    s', val := Vec_Update(s', pos, val), Vec_Nth(s', pos);
    pos := pos + 1;
  }
  s' := Vec_Append(s', val);
}

type {:datatype} Value;

function {:constructor} Integer(i: int): Value;

function {:constructor} Vector(v: Vec Value): Value;

procedure test3(val: Value) returns (val': Value)
  requires is#Vector(val) && Vec_Len(v#Vector(val)) == 1 && Vec_Nth(v#Vector(val), 0) == Integer(0);
  ensures val == val';
{
  var s: Vec Value;

  s := Vec_Empty();
  s := Vec_Append(s, Integer(0));
  val' := Vector(s);
}

function has_zero(val: Value): (bool) {
  if is#Integer(val) then val == Integer(0) else (exists i: int :: 0 <= i && i < Vec_Len(v#Vector(val)) && has_zero(Vec_Nth(v#Vector(val), i)))
}

procedure traverse(val: Value) returns (b: bool)
  ensures b == has_zero(val);
{
  var s: Vec Value;
  var i: int;

  b := false;
  if (is#Integer(val)) {
    b := val == Integer(0);
    return;
  }
  s := v#Vector(val);
  i := 0;
  while (i < Vec_Len(s))
    invariant !b;
    invariant 0 <= i;
    invariant (forall j: int :: 0 <= j && j < i ==> !has_zero(Vec_Nth(s, j)));
  {
    call b := traverse(Vec_Nth(s, i));
    if (b) {
      return;
    }
    assert !has_zero(Vec_Nth(s, i));
    i := i + 1;
  }
}

[Input - ../../vendor/boogie/Test/monomorphize/vector.bpl]
// RUN: %boogie -lib "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

procedure test0()
{
  var s: Vec int;

  s := Vec_Append(Vec_Empty(), 0);
  s := Vec_Append(s, 1);
  s := Vec_Append(s, 2);
  assert Vec_Len(s) == 3;
  assert Vec_Nth(s, 1) == 1;
  s := Vec_Update(s, 1, 3);
  assert Vec_Nth(s, 0) == 0;
  assert Vec_Nth(s, 1) == 3;
  assert Vec_Len(s) == 3;
}

procedure test1(s: Vec int, x: int)
requires 0 <= x && x < Vec_Len(s);
requires (forall i: int :: 0 <= i && i < Vec_Len(s) ==> Vec_Nth(s, i) == 0);
ensures Vec_Nth(s, x) == 0;
{
}

procedure test2(s: Vec int, x: int, y: int)
requires 0 <= x && x <= y && y < Vec_Len(s);
requires (forall i, j: int :: 0 <= i && i <= j && j < Vec_Len(s) ==> Vec_Nth(s, i) <= Vec_Nth(s, j));
ensures Vec_Nth(s, x) <= Vec_Nth(s, y);
{
}

procedure lookup(s: Vec int, x: int) returns (b: bool)
ensures b == (exists i: int :: 0 <= i && i < Vec_Len(s) && x == Vec_Nth(s, i));
{
  var i: int;

  b := false;
  i := 0;
  while (i < Vec_Len(s))
  invariant (forall u: int :: 0 <= u && u < i ==> x != Vec_Nth(s, u));
  invariant 0 <= i;
  {
    if (Vec_Nth(s, i) == x) {
      b := true;
      return;
    }
    i := i + 1;
  }
}

procedure equality(s: Vec int, s': Vec int)
requires Vec_Len(s) == Vec_Len(s');
requires (forall i: int :: 0 <= i && i < Vec_Len(s) ==> Vec_Nth(s, i) == Vec_Nth(s', i));
ensures s == s';
{
}

procedure update(s: Vec int, pos: int, val: int) returns (s': Vec int)
requires 0 <= pos && pos < Vec_Len(s);
requires Vec_Nth(s, pos) == val;
ensures s' == s;
{
  s' := Vec_Update(s, pos, val);
}

procedure sorted_update(s: Vec int, pos: int, val: int) returns (s': Vec int)
requires (forall i, j: int :: 0 <= i && i <= j && j < Vec_Len(s) ==> Vec_Nth(s, i) <= Vec_Nth(s, j));
requires 0 <= pos && pos < Vec_Len(s);
requires (forall i: int:: 0 <= i && i < pos ==> Vec_Nth(s, i) <= val);
requires (forall i: int :: pos < i && i < Vec_Len(s) ==> val <= Vec_Nth(s, i));
ensures (forall i, j: int :: 0 <= i && i <= j && j < Vec_Len(s') ==> Vec_Nth(s', i) <= Vec_Nth(s', j));
{
  s' := Vec_Update(s, pos, val);
}

procedure sorted_insert(s: Vec int, x: int) returns (s': Vec int)
requires (forall i, j: int :: 0 <= i && i <= j && j < Vec_Len(s) ==> Vec_Nth(s, i) <= Vec_Nth(s, j));
ensures (forall i, j: int :: 0 <= i && i <= j && j < Vec_Len(s') ==> Vec_Nth(s', i) <= Vec_Nth(s', j));
{
  var pos: int;
  var val: int;

  pos := 0;
  while (pos < Vec_Len(s) && Vec_Nth(s, pos) <= x)
  invariant 0 <= pos;
  invariant (forall i: int:: 0 <= i && i < pos ==> Vec_Nth(s, i) <= x);
  {
    pos := pos + 1;
  }

  val := x;
  s' := s;
  while (pos < Vec_Len(s'))
  invariant 0 <= pos;
  invariant (forall i: int:: 0 <= i && i < pos ==> Vec_Nth(s', i) <= val);
  invariant (forall i, j: int :: 0 <= i && i <= j && j < Vec_Len(s') ==> Vec_Nth(s', i) <= Vec_Nth(s', j));
  invariant (forall i: int :: pos <= i && i < Vec_Len(s') ==> val <= Vec_Nth(s', i));
  {
    s', val := Vec_Update(s', pos, val), Vec_Nth(s', pos); // swap s'[pos] and val
    pos := pos + 1;
  }
  s' := Vec_Append(s', val);
}

type {:datatype} Value;
function {:constructor} Integer(i: int): Value;
function {:constructor} Vector(v: Vec Value): Value;

procedure test3(val: Value) returns (val': Value)
requires is#Vector(val) && Vec_Len(v#Vector(val)) == 1 && Vec_Nth(v#Vector(val), 0) == Integer(0);
ensures val == val';
{
  var s: Vec Value;

  s := Vec_Empty();
  s := Vec_Append(s, Integer(0));
  val' := Vector(s);
}

function has_zero(val: Value): (bool)
{
  if (is#Integer(val))
  then val == Integer(0)
  else (exists i: int :: 0 <= i && i < Vec_Len(v#Vector(val)) && has_zero(Vec_Nth(v#Vector(val), i)))
}

procedure traverse(val: Value) returns (b: bool)
ensures b == has_zero(val);
{
  var s: Vec Value;
  var i: int;

  b := false;
  if (is#Integer(val)) {
      b := val == Integer(0);
      return;
  }
  s := v#Vector(val);
  i := 0;
  while (i < Vec_Len(s))
  invariant !b;
  invariant 0 <= i;
  invariant (forall j: int :: 0 <= j && j < i ==> !has_zero(Vec_Nth(s, j)));
  {
    call b := traverse(Vec_Nth(s, i));
    if (b) {
        return;
    }
    assert !has_zero(Vec_Nth(s, i));
    i := i + 1;
  }
}
