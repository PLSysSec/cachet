---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "b",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "a",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: Some(
                OrderSpec {
                    parents: [
                        OrderSpecParent {
                            parent: "b",
                            is_unique: false,
                        },
                    ],
                    is_complete: true,
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "c",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: Some(
                OrderSpec {
                    parents: [
                        OrderSpecParent {
                            parent: "a",
                            is_unique: false,
                        },
                    ],
                    is_complete: false,
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "d",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: Some(
                OrderSpec {
                    parents: [
                        OrderSpecParent {
                            parent: "a",
                            is_unique: false,
                        },
                    ],
                    is_complete: false,
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "c",
                                                    ),
                                                    op: Subtype,
                                                    rhs: Var(
                                                        "b",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "d",
                                                    ),
                                                    op: Subtype,
                                                    rhs: Var(
                                                        "a",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Subtype,
                                                            rhs: Var(
                                                                "a",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Neg(
                                                        NegExpr {
                                                            op: Logical,
                                                            expr: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "x",
                                                                    ),
                                                                    op: Subtype,
                                                                    rhs: Var(
                                                                        "c",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Neq,
                                                    rhs: Var(
                                                        "a",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "d",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "b",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
const b: int;

const a: int extends b complete;

const c: int extends a;

const d: int extends a;

procedure P() {
  var x: int;

  assert c <: b && d <: a;
  assume x <: a && !(x <: c) && x != a;
  assert x <: d;
  assert b <: x;
}

[Input - ../../vendor/boogie/Test/test21/Orderings2.bpl]
// RUN: %boogie -typeEncoding:p -logPrefix:0p "%s" > "%t"
// RUN: %diff "%s.p.expect" "%t"
// RUN: %boogie -typeEncoding:a -logPrefix:0a "%s" > "%t"
// RUN: %diff "%s.a.expect" "%t"


const b:int;
const a:int extends b complete;

const c:int extends a;
const d:int extends a;

procedure P() returns () {
  var x:int;

  assert c <: b && d <: a;

  assume x <: a && !(x <: c) && x != a;
  assert x <: d;

  assert b <: x;            // should not be provable
}
