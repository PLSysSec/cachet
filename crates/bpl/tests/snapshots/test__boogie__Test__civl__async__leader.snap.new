---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "N",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "N",
                    ),
                    op: Gt,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Pid",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Int,
                        ),
                    ),
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "is_pid",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Pid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "1",
                                ),
                                op: Le,
                                rhs: Var(
                                    "pid",
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "pid",
                                ),
                                op: Le,
                                rhs: Var(
                                    "N",
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "Perm",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "Perm",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "Perm",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Pid",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "r",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Pid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Perm",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "is_perm",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Pid",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "r",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Pid",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "p",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Perm",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "p",
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Perm",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "is_pid",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "s#Perm",
                                                    args: [
                                                        Var(
                                                            "p",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: FuncCall(
                            FuncCall {
                                target: "is_pid",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "r#Perm",
                                            args: [
                                                Var(
                                                    "p",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "decision_function",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "pid",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "is_pid",
                                                            args: [
                                                                Var(
                                                                    "pid",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "x",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "pid",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "y",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "pid",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "decision_function",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "decision_function",
                                                args: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "2",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "init_val",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "col_dom",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "col_val",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "2",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "dec_dom",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "2",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "dec_val",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "inv_val",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s_bound",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "init_val",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "col_dom",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Map(
                                MapType {
                                    type_params: [],
                                    keys: [
                                        Atom(
                                            Int,
                                        ),
                                    ],
                                    value: Atom(
                                        Bool,
                                    ),
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "col_val",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Map(
                                MapType {
                                    type_params: [],
                                    keys: [
                                        Atom(
                                            Int,
                                        ),
                                    ],
                                    value: Atom(
                                        Int,
                                    ),
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "inv_val'",
                        args: [
                            Var(
                                "s_bound",
                            ),
                            Nat(
                                "0",
                            ),
                            Var(
                                "init_val",
                            ),
                            Var(
                                "col_dom",
                            ),
                            Var(
                                "col_val",
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "inv_val'",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s_bound",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "r_bound",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "init_val",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "col_dom",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Map(
                                MapType {
                                    type_params: [],
                                    keys: [
                                        Atom(
                                            Int,
                                        ),
                                    ],
                                    value: Atom(
                                        Bool,
                                    ),
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "col_val",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Map(
                                MapType {
                                    type_params: [],
                                    keys: [
                                        Atom(
                                            Int,
                                        ),
                                    ],
                                    value: Atom(
                                        Int,
                                    ),
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "s",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "r",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "is_pid",
                                                                    args: [
                                                                        Var(
                                                                            "s",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "s",
                                                                    ),
                                                                    op: Lt,
                                                                    rhs: Var(
                                                                        "s_bound",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "is_pid",
                                                            args: [
                                                                Var(
                                                                    "r",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Logical(
                                                LogicalExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "col_dom",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "r",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "s",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "col_val",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "r",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "s",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "init_val",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "s",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        op: And,
                        rhs: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "r",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "is_pid",
                                                            args: [
                                                                Var(
                                                                    "r",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "r",
                                                            ),
                                                            op: Lt,
                                                            rhs: Var(
                                                                "r_bound",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Logical(
                                                LogicalExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "col_dom",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "r",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "s_bound",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "col_val",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "r",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "s_bound",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "init_val",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "s_bound",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "all_decided",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "init_val",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "dec_dom",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "dec_val",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "all_decided'",
                        args: [
                            Term(
                                Term {
                                    lhs: Var(
                                        "N",
                                    ),
                                    op: Add,
                                    rhs: Nat(
                                        "1",
                                    ),
                                },
                            ),
                            Var(
                                "init_val",
                            ),
                            Var(
                                "dec_dom",
                            ),
                            Var(
                                "dec_val",
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "all_decided'",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "r_bound",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "init_val",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "dec_dom",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "dec_val",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: ForAll,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "r",
                                            ],
                                            type_: Atom(
                                                Int,
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Implies(
                                ImpliesExpr {
                                    lhs: Logical(
                                        LogicalExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "is_pid",
                                                    args: [
                                                        Var(
                                                            "r",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "r",
                                                    ),
                                                    op: Lt,
                                                    rhs: Var(
                                                        "r_bound",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    rhs: Logical(
                                        LogicalExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "dec_dom",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "r",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "dec_val",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "r",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "decision_function",
                                                            args: [
                                                                Var(
                                                                    "init_val",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "main_atomic",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Perm",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "perms",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Perm",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "col_dom",
                            "col_val",
                            "dec_dom",
                            "dec_val",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "dec_dom",
                                        "dec_val",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "all_decided",
                                            args: [
                                                Var(
                                                    "init_val",
                                                ),
                                                Var(
                                                    "dec_dom",
                                                ),
                                                Var(
                                                    "dec_val",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "main_atomic",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "main",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Perm",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "perms",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Perm",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "perms",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "all_perms",
                                        args: [],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "all_decided",
                                args: [
                                    Var(
                                        "init_val",
                                    ),
                                    Var(
                                        "dec_dom",
                                    ),
                                    Var(
                                        "dec_val",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "Perm",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "perms'",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "Perm",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "Perm",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "perms''",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "Perm",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "s",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "1",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "perms'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "perms",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "s",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "N",
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "cooperates",
                                                        params: [],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "perms'",
                                                    ),
                                                    op: Eq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "s_perms_geq",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "inv_val",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                        Var(
                                                            "init_val",
                                                        ),
                                                        Var(
                                                            "col_dom",
                                                        ),
                                                        Var(
                                                            "col_val",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "s",
                                                            ),
                                                            op: Gt,
                                                            rhs: Var(
                                                                "N",
                                                            ),
                                                        },
                                                    ),
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "all_decided",
                                                            args: [
                                                                Var(
                                                                    "init_val",
                                                                ),
                                                                Var(
                                                                    "dec_dom",
                                                                ),
                                                                Var(
                                                                    "dec_val",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "perms'",
                                                            "perms''",
                                                        ],
                                                        target: "split_perms_sender",
                                                        params: [
                                                            Var(
                                                                "s",
                                                            ),
                                                            Var(
                                                                "perms'",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "sync",
                                                                params: [],
                                                            },
                                                        ),
                                                    ],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "P",
                                                        params: [
                                                            Var(
                                                                "s",
                                                            ),
                                                            Var(
                                                                "perms''",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: true,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "s",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "s",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                ],
                ident: "P",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Perm",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "perms",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Perm",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "perms",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "s_perms_eq",
                                        args: [
                                            Var(
                                                "s",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "inv_val",
                                args: [
                                    Var(
                                        "s",
                                    ),
                                    Var(
                                        "init_val",
                                    ),
                                    Var(
                                        "col_dom",
                                    ),
                                    Var(
                                        "col_val",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "inv_val",
                                args: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "s",
                                            ),
                                            op: Add,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                    Var(
                                        "init_val",
                                    ),
                                    Var(
                                        "col_dom",
                                    ),
                                    Var(
                                        "col_val",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "s",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "N",
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "all_decided",
                                        args: [
                                            Var(
                                                "init_val",
                                            ),
                                            Var(
                                                "dec_dom",
                                            ),
                                            Var(
                                                "dec_val",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "col_dom",
                            "col_val",
                            "dec_dom",
                            "dec_val",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "Perm",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "p",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Perm",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "Perm",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "perms'",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "Perm",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "perms'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "perms",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "r",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "1",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "v",
                                        ],
                                        target: "read_init_val",
                                        params: [
                                            Var(
                                                "s",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "r",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "N",
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "cooperates",
                                                        params: [],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "perms'",
                                                    ),
                                                    op: Eq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "s_r_perms_geq",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                                Var(
                                                                    "r",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "inv_val'",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                        Var(
                                                            "r",
                                                        ),
                                                        Var(
                                                            "init_val",
                                                        ),
                                                        Var(
                                                            "col_dom",
                                                        ),
                                                        Var(
                                                            "col_val",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "s",
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "N",
                                                            ),
                                                        },
                                                    ),
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "all_decided'",
                                                            args: [
                                                                Var(
                                                                    "r",
                                                                ),
                                                                Var(
                                                                    "init_val",
                                                                ),
                                                                Var(
                                                                    "dec_dom",
                                                                ),
                                                                Var(
                                                                    "dec_val",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "perms'",
                                                            "p",
                                                        ],
                                                        target: "split_perms_receiver",
                                                        params: [
                                                            Var(
                                                                "s",
                                                            ),
                                                            Var(
                                                                "r",
                                                            ),
                                                            Var(
                                                                "perms'",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "sync",
                                                                params: [],
                                                            },
                                                        ),
                                                    ],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "Q",
                                                        params: [
                                                            Var(
                                                                "r",
                                                            ),
                                                            Var(
                                                                "s",
                                                            ),
                                                            Var(
                                                                "v",
                                                            ),
                                                            Var(
                                                                "p",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: true,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "r",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "r",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Q_atomic",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "r",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Perm",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "p",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Perm",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "col_dom",
                            "col_val",
                            "dec_dom",
                            "dec_val",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "is_perm",
                                            args: [
                                                Var(
                                                    "s",
                                                ),
                                                Var(
                                                    "r",
                                                ),
                                                Var(
                                                    "p",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "col_dom",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "s",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            true,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "col_val",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "s",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "v",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Quant(
                                            QuantExpr {
                                                kind: ForAll,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "pid",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Implies(
                                                        ImpliesExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "is_pid",
                                                                    args: [
                                                                        Var(
                                                                            "pid",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "col_dom",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "r",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "pid",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "dec_dom",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "r",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "dec_val",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "r",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "decision_function",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "col_val",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "r",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "read_init_val_atomic",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "v",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "init_val",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "pid",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "Q_atomic",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Q",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "r",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Perm",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "p",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Perm",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "read_init_val_atomic",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "read_init_val",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            ident: "all_perms",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "Perm",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: Lambda,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "p",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "Perm",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Logical(
                                LogicalExpr {
                                    lhs: FuncCall(
                                        FuncCall {
                                            target: "is_pid",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "s#Perm",
                                                        args: [
                                                            Var(
                                                                "p",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    op: And,
                                    rhs: FuncCall(
                                        FuncCall {
                                            target: "is_pid",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "r#Perm",
                                                        args: [
                                                            Var(
                                                                "p",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            ident: "s_perms_eq",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Pid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "Perm",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: Lambda,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "p",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "Perm",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Logical(
                                LogicalExpr {
                                    lhs: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "s#Perm",
                                                    args: [
                                                        Var(
                                                            "p",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "s",
                                            ),
                                        },
                                    ),
                                    op: And,
                                    rhs: FuncCall(
                                        FuncCall {
                                            target: "is_pid",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "r#Perm",
                                                        args: [
                                                            Var(
                                                                "p",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            ident: "s_perms_geq",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Pid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "Perm",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: Lambda,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "p",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "Perm",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Logical(
                                LogicalExpr {
                                    lhs: Logical(
                                        LogicalExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "is_pid",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "s#Perm",
                                                                args: [
                                                                    Var(
                                                                        "p",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: And,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "is_pid",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "r#Perm",
                                                                args: [
                                                                    Var(
                                                                        "p",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    op: And,
                                    rhs: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "s#Perm",
                                                    args: [
                                                        Var(
                                                            "p",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Ge,
                                            rhs: Var(
                                                "s",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            ident: "s_r_perms_geq",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Pid",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "r",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Pid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "Perm",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: Lambda,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "p",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "Perm",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Logical(
                                LogicalExpr {
                                    lhs: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "s#Perm",
                                                            args: [
                                                                Var(
                                                                    "p",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "s",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "is_pid",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "r#Perm",
                                                                args: [
                                                                    Var(
                                                                        "p",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    op: And,
                                    rhs: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "r#Perm",
                                                    args: [
                                                        Var(
                                                            "p",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Ge,
                                            rhs: Var(
                                                "r",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                ],
                ident: "split_perms_sender",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Perm",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "perms_in",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Perm",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Perm",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "perms_out_1",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Perm",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Perm",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "perms_out_2",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Perm",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "perms_in",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "s_perms_geq",
                                        args: [
                                            Var(
                                                "s",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "perms_out_1",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "s_perms_geq",
                                        args: [
                                            Term(
                                                Term {
                                                    lhs: Var(
                                                        "s",
                                                    ),
                                                    op: Add,
                                                    rhs: Nat(
                                                        "1",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "perms_out_2",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "s_perms_eq",
                                        args: [
                                            Var(
                                                "s",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                ],
                ident: "split_perms_receiver",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "s",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "r",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Perm",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "perms_in",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Perm",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Perm",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "perms_out_1",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Perm",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Perm",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "perms_out_2",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Perm",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "perms_in",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "s_r_perms_geq",
                                        args: [
                                            Var(
                                                "s",
                                            ),
                                            Var(
                                                "r",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "perms_out_1",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "s_r_perms_geq",
                                        args: [
                                            Var(
                                                "s",
                                            ),
                                            Term(
                                                Term {
                                                    lhs: Var(
                                                        "r",
                                                    ),
                                                    op: Add,
                                                    rhs: Nat(
                                                        "1",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "is_perm",
                                args: [
                                    Var(
                                        "s",
                                    ),
                                    Var(
                                        "r",
                                    ),
                                    Var(
                                        "perms_out_2",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
]

[Printed]
const N: int;

axiom N > 0;

type Pid = int;

function is_pid(pid: Pid): bool {
  1 <= pid && pid <= N
}

type {:datatype} {:linear "Perm"} Perm;

function {:constructor} Perm(s: Pid, r: Pid): Perm;

function {:inline} is_perm(s: Pid, r: Pid, p: Perm): bool {
  p == Perm(s, r) && is_pid(s#Perm(p)) && is_pid(r#Perm(p))
}

function decision_function([int]int): int;

axiom (forall x: [int]int, y: [int]int :: (forall pid: int :: is_pid(pid) ==> x[pid] == y[pid]) ==> decision_function(x) == decision_function(y));

var {:layer 0, 2} init_val: [int]int;

var {:layer 0, 1} col_dom: [int][int]bool;

var {:layer 0, 1} col_val: [int][int]int;

var {:layer 0, 2} dec_dom: [int]bool;

var {:layer 0, 2} dec_val: [int]int;

function {:inline} inv_val(s_bound: int, init_val: [int]int, col_dom: [int][int]bool, col_val: [int][int]int): bool {
  inv_val'(s_bound, 0, init_val, col_dom, col_val)
}

function {:inline} inv_val'(s_bound: int, r_bound: int, init_val: [int]int, col_dom: [int][int]bool, col_val: [int][int]int): bool {
  (forall s: int, r: int :: is_pid(s) && s < s_bound && is_pid(r) ==> col_dom[r][s] && col_val[r][s] == init_val[s]) && (forall r: int :: is_pid(r) && r < r_bound ==> col_dom[r][s_bound] && col_val[r][s_bound] == init_val[s_bound])
}

function {:inline} all_decided(init_val: [int]int, dec_dom: [int]bool, dec_val: [int]int): bool {
  all_decided'(N + 1, init_val, dec_dom, dec_val)
}

function {:inline} all_decided'(r_bound: int, init_val: [int]int, dec_dom: [int]bool, dec_val: [int]int): bool {
  (forall r: int :: is_pid(r) && r < r_bound ==> dec_dom[r] && dec_val[r] == decision_function(init_val))
}

procedure {:atomic} {:layer 2} main_atomic({:linear_in "Perm"} perms: [Perm]bool)
  modifies col_dom, col_val, dec_dom, dec_val;
{
  havoc dec_dom, dec_val;
  assume all_decided(init_val, dec_dom, dec_val);
}

procedure {:yields} {:layer 1} {:refines "main_atomic"} main({:linear_in "Perm"} perms: [Perm]bool)
  requires {:layer 1} perms == all_perms();
  ensures {:layer 1} all_decided(init_val, dec_dom, dec_val);
{
  var s: int;
  var {:linear "Perm"} perms': [Perm]bool;
  var {:linear "Perm"} perms'': [Perm]bool;

  s := 1;
  perms' := perms;
  while (s <= N)
    invariant {:layer 1} {:cooperates} true;
    invariant {:layer 1} perms' == s_perms_geq(s);
    invariant {:layer 1} inv_val(s, init_val, col_dom, col_val);
    invariant {:layer 1} s > N ==> all_decided(init_val, dec_dom, dec_val);
  {
    call perms', perms'' := split_perms_sender(s, perms');
    async call {:sync} P(s, perms'');
    s := s + 1;
  }
}

procedure {:yields} {:layer 1} {:left} P(s: int, {:linear_in "Perm"} perms: [Perm]bool)
  requires {:layer 1} perms == s_perms_eq(s);
  requires {:layer 1} inv_val(s, init_val, col_dom, col_val);
  ensures {:layer 1} inv_val(s + 1, init_val, col_dom, col_val);
  ensures {:layer 1} s == N ==> all_decided(init_val, dec_dom, dec_val);
  modifies col_dom, col_val, dec_dom, dec_val;
{
  var r: int;
  var v: int;
  var {:linear "Perm"} p: Perm;
  var {:linear "Perm"} perms': [Perm]bool;

  perms' := perms;
  r := 1;
  call v := read_init_val(s);
  while (r <= N)
    invariant {:layer 1} {:cooperates} true;
    invariant {:layer 1} perms' == s_r_perms_geq(s, r);
    invariant {:layer 1} inv_val'(s, r, init_val, col_dom, col_val);
    invariant {:layer 1} s == N ==> all_decided'(r, init_val, dec_dom, dec_val);
  {
    call perms', p := split_perms_receiver(s, r, perms');
    async call {:sync} Q(r, s, v, p);
    r := r + 1;
  }
}

procedure {:left} {:layer 1} Q_atomic(r: int, s: int, v: int, {:linear_in "Perm"} p: Perm)
  modifies col_dom, col_val, dec_dom, dec_val;
{
  assert is_perm(s, r, p);
  col_dom[r][s] := true;
  col_val[r][s] := v;
  if ((forall pid: int :: is_pid(pid) ==> col_dom[r][pid])) {
    dec_dom[r] := true;
    dec_val[r] := decision_function(col_val[r]);
  }
}

procedure {:both} {:layer 1} read_init_val_atomic(pid: Pid) returns (v: int) {
  v := init_val[pid];
}

procedure {:yields} {:layer 0} {:refines "Q_atomic"} Q(s: int, r: int, v: int, {:linear_in "Perm"} p: Perm);

procedure {:yields} {:layer 0} {:refines "read_init_val_atomic"} read_init_val(pid: Pid) returns (v: int);

function {:inline 1} all_perms(): [Perm]bool {
  (lambda p: Perm :: is_pid(s#Perm(p)) && is_pid(r#Perm(p)))
}

function {:inline 1} s_perms_eq(s: Pid): [Perm]bool {
  (lambda p: Perm :: s#Perm(p) == s && is_pid(r#Perm(p)))
}

function {:inline 1} s_perms_geq(s: Pid): [Perm]bool {
  (lambda p: Perm :: is_pid(s#Perm(p)) && is_pid(r#Perm(p)) && s#Perm(p) >= s)
}

function {:inline 1} s_r_perms_geq(s: Pid, r: Pid): [Perm]bool {
  (lambda p: Perm :: s#Perm(p) == s && is_pid(r#Perm(p)) && r#Perm(p) >= r)
}

procedure {:yields} {:layer 1} {:both} split_perms_sender(s: Pid, {:linear_in "Perm"} perms_in: [Perm]bool) returns ({:linear "Perm"} perms_out_1: [Perm]bool, {:linear "Perm"} perms_out_2: [Perm]bool);
  requires {:layer 1} perms_in == s_perms_geq(s);
  ensures {:layer 1} perms_out_1 == s_perms_geq(s + 1);
  ensures {:layer 1} perms_out_2 == s_perms_eq(s);

procedure {:yields} {:layer 1} {:both} split_perms_receiver(s: Pid, r: Pid, {:linear_in "Perm"} perms_in: [Perm]bool) returns ({:linear "Perm"} perms_out_1: [Perm]bool, {:linear "Perm"} perms_out_2: Perm);
  requires {:layer 1} perms_in == s_r_perms_geq(s, r);
  ensures {:layer 1} perms_out_1 == s_r_perms_geq(s, r + 1);
  ensures {:layer 1} is_perm(s, r, perms_out_2);

[Input - ../../vendor/boogie/Test/civl/async/leader.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

const N : int;
axiom N > 0;

type Pid = int;
function is_pid (pid:Pid) : bool { 1 <= pid && pid <= N }

type {:datatype} {:linear "Perm"} Perm;
function {:constructor} Perm (s:Pid, r:Pid) : Perm;

function {:inline} is_perm (s:Pid, r:Pid, p:Perm) : bool
{ p == Perm(s, r) && is_pid(s#Perm(p)) && is_pid(r#Perm(p)) }

function decision_function ([int]int) : int;
axiom (forall x:[int]int, y:[int]int :: (forall pid:int :: is_pid(pid) ==> x[pid] == y[pid]) ==> decision_function(x) == decision_function(y));

// ###########################################################################
// Global shared variables

var {:layer 0,2} init_val:[int]int;      // initial values of i (immutable)
var {:layer 0,1} col_dom:[int][int]bool; // i received from j?
var {:layer 0,1} col_val:[int][int]int;  // value i received from j
var {:layer 0,2} dec_dom:[int]bool;      // i decided?
var {:layer 0,2} dec_val:[int]int;       // decided value of i

// ###########################################################################
// Definitions for specs

function {:inline} inv_val (s_bound:int, init_val:[int]int, col_dom:[int][int]bool, col_val:[int][int]int) : bool
{
  inv_val'(s_bound, 0, init_val, col_dom, col_val)
}

function {:inline} inv_val' (s_bound:int, r_bound:int, init_val:[int]int, col_dom:[int][int]bool, col_val:[int][int]int) : bool
{
  (forall s:int,r:int :: is_pid(s) && s < s_bound && is_pid(r) ==> col_dom[r][s] && col_val[r][s] == init_val[s]) &&
  (forall r:int :: is_pid(r) && r < r_bound ==> col_dom[r][s_bound] && col_val[r][s_bound] == init_val[s_bound])
}

function {:inline} all_decided (init_val:[int]int, dec_dom:[int]bool, dec_val:[int]int) : bool
{
  all_decided'(N+1, init_val, dec_dom, dec_val)
}

function {:inline} all_decided' (r_bound:int, init_val:[int]int, dec_dom:[int]bool, dec_val:[int]int) : bool
{
  (forall r:int :: is_pid(r) && r < r_bound ==> dec_dom[r] && dec_val[r] == decision_function(init_val))
}

// ###########################################################################
// Main

procedure {:atomic}{:layer 2} main_atomic ({:linear_in "Perm"} perms:[Perm]bool)
modifies col_dom, col_val, dec_dom, dec_val;
{
  havoc dec_dom, dec_val;
  assume all_decided(init_val, dec_dom, dec_val);
}

procedure {:yields}{:layer 1}{:refines "main_atomic"} main ({:linear_in "Perm"} perms:[Perm]bool)
requires {:layer 1} perms == all_perms();
ensures {:layer 1} all_decided(init_val, dec_dom, dec_val);
{
  var s:int;
  var {:linear "Perm"} perms':[Perm]bool;
  var {:linear "Perm"} perms'':[Perm]bool;
  s := 1;
  perms' := perms;
  while (s <= N)
  invariant {:layer 1}{:cooperates} true;
  invariant {:layer 1} perms' == s_perms_geq(s);
  invariant {:layer 1} inv_val(s, init_val, col_dom, col_val);
  invariant {:layer 1} s > N ==> all_decided(init_val, dec_dom, dec_val);
  {
    call perms',perms'' := split_perms_sender(s, perms');
    async call {:sync} P(s, perms'');
    s := s + 1;
  }
}

procedure {:yields}{:layer 1}{:left} P (s:int, {:linear_in "Perm"} perms:[Perm]bool)
requires {:layer 1} perms == s_perms_eq(s);
requires {:layer 1} inv_val(s, init_val, col_dom, col_val);
ensures  {:layer 1} inv_val(s+1, init_val, col_dom, col_val);
ensures  {:layer 1} s == N ==> all_decided(init_val, dec_dom, dec_val);
modifies col_dom, col_val, dec_dom, dec_val;
{
  var r:int;
  var v:int;
  var {:linear "Perm"} p:Perm;
  var {:linear "Perm"} perms':[Perm]bool;

  perms' := perms;
  r := 1;
  call v := read_init_val(s);
  while (r <= N)
  invariant {:layer 1}{:cooperates} true;
  invariant {:layer 1} perms' == s_r_perms_geq(s,r);
  invariant {:layer 1} inv_val'(s, r, init_val, col_dom, col_val);
  invariant {:layer 1} s == N ==> all_decided'(r, init_val, dec_dom, dec_val);
  {
    call perms',p := split_perms_receiver(s,r,perms');
    async call {:sync} Q(r, s, v, p);
    r := r + 1;
  }
}

procedure {:left}{:layer 1} Q_atomic (r:int, s:int, v:int, {:linear_in "Perm"} p:Perm)
modifies col_dom, col_val, dec_dom, dec_val;
{
  assert is_perm(s,r,p);
  col_dom[r][s] := true;
  col_val[r][s] := v;
  if ((forall pid:int :: is_pid(pid) ==> col_dom[r][pid])) {
    dec_dom[r] := true;
    dec_val[r] := decision_function(col_val[r]);
  }
}

procedure {:both}{:layer 1} read_init_val_atomic (pid:Pid) returns (v:int)
{
  v := init_val[pid];
}

procedure {:yields}{:layer 0}{:refines "Q_atomic"} Q (s:int, r:int, v:int, {:linear_in "Perm"} p:Perm);
procedure {:yields}{:layer 0}{:refines "read_init_val_atomic"} read_init_val (pid:Pid) returns (v:int);

// ###########################################################################
// Linear permissions

function {:inline 1} all_perms () : [Perm]bool { (lambda p:Perm :: is_pid(s#Perm(p)) && is_pid(r#Perm(p))) }
function {:inline 1} s_perms_eq (s:Pid) : [Perm]bool { (lambda p:Perm :: s#Perm(p) == s && is_pid(r#Perm(p))) }
function {:inline 1} s_perms_geq (s:Pid) : [Perm]bool { (lambda p:Perm :: is_pid(s#Perm(p)) && is_pid(r#Perm(p)) && s#Perm(p) >= s) }
function {:inline 1} s_r_perms_geq (s:Pid, r:Pid) : [Perm]bool { (lambda p:Perm :: s#Perm(p) == s && is_pid(r#Perm(p)) && r#Perm(p) >= r) }

procedure {:yields}{:layer 1}{:both} split_perms_sender (s:Pid, {:linear_in "Perm"} perms_in:[Perm]bool) returns ({:linear "Perm"} perms_out_1:[Perm]bool, {:linear "Perm"} perms_out_2:[Perm]bool);
requires {:layer 1} perms_in == s_perms_geq(s);
ensures {:layer 1} perms_out_1 == s_perms_geq(s+1);
ensures {:layer 1} perms_out_2 == s_perms_eq(s);

procedure {:yields}{:layer 1}{:both} split_perms_receiver (s:Pid, r:Pid, {:linear_in "Perm"} perms_in:[Perm]bool) returns ({:linear "Perm"} perms_out_1:[Perm]bool, {:linear "Perm"} perms_out_2:Perm);
requires {:layer 1} perms_in ==  s_r_perms_geq(s,r);
ensures {:layer 1} perms_out_1 == s_r_perms_geq(s,r+1);
ensures {:layer 1} is_perm(s,r,perms_out_2);
