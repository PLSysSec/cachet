---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "plus",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "z",
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Add,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "plus",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "z",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "3",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "plus",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "plus",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "z",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "plus2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "z",
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Add,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "z",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Add,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "or",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "a",
                                ),
                                op: Eq,
                                rhs: Var(
                                    "b",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "t",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "t",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "x",
                                                                                        ),
                                                                                        op: Lt,
                                                                                        rhs: Var(
                                                                                            "y",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                op: Or,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "x",
                                                                                        ),
                                                                                        op: Gt,
                                                                                        rhs: Var(
                                                                                            "y",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: Or,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "x",
                                                                                ),
                                                                                op: Eq,
                                                                                rhs: Var(
                                                                                    "y",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: Or,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "x",
                                                                        ),
                                                                        op: Neq,
                                                                        rhs: Var(
                                                                            "y",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "a",
                                                                ),
                                                                op: Ge,
                                                                rhs: Var(
                                                                    "b",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "a",
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "b",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "x",
                                                                                    ),
                                                                                    op: Lt,
                                                                                    rhs: Var(
                                                                                        "y",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: Or,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "x",
                                                                                    ),
                                                                                    op: Gt,
                                                                                    rhs: Var(
                                                                                        "y",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: Or,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "x",
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Var(
                                                                                "y",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "x",
                                                                    ),
                                                                    op: Neq,
                                                                    rhs: Var(
                                                                        "y",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "a",
                                                            ),
                                                            op: Ge,
                                                            rhs: Var(
                                                                "b",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "a",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "b",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Var(
                                        "t",
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "less",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Lt,
                                rhs: Var(
                                    "y",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "z",
                                ),
                                op: Eq,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "less",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "less",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "yes",
                                    "no",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "yes",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        true,
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "no",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Lt,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        false,
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "less",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "yes",
                                    "no",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "yes",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        true,
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "no",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        false,
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "LESS",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Lt,
                                rhs: Var(
                                    "y",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Equiv(
                            EquivExpr {
                                lhs: Var(
                                    "z",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "LESS",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "LESS",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "yes",
                                    "no",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "yes",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        true,
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "no",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Lt,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        false,
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "LESS",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "yes",
                                    "no",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "yes",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        true,
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "no",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "z",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        false,
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Assignments",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "d",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "entry",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "b",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Logical(
                                            LogicalExpr {
                                                lhs: Var(
                                                    "c",
                                                ),
                                                op: Or,
                                                rhs: Var(
                                                    "d",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "b",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Logical(
                                            LogicalExpr {
                                                lhs: Var(
                                                    "c",
                                                ),
                                                op: And,
                                                rhs: Var(
                                                    "d",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Equiv(
                                            EquivExpr {
                                                lhs: Var(
                                                    "c",
                                                ),
                                                rhs: Var(
                                                    "d",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Implies(
                                            ImpliesExpr {
                                                lhs: Var(
                                                    "c",
                                                ),
                                                rhs: Var(
                                                    "d",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
procedure plus(x: int, y: int) returns (z: int);
  ensures z == x + y;

implementation plus(x: int, y: int) returns (z: int) {
  start:
  assume z == 3;
  return;
}

implementation plus(x: int, y: int) returns (z: int) {
  start:
  z := x + y;
  return;
}

implementation plus(x: int, y: int) returns (z: int) {
  start:
  z := x + y;
  z := 0 + z;
  return;
}

procedure plus2(x: int, y: int) returns (z: int)
  ensures z == x + y;
{
  start:
  z := x + y;
  return;
}

procedure or(x: int, y: int, a: int, b: int) returns (z: int)
  requires a == b;
{
  var t: bool;

  start:
  t := (x < y || x > y || x == y || x != y) && a >= b && a <= b;
  assert (x < y || x > y || x == y || x != y) && a >= b && a <= b;
  assert t;
  return;
}

procedure less(x: int, y: int) returns (z: bool);
  requires x < y;
  ensures z == (x < y);

implementation less(x: int, y: int) returns (z: bool) {
  start:
  z := x < y;
  return;
}

implementation less(x: int, y: int) returns (z: bool) {
  start:
  goto yes, no;
  yes:
  assume x < y;
  z := true;
  return;
  no:
  assume !(x < y);
  z := false;
  return;
}

implementation less(x: int, y: int) returns (z: bool) {
  start:
  goto yes, no;
  yes:
  assume x < y;
  z := true;
  return;
  no:
  assume x >= y;
  z := false;
  return;
}

procedure LESS(x: int, y: int) returns (z: bool);
  requires x < y;
  ensures z <==> x < y;

implementation LESS(x: int, y: int) returns (z: bool) {
  start:
  z := x < y;
  return;
}

implementation LESS(x: int, y: int) returns (z: bool) {
  start:
  goto yes, no;
  yes:
  assume x < y;
  z := true;
  return;
  no:
  assume !(x < y);
  z := false;
  return;
}

implementation LESS(x: int, y: int) returns (z: bool) {
  start:
  goto yes, no;
  yes:
  assume x < y;
  z := true;
  return;
  no:
  assume x >= y;
  z := false;
  return;
}

procedure Assignments() {
  var b: bool;
  var c: bool;
  var d: bool;
  var x: bool, y: bool;

  entry:
  b := c || d;
  b := c && d;
  x := c <==> d;
  y := c ==> d;
  assert x ==> y;
  return;
}

[Input - ../../vendor/boogie/Test/test2/FormulaTerm.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
// Test formula-term distinction in Simplify

procedure plus(x: int, y: int) returns (z: int);
  ensures z == x + y;

implementation plus(x: int, y: int) returns (z: int)
{
start:
  assume z == 3;
  return;  // ERROR: postcondition possibly violated
}

implementation plus(x: int, y: int) returns (z: int)
{
start:
  z := x + y;
  return;
}

implementation plus(x: int, y: int) returns (z: int)
{
start:
  z := x + y;
  z := 0 + z;
  return;
}

procedure plus2(x: int, y: int) returns (z: int)
  ensures z == x + y;
{
start:
  z := x + y;
  return;
}

procedure or(x: int, y: int, a: int, b: int) returns (z: int)
  requires a == b;
{
var t: bool;
start:
  t := (x < y || x > y || x == y || x != y) && a >= b && a <= b;
  assert (x < y || x > y || x == y || x != y) && a >= b && a <= b;
  assert t;
  return;
}

procedure less(x: int, y: int) returns (z: bool);
  requires x < y;
  ensures z == (x < y);

implementation less(x: int, y: int) returns (z: bool)
{
start:
  z := x < y;
  return;
}

implementation less(x: int, y: int) returns (z: bool)
{
start:
  goto yes, no;
yes:
  assume x < y;
  z := true;
  return;
no:
  assume !(x < y);
  z := false;
  return;
}

implementation less(x: int, y: int) returns (z: bool)
{
start:
  goto yes, no;
yes:
  assume x < y;
  z := true;
  return;
no:
  assume x >= y;
  z := false;
  return;
}

procedure LESS(x: int, y: int) returns (z: bool);
  requires x < y;
  ensures z <==> (x < y);

implementation LESS(x: int, y: int) returns (z: bool)
{
start:
  z := x < y;
  return;
}

implementation LESS(x: int, y: int) returns (z: bool)
{
start:
  goto yes, no;
yes:
  assume x < y;
  z := true;
  return;
no:
  assume !(x < y);
  z := false;
  return;
}

implementation LESS(x: int, y: int) returns (z: bool)
{
start:
  goto yes, no;
yes:
  assume x < y;
  z := true;
  return;
no:
  assume x >= y;
  z := false;
  return;
}

procedure Assignments()
{
  var b: bool;
  var c: bool;
  var d: bool;
  var x: bool, y: bool;

  entry:
    b := c || d;
    b := c && d;
    x := c <==> d;
    y := c ==> d;
    assert x ==> y;
    return;
}
