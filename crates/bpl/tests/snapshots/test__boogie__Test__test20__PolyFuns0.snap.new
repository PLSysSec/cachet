---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Func(
        FuncDecl {
            attrs: [],
            ident: "size",
            type_params: [
                "alpha",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "alpha",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "size",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "alpha",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "alpha",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "size",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Ge,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "m",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "size",
                                        args: [
                                            Var(
                                                "m",
                                            ),
                                        ],
                                    },
                                ),
                                op: Ge,
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "m",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "m",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [
                                                    "a",
                                                ],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "size",
                                        args: [
                                            Var(
                                                "m",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "13",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Field",
                    type_params: [
                        "a",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "fieldValue",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Field",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "a",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "a",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "intField",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            AtomApp(
                                TypeApp {
                                    head: Int,
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "refField",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "ref",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "obj",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "someInt",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "someInt",
                    ),
                    op: Eq,
                    rhs: FuncCall(
                        FuncCall {
                            target: "fieldValue",
                            args: [
                                Var(
                                    "obj",
                                ),
                                Var(
                                    "intField",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "someInt",
                    ),
                    op: Eq,
                    rhs: FuncCall(
                        FuncCall {
                            target: "fieldValue",
                            args: [
                                FuncCall(
                                    FuncCall {
                                        target: "fieldValue",
                                        args: [
                                            Var(
                                                "obj",
                                            ),
                                            Var(
                                                "refField",
                                            ),
                                        ],
                                    },
                                ),
                                Var(
                                    "intField",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "someInt",
                    ),
                    op: Eq,
                    rhs: FuncCall(
                        FuncCall {
                            target: "fieldValue",
                            args: [
                                Var(
                                    "obj",
                                ),
                                FuncCall(
                                    FuncCall {
                                        target: "fieldValue",
                                        args: [
                                            Var(
                                                "obj",
                                            ),
                                            Var(
                                                "refField",
                                            ),
                                        ],
                                    },
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Field",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Quant(
                            QuantExpr {
                                kind: Exists,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "x",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "fieldValue",
                                                    args: [
                                                        Var(
                                                            "obj",
                                                        ),
                                                        Var(
                                                            "f",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "beta",
                            "alpha",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "alpha",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "beta",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "c",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "alpha",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "c",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "b",
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Field",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Quant(
                            QuantExpr {
                                kind: Exists,
                                body: QuantBody {
                                    type_params: [
                                        "b",
                                    ],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "x",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "b",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "fieldValue",
                                                    args: [
                                                        Var(
                                                            "obj",
                                                        ),
                                                        Var(
                                                            "f",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Field",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Quant(
                            QuantExpr {
                                kind: Exists,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "x",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "fieldValue",
                                                    args: [
                                                        Var(
                                                            "obj",
                                                        ),
                                                        Var(
                                                            "f",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "lessThan",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "a",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "a",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "lessThan",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "lessThan",
                    args: [
                        BoolLit(
                            false,
                        ),
                        BoolLit(
                            true,
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "lessThan",
                    args: [
                        Nat(
                            "5",
                        ),
                        BoolLit(
                            true,
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "a",
                            "b",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "b",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: FuncCall(
                            FuncCall {
                                target: "lessThan",
                                args: [
                                    Var(
                                        "x",
                                    ),
                                    Var(
                                        "y",
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "lessThan2",
            type_params: [
                "a",
                "b",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "a",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "b",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "lessThan",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "lessThan2",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Quant(
                            QuantExpr {
                                kind: Exists,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "m",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "y",
                                                                ],
                                                                type_: App(
                                                                    TypeApp {
                                                                        head: "a",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "lessThan2",
                                                        args: [
                                                            Var(
                                                                "m",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: Exists,
                    body: QuantBody {
                        type_params: [
                            "a",
                            "b",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "b",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "lessThan2",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "lessThan2",
                                        args: [
                                            Var(
                                                "y",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: Exists,
                    body: QuantBody {
                        type_params: [
                            "a",
                            "b",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [
                                                    "c",
                                                ],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "Field",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "c",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "a",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [
                                                    "d",
                                                ],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "Field",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "d",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "b",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: Var(
                                    "y",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: Exists,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [
                                                    "c",
                                                ],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "Field",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "c",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "a",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [
                                                    "d",
                                                ],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "Field",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "d",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: Var(
                                    "y",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: Exists,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [
                                                    "c",
                                                ],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "Field",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "c",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [
                                                    "d",
                                                ],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "Field",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "d",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "a",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: Var(
                                    "y",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: Exists,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [
                                                    "c",
                                                ],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "Field",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "c",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "a",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [
                                                    "d",
                                                ],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "Field",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "d",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "d",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: Var(
                                    "y",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "ref",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
]

[Printed]
function size<alpha>(x: alpha): int;

axiom (forall x: int :: size(x) == 0);

axiom (forall <alpha> x: alpha :: size(x) >= 0);

axiom (forall m: [int]int, x: int :: size(m) >= m[x]);

axiom (forall m: <a>[a]int :: size(m) == 13);

type Field a;

function fieldValue<a>(ref, Field a): a;

const intField: Field int;

const refField: Field ref;

const obj: ref;

const someInt: int;

axiom someInt == fieldValue(obj, intField);

axiom someInt == fieldValue(fieldValue(obj, refField), intField);

axiom someInt == fieldValue(obj, fieldValue(obj, refField));

axiom (forall <a> f: Field a :: (exists x: a :: fieldValue(obj, f) == x));

axiom (forall <beta, alpha> a: alpha, b: beta :: a == b ==> (exists c: alpha :: c == b));

axiom (forall <a> f: Field a :: (exists <b> x: b :: fieldValue(obj, f) == x));

axiom (forall <a> f: Field a :: (exists x: int :: fieldValue(obj, f) == x));

function lessThan<a>(x: a, y: a): bool;

axiom (forall x: int, y: int :: x < y ==> lessThan(x, y));

axiom lessThan(false, true);

axiom lessThan(5, true);

axiom (forall <a, b> x: a, y: b :: lessThan(x, y));

function lessThan2<a, b>(x: a, y: b): bool;

axiom (forall <a> x: a, y: a :: lessThan(x, y) == lessThan2(x, y));

axiom (forall <a> x: a :: (exists m: a :: (forall y: a :: lessThan2(m, y))));

axiom (exists <a, b> x: a, y: b :: lessThan2(x, y) == lessThan2(y, x));

axiom (exists <a, b> x: <c>[Field c]a, y: <d>[Field d]b :: x == y);

axiom (exists <a> x: <c>[Field c]a, y: <d>[Field d]int :: x == y);

axiom (exists <a> x: <c>[Field c]int, y: <d>[Field d]a :: x == y);

axiom (exists <a> x: <c>[Field c]a, y: <d>[Field d]d :: x == y);

type ref;

[Input - ../../vendor/boogie/Test/test20/PolyFuns0.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"


function size<alpha>(x : alpha) returns (int);

axiom (forall x:int :: size(x) == 0);
axiom (forall<alpha> x:alpha :: size(x) >= 0);

axiom (forall m:[int]int, x:int :: size(m) >= m[x]);
axiom (forall m:<a>[a]int :: size(m) == 13);

type Field a;

function fieldValue<a>(ref, Field a) returns (a);

const intField : Field int;
const refField : Field ref;
const obj : ref;
const someInt : int;

axiom someInt == fieldValue(obj, intField);
axiom someInt == fieldValue(fieldValue(obj, refField), intField);

axiom someInt == fieldValue(obj, fieldValue(obj, refField)); // error: wrong argument type

axiom (forall<a> f : Field a ::
           (exists x:a :: fieldValue(obj, f) == x));

axiom (forall<beta, alpha> a:alpha, b:beta ::
              a == b ==> (exists c:alpha :: c == b));
axiom (forall<a> f : Field a ::
           (exists<b> x:b :: fieldValue(obj, f) == x));
axiom (forall<a> f : Field a ::
           (exists x:int :: fieldValue(obj, f) == x));

function lessThan<a>(x : a, y : a) returns (bool);

axiom (forall x:int, y:int :: x < y ==> lessThan(x, y));
axiom lessThan(false, true);

axiom lessThan(5, true);                          // error: incompatible arguments
axiom (forall<a,b> x:a, y:b :: lessThan(x, y));   // error: incompatible arguments

function lessThan2<a,b>(x : a, y : b) returns (bool);

axiom (forall<a> x:a, y:a :: lessThan(x,y) == lessThan2(x,y));
axiom (forall<a> x:a :: (exists m:a :: (forall y:a :: lessThan2(m, y))));

axiom (exists<a,b> x:a, y:b :: lessThan2(x, y) == lessThan2(y, x));

axiom (exists<a,b> x:<c>[Field c]a, y:<d>[Field d]b :: x == y);
axiom (exists<a> x:<c>[Field c]a, y:<d>[Field d]int :: x == y);
axiom (exists<a> x:<c>[Field c]int, y:<d>[Field d]a :: x == y);
axiom (exists<a> x:<c>[Field c]a, y:<d>[Field d]d :: x == y);   // error: not unifiable

type ref;
