---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "f1",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            AtomApp(
                                TypeApp {
                                    head: Int,
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "f2",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "bv32",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "f3",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            AtomApp(
                                TypeApp {
                                    head: Bool,
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "r1",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "r2",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "H",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [
                                    "x",
                                ],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "Field",
                                            tail: Some(
                                                App(
                                                    TypeApp {
                                                        head: "x",
                                                        tail: None,
                                                    },
                                                ),
                                            ),
                                        },
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "x",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "foo",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "H",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "bv32",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "H",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "r1",
                                                    ),
                                                    Var(
                                                        "f1",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "3",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "H",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "r1",
                                                    ),
                                                    Var(
                                                        "f2",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BvLit(
                                            BvLit {
                                                n: "77",
                                                width: "32",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "H",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "r1",
                                                    ),
                                                    Var(
                                                        "f3",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            true,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "i",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "H",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "r1",
                                                            ),
                                                            Var(
                                                                "f1",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "b",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "H",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "r1",
                                                            ),
                                                            Var(
                                                                "f2",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "c",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "H",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "r1",
                                                            ),
                                                            Var(
                                                                "f3",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "3",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "b",
                                            ),
                                            op: Eq,
                                            rhs: BvLit(
                                                BvLit {
                                                    n: "77",
                                                    width: "32",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "H",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "r1",
                                                        ),
                                                        Var(
                                                            "f3",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "B",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "bv32",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "bv32",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "bar",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "B",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "bv32",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "B",
                                            subscripts: [
                                                [
                                                    BvLit(
                                                        BvLit {
                                                            n: "42",
                                                            width: "32",
                                                        },
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BvLit(
                                            BvLit {
                                                n: "77",
                                                width: "32",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "b",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "B",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            BvLit(
                                                                BvLit {
                                                                    n: "42",
                                                                    width: "32",
                                                                },
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "b",
                                            ),
                                            op: Eq,
                                            rhs: BvLit(
                                                BvLit {
                                                    n: "77",
                                                    width: "32",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Field",
                    type_params: [
                        "a",
                    ],
                    type_: None,
                },
                TypeDecl {
                    ident: "ref",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
]

[Printed]
const unique f1: Field int;

const unique f2: Field bv32;

const unique f3: Field bool;

const unique r1: ref;

const unique r2: ref;

var H: <x>[ref, Field x]x;

procedure foo()
  modifies H;
{
  var i: int;
  var b: bv32;
  var c: bool;

  H[r1, f1] := 3;
  H[r1, f2] := 77bv32;
  H[r1, f3] := true;
  i := H[r1, f1];
  b := H[r1, f2];
  c := H[r1, f3];
  assert i == 3;
  assert b == 77bv32;
  assert H[r1, f3];
}

var B: [bv32]bv32;

procedure bar()
  modifies B;
{
  var b: bv32;

  B[42bv32] := 77bv32;
  b := B[42bv32];
  assert b == 77bv32;
}

type Field a,
  ref;

[Input - ../../vendor/boogie/Test/bitvectors/arrays.bpl]
// RUN: %boogie -proverWarnings:1 "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
const unique f1 : Field int;
const unique f2 : Field bv32;
const unique f3 : Field bool;

const unique r1 : ref;
const unique r2 : ref;

var H : <x>[ref,Field x]x;

procedure foo()
  modifies H;
{
  var i : int;
  var b : bv32;
  var c : bool;

  H[r1, f1] := 3;
  H[r1, f2] := 77bv32;
  H[r1, f3] := true;
  i := H[r1,f1];
  b := H[r1,f2];
  c := H[r1,f3];
  assert i == 3;
  assert b == 77bv32;
  assert H[r1,f3];
}

var B : [bv32]bv32;

procedure bar()
  modifies B;
{
  var b : bv32;

  B[42bv32] := 77bv32;
  b := B[42bv32];
  assert b == 77bv32;
}


type Field a, ref;
