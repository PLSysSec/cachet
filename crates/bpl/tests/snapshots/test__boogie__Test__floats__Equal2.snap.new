---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "float",
                    type_params: [],
                    type_: Some(
                        App(
                            TypeApp {
                                head: "float24e8",
                                tail: None,
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "fp.eq",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "FEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Main",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Float(
                                                Float {
                                                    value: Plain(
                                                        PlainFloatValue {
                                                            is_neg: false,
                                                            whole: "0",
                                                            fract: "0",
                                                            exp: Exp {
                                                                is_neg: false,
                                                                digits: "0",
                                                            },
                                                        },
                                                    ),
                                                    sig_size: "24",
                                                    exp_size: "8",
                                                },
                                            ),
                                            op: Neq,
                                            rhs: Float(
                                                Float {
                                                    value: Plain(
                                                        PlainFloatValue {
                                                            is_neg: true,
                                                            whole: "0",
                                                            fract: "0",
                                                            exp: Exp {
                                                                is_neg: false,
                                                                digits: "0",
                                                            },
                                                        },
                                                    ),
                                                    sig_size: "24",
                                                    exp_size: "8",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "FEQ",
                                            args: [
                                                Float(
                                                    Float {
                                                        value: Plain(
                                                            PlainFloatValue {
                                                                is_neg: false,
                                                                whole: "0",
                                                                fract: "0",
                                                                exp: Exp {
                                                                    is_neg: false,
                                                                    digits: "0",
                                                                },
                                                            },
                                                        ),
                                                        sig_size: "24",
                                                        exp_size: "8",
                                                    },
                                                ),
                                                Float(
                                                    Float {
                                                        value: Plain(
                                                            PlainFloatValue {
                                                                is_neg: true,
                                                                whole: "0",
                                                                fract: "0",
                                                                exp: Exp {
                                                                    is_neg: false,
                                                                    digits: "0",
                                                                },
                                                            },
                                                        ),
                                                        sig_size: "24",
                                                        exp_size: "8",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Float(
                                                Float {
                                                    value: PosInfinity,
                                                    sig_size: "24",
                                                    exp_size: "8",
                                                },
                                            ),
                                            op: Neq,
                                            rhs: Float(
                                                Float {
                                                    value: NegInfinity,
                                                    sig_size: "24",
                                                    exp_size: "8",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "FEQ",
                                                    args: [
                                                        Float(
                                                            Float {
                                                                value: PosInfinity,
                                                                sig_size: "24",
                                                                exp_size: "8",
                                                            },
                                                        ),
                                                        Float(
                                                            Float {
                                                                value: NegInfinity,
                                                                sig_size: "24",
                                                                exp_size: "8",
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
type float = float24e8;

function {:builtin "fp.eq"} FEQ(float, float): bool;

procedure Main() {
  assert 0x0.0e0f24e8 != -0x0.0e0f24e8;
  assert FEQ(0x0.0e0f24e8, -0x0.0e0f24e8);
  assert 0+oo24e8 != 0-oo24e8;
  assert !FEQ(0+oo24e8, 0-oo24e8);
}

[Input - ../../vendor/boogie/Test/floats/Equal2.bpl]
// RUN: %boogie -proverWarnings:1 "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

type float = float24e8;

function {:builtin "fp.eq"} FEQ(float,float) returns (bool);

procedure Main()
{
  assert 0x0.0e0f24e8 != -0x0.0e0f24e8;
  assert FEQ(0x0.0e0f24e8,-0x0.0e0f24e8);
  assert 0+oo24e8 != 0-oo24e8;
  assert !FEQ(0+oo24e8,0-oo24e8);
}
