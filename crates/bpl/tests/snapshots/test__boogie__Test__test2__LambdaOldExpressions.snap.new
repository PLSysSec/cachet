---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "b",
                        ],
                        type_: Atom(
                            Bool,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "p0",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Var(
                            "b",
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "b",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Array(
                            ArrayExpr {
                                expr: Quant(
                                    QuantExpr {
                                        kind: Lambda,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "x",
                                                            ],
                                                            type_: Atom(
                                                                Bool,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "MyAttr",
                                                        params: [
                                                            String(
                                                                StringLit {
                                                                    text: "put an attr here",
                                                                },
                                                            ),
                                                            Expr(
                                                                Neg(
                                                                    NegExpr {
                                                                        op: Logical,
                                                                        expr: Var(
                                                                            "b",
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "b",
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            BoolLit(
                                                true,
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Array(
                                    ArrayExpr {
                                        expr: Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "x",
                                                                    ],
                                                                    type_: Atom(
                                                                        Bool,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "AnotherAttr",
                                                                params: [
                                                                    String(
                                                                        StringLit {
                                                                            text: "yes, why not",
                                                                        },
                                                                    ),
                                                                    Expr(
                                                                        Var(
                                                                            "b",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        Attr(
                                                            AttrContent {
                                                                ident: "ABC",
                                                                params: [
                                                                    Expr(
                                                                        Var(
                                                                            "b",
                                                                        ),
                                                                    ),
                                                                    Expr(
                                                                        Var(
                                                                            "b",
                                                                        ),
                                                                    ),
                                                                    Expr(
                                                                        Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "b",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    expr: Var(
                                                        "b",
                                                    ),
                                                },
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    BoolLit(
                                                        true,
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "p0",
                type_params: [],
                var_params: [],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "b",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Var(
                                                "b",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Array(
                                    ArrayExpr {
                                        expr: Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "x",
                                                                    ],
                                                                    type_: Atom(
                                                                        Bool,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Old(
                                                        OldExpr {
                                                            expr: Var(
                                                                "b",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    BoolLit(
                                                        true,
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Array(
                                            ArrayExpr {
                                                expr: Quant(
                                                    QuantExpr {
                                                        kind: Lambda,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "x",
                                                                            ],
                                                                            type_: Atom(
                                                                                Bool,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: Var(
                                                                "b",
                                                            ),
                                                        },
                                                    },
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            BoolLit(
                                                                true,
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "p1",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Var(
                                    "b",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "b",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Array(
                            ArrayExpr {
                                expr: Quant(
                                    QuantExpr {
                                        kind: Lambda,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "x",
                                                            ],
                                                            type_: Atom(
                                                                Bool,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "b",
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            BoolLit(
                                                true,
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "p1",
                type_params: [],
                var_params: [],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "b",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Var(
                                                "b",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Array(
                                            ArrayExpr {
                                                expr: Quant(
                                                    QuantExpr {
                                                        kind: Lambda,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "x",
                                                                            ],
                                                                            type_: Atom(
                                                                                Bool,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: Old(
                                                                OldExpr {
                                                                    expr: Var(
                                                                        "b",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            BoolLit(
                                                                true,
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "p2",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Var(
                            "b",
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "b",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Array(
                            ArrayExpr {
                                expr: Quant(
                                    QuantExpr {
                                        kind: Lambda,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "x",
                                                            ],
                                                            type_: Atom(
                                                                Bool,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Var(
                                                                "b",
                                                            ),
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: Var(
                                                        "b",
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            BoolLit(
                                                true,
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "p2",
                type_params: [],
                var_params: [],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "b",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Var(
                                                "b",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Array(
                                    ArrayExpr {
                                        expr: Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "x",
                                                                    ],
                                                                    type_: Atom(
                                                                        Bool,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Rel(
                                                        RelExpr {
                                                            lhs: Old(
                                                                OldExpr {
                                                                    expr: Var(
                                                                        "b",
                                                                    ),
                                                                },
                                                            ),
                                                            op: Neq,
                                                            rhs: Var(
                                                                "b",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    BoolLit(
                                                        true,
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "p3",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Var(
                            "b",
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "b",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Array(
                            ArrayExpr {
                                expr: Quant(
                                    QuantExpr {
                                        kind: Lambda,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "x",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Old(
                                                                OldExpr {
                                                                    expr: Var(
                                                                        "b",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: Var(
                                                        "b",
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Nat(
                                                "15",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "p3",
                type_params: [],
                var_params: [],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "b",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Var(
                                                "b",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Array(
                                    ArrayExpr {
                                        expr: Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "x",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Rel(
                                                        RelExpr {
                                                            lhs: Old(
                                                                OldExpr {
                                                                    expr: Old(
                                                                        OldExpr {
                                                                            expr: Var(
                                                                                "b",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Neq,
                                                            rhs: Var(
                                                                "b",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Nat(
                                                        "15",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "h",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "TestAttributeParameters",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Array(
                            ArrayExpr {
                                expr: Quant(
                                    QuantExpr {
                                        kind: Lambda,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "x",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "MyAttribute",
                                                        params: [
                                                            Expr(
                                                                Old(
                                                                    OldExpr {
                                                                        expr: Var(
                                                                            "h",
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                            Expr(
                                                                Var(
                                                                    "h",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Lt,
                                                    rhs: Nat(
                                                        "100",
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Nat(
                                                "23",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [],
                },
            ),
        },
    ),
]

[Printed]
var b: bool;

procedure p0();
  requires b;
  modifies b;
  ensures (lambda x: bool :: {:MyAttr "put an attr here", !b} old (b))[true];
  ensures !(lambda x: bool :: {:AnotherAttr "yes, why not", b} {:ABC b, b, old (b)} b)[true];

implementation p0() {
  b := !b;
  assert (lambda x: bool :: old (b))[true];
  assert !(lambda x: bool :: b)[true];
}

procedure p1();
  requires !b;
  modifies b;
  ensures (lambda x: bool :: old (b))[true];

implementation p1() {
  b := !b;
  assert !(lambda x: bool :: old (b))[true];
}

procedure p2();
  requires b;
  modifies b;
  ensures (lambda x: bool :: old (b) != b)[true];

implementation p2() {
  b := !b;
  assert (lambda x: bool :: old (b) != b)[true];
}

procedure p3();
  requires b;
  modifies b;
  ensures (lambda x: int :: old (old (b)) != b)[15];

implementation p3() {
  b := !b;
  assert (lambda x: int :: old (old (b)) != b)[15];
}

var h: int;

procedure TestAttributeParameters()
  ensures (lambda x: int :: {:MyAttribute old (h), h} x < 100)[23];
{
}

[Input - ../../vendor/boogie/Test/test2/LambdaOldExpressions.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
var b: bool;


procedure p0();
  requires b;
  modifies b;
  ensures (lambda x: bool :: {:MyAttr "put an attr here", !b} old(b))[true];
  ensures !(lambda x: bool :: {:AnotherAttr "yes, why not", b} {:ABC b, b, old(b)} b)[true];

implementation p0()
{
    b := !b;
    assert (lambda x: bool :: old(b))[true];
    assert !(lambda x: bool :: b)[true];
}


procedure p1();
  requires !b;
  modifies b;
  ensures (lambda x: bool :: old(b))[true];  // error

implementation p1()
{
    b := !b;
    assert !(lambda x: bool :: old(b))[true];
}


procedure p2();
  requires b;
  modifies b;
  ensures (lambda x: bool :: old(b) != b)[true];

implementation p2()
{
    b := !b;
    assert (lambda x: bool :: old(b) != b)[true];
}


procedure p3();
  requires b;
  modifies b;
  ensures (lambda x: int :: old(old(b)) != b)[15];

implementation p3()
{
    b := !b;
    assert (lambda x: int :: old(old(b)) != b)[15];
}

// Note that variables (inside and outside old expressions) mentioned
// in attributes (even if they are not mentioned in the body of the
// lambda) are also picked up by the auto-generated lambda functions,
// so that the attributes can be copied to the function and axiom.
var h: int;
procedure TestAttributeParameters()
  ensures (lambda x: int :: {:MyAttribute old(h), h} x < 100)[23];
{
}
