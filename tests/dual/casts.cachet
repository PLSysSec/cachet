fn test() {
  assert 10_i64 == 10_i16;
  assert 10_i64 == 10_i32;


  assert 10_i64 as Int16 == 10_i16;
  assert 10_i64 as Int32 == 10_i32;
  assert 10_i64 as UInt16 == 10_u16;
  assert 10_i64 as UInt32 == 10_u32;
  assert 10_i64 as UInt64 == 10_u64;
  assert 10_i64 as Double == 10.0;

  assert 10_i32 as Int16 == 10_i16;
  assert 10_i32 as Int64 == 10_i64;
  assert 10_i32 as UInt16 == 10_u16;
  assert 10_i32 as UInt32 == 10_u32;
  assert 10_i32 as UInt64 == 10_u64;
  assert 10_i32 as Double == 10.0;

  assert 10_i16 as Int32 == 10_i32;
  assert 10_i16 as Int64 == 10_i64;
  assert 10_i16 as UInt16 == 10_u16;
  assert 10_i16 as UInt32 == 10_u32;
  assert 10_i16 as UInt64 == 10_u64;
  assert 10_i16 as Double == 10.0;

  assert 10_u64 as Int16 == 10_i16;
  assert 10_u64 as Int32 == 10_i32;
  assert 10_u64 as Int64 == 10_i64;
  assert 10_u64 as UInt16 == 10_u16;
  assert 10_u64 as UInt32 == 10_u32;
  assert 10_u64 as Double == 10.0;

  assert 10_u32 as Int16 == 10_i16;
  assert 10_u32 as Int32 == 10_i32;
  assert 10_u32 as Int64 == 10_i64;
  assert 10_u32 as UInt16 == 10_u16;
  assert 10_u32 as UInt64 == 10_u64;
  assert 10_u32 as Double == 10.0;

  assert 10_u16 as Int16 == 10_i16;
  assert 10_u16 as Int32 == 10_i32;
  assert 10_u16 as Int64 == 10_i64;
  assert 10_u16 as UInt32 == 10_u32;
  assert 10_u16 as UInt64 == 10_u64;
  assert 10_u16 as Double == 10.0;

  assert 10_i32 == (unsafe { 10_i64 as Int32 });
}
