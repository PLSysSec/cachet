// vim: set tw=99 ts=4 sts=4 sw=4 et:

import "./js.cachet"

struct Reg;

// #[cfg(cpp)]
struct ValueReg;
// #[cfg(verify)]
// type ValueReg = Reg;

enum Condition {
    Equal,
    NotEqual,
    Overflow,
    Zero,
    NonZero,
    Signed,
    NotSigned,
}

ir MASM {
    op Mov(srcReg: Reg, dstReg: Reg) {
      MASM::setInt32(dstReg, MASM::getInt32(srcReg));
    }

    op StoreBool(bool: Bool, reg: Reg) {
        MASM::setBool(reg, bool);
    }

    op StoreBoolValue(bool: Bool, valueReg: ValueReg) {
        MASM::setValue(valueReg, Value::fromBool(bool));
    }

    op Jump(label target: MASM) {
      goto target;
    }

    op TagValue(valTy: ValueType, payload: Reg, dest: ValueReg) {
      // TODO: Don't have getters/setters for other types yet
      if valTy == ValueType::Int32 {
        let i = MASM::getInt32(payload);
        let val = Value::fromInt32(i);
        MASM::setValue(dest, val);
      }
    }

    op UnboxInt32(valueReg: ValueReg, int32Reg: Reg) {
      let value = MASM::getValue(valueReg);
      MASM::setInt32(int32Reg, Value::toInt32(value)); 
    }

    op UnboxObject(valueReg: ValueReg, objectReg: Reg) {
        let value = MASM::getValue(valueReg);
        MASM::setObject(objectReg, Value::toObject(value));
    }

    op BranchObject(
        condition: Condition,
        lhsReg: Reg,
        rhsReg: Reg,
        label branch: MASM,
    ) {
        let lhs = MASM::getObject(lhsReg);
        let rhs = MASM::getObject(rhsReg);
        let isEqual = lhs == rhs;

        if condition == Condition::Equal {
            if isEqual {
                goto branch;
            }
        }

        if condition == Condition::NotEqual {
            if !isEqual {
                goto branch;
            }
        }
    }

    op BranchTestInt32(condition: Condition, valueReg: ValueReg, label branch: MASM) {
      let value = MASM::getValue(valueReg);
      let valueIsInt32 = Value::isInt32(value);

      if condition == Condition::Equal {
        if valueIsInt32 {
          goto branch;
        }
      } else if condition == Condition::NotEqual {
        if !valueIsInt32 {
          goto branch;
        }
      } else {
        assert false;
      }
    }

    op Branch32Imm(condition: Condition, lhsReg: Reg, rhsInt32: Int32, label branch: MASM) {
      let lhsInt32 = MASM::getInt32(lhsReg);

      assert condition == Condition::Equal || condition == Condition::NotEqual;

      if condition == Condition::Equal && lhsInt32 == rhsInt32 {
        goto branch;
      } else if condition == Condition::NotEqual && lhsInt32 != rhsInt32 {
        goto branch;
      }
    }

    op BranchTest32(condition: Condition, lhsReg: Reg, rhsReg: Reg, label branch: MASM) {
      let lhsInt32 = MASM::getInt32(lhsReg);
      let rhsInt32 = MASM::getInt32(rhsReg);

      let result = lhsInt32 & rhsInt32;

      assert condition != Condition::Equal;
      assert condition != Condition::NotEqual;
      assert condition != Condition::Overflow;

      if condition == Condition::Zero {
        if result == 0_i32 {
          goto branch;
        }
      } else if condition == Condition::NonZero {
        if result != 0_i32 {
          goto branch;
        }
      } else if condition == Condition::Signed {
        if result < 0_i32 {
          goto branch;
        }
      } else if condition == Condition::NotSigned {
        if result > 0_i32 {
          goto branch;
        }
      }
    }

    op BranchTest32Imm(condition: Condition, lhsReg: Reg, rhsInt32: Int32, label branch: MASM) {
      let lhsInt32 = MASM::getInt32(lhsReg);

      let result = lhsInt32 & rhsInt32;

      assert condition != Condition::Equal;
      assert condition != Condition::NotEqual;
      assert condition != Condition::Overflow;

      if condition == Condition::Zero {
        if result == 0_i32 {
          goto branch;
        }
      } else if condition == Condition::NonZero {
        if result != 0_i32 {
          goto branch;
        }
      } else if condition == Condition::Signed {
        if result < 0_i32 {
          goto branch;
        }
      } else if condition == Condition::NotSigned {
        if result > 0_i32 {
          goto branch;
        }
      }
    }

    op BranchTestObject(condition: Condition, valueReg: ValueReg, label branch: MASM) {
      let value = MASM::getValue(valueReg);
      let valueIsObject = Value::isObject(value);

      if condition == Condition::Equal {
        if valueIsObject {
          goto branch;
        }
      }

      if condition == Condition::NotEqual {
        if !valueIsObject {
          goto branch;
        }
      }
    }

    op BranchTestNull(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        let value = MASM::getValue(valueReg);
        let valueIsNull = Value::isNull(value);

        if condition == Condition::Equal {
            if valueIsNull {
                goto branch;
            }
        }

        if condition == Condition::NotEqual {
            if !valueIsNull {
                goto branch;
            }
        }
    }

    op BranchTestMagic(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        let value = MASM::getValue(valueReg);
        let valueIsMagic = Value::isMagic(value);

        if condition == Condition::Equal {
            if valueIsMagic {
                goto branch;
            }
        }

        if condition == Condition::NotEqual {
            if !valueIsMagic {
                goto branch;
            }
        }
    }

    op BranchTestObjectShape(
        condition: Condition, objectReg: Reg, shape: Shape, scratchReg: Reg, spectreRegToZero: Reg,
        label branch: MASM
    ) {
        let object = MASM::getObject(objectReg);
        let objectHasShape = Object::shapeOf(object) == shape;

        MASM::setInt32(scratchReg, 0_i32);

        if condition == Condition::Equal {
            if objectHasShape {
                MASM::setInt32(spectreRegToZero, MASM::getInt32(scratchReg));
                goto branch;
            }
        }

        if condition == Condition::NotEqual {
            if !objectHasShape {
                MASM::setInt32(spectreRegToZero, MASM::getInt32(scratchReg));
                goto branch;
            }
        }
    }

    op BranchTestObjectShapeNoSpectreMitigations(
        condition: Condition, objectReg: Reg, shape: Shape, label branch: MASM
    ) {
        let object = MASM::getObject(objectReg);
        let objectHasShape = Object::shapeOf(object) == shape;

        if condition == Condition::Equal {
            if objectHasShape {
                goto branch;
            }
        }

        if condition == Condition::NotEqual {
            if !objectHasShape {
                goto branch;
            }
        }
    }

    op BranchAdd32(condition: Condition, srcReg: Reg, dstReg: Reg, label branch: MASM) {
      let lhsInt32 = MASM::getInt32(srcReg);
      let rhsInt32 = MASM::getInt32(dstReg);

      let result = lhsInt32 + rhsInt32;
      
      assert condition == Condition::Overflow;
      if lhsInt32 > 0_i32 && rhsInt32 > 0_i32 && result < 0_i32 {
          goto branch;
      }

      if lhsInt32 < 0_i32 && rhsInt32 < 0_i32 && result > 0_i32 {
          goto branch;
      }

      MASM::setInt32(dstReg, result);
    }

    op BranchSub32(condition: Condition, srcReg: Reg, dstReg: Reg, label branch: MASM) {
      let lhsInt32 = MASM::getInt32(dstReg);
      let rhsInt32 = MASM::getInt32(srcReg);

      let result = lhsInt32 - rhsInt32;

      assert condition == Condition::Overflow;

      let rhsInt32Neg = -rhsInt32;
      let minInt32 = 1_i32 << 31_i32; // Do it this way until negative literals are a thing

      if rhsInt32 == minInt32 && lhsInt32 >= 0_i32 {
          goto branch;
      } else if lhsInt32 > 0_i32 && rhsInt32 < 0_i32 && result < 0_i32 {
          goto branch;
      }

      if lhsInt32 < 0_i32 && rhsInt32 > 0_i32 && result > 0_i32 {
          goto branch;
      }

      MASM::setInt32(dstReg, result);
    }

    op BranchMul32(condition: Condition, srcReg: Reg, dstReg: Reg, label branch: MASM) {
      let lhsInt32 = MASM::getInt32(dstReg);
      let rhsInt32 = MASM::getInt32(srcReg);

      let result = lhsInt32 * rhsInt32;

      assert condition == Condition::Overflow;

      let resultWide = (lhsInt32 as Int64) * (rhsInt32 as Int64);
      if (result as Int64) != resultWide {
        goto branch;
      }

      MASM::setInt32(dstReg, result);
    }

    // TODO(abhishekc-sharma): handle isUnsigned.
    op FlexibleDivMod32(rhsReg: Reg, lhsOutputReg: Reg, remReg: Reg) {
      let lhsInt32 = MASM::getInt32(lhsOutputReg);
      let rhsInt32 = MASM::getInt32(rhsReg);

      let quotient = lhsInt32 / rhsInt32;
      let remainder = lhsInt32 % rhsInt32;

      MASM::setInt32(lhsOutputReg, quotient);
      MASM::setInt32(remReg, remainder);
    }

    // TODO(abhishekc-sharma): handle isUnsigned.
    op FlexibleRemainder32(rhsReg: Reg, lhsOutputReg: Reg) {
      let lhsInt32 = MASM::getInt32(lhsOutputReg);
      let rhsInt32 = MASM::getInt32(rhsReg);

      let remainder = lhsInt32 % rhsInt32;
      MASM::setInt32(lhsOutputReg, remainder);
    }

    op Neg32(valueReg: Reg) {
      let valueInt32 = MASM::getInt32(valueReg);
      let result = -valueInt32;

      MASM::setInt32(valueReg, result);
    }

    op Not32(valueReg: Reg) {
      let valueInt32 = MASM::getInt32(valueReg);
      let result = ~valueInt32;

      MASM::setInt32(valueReg, result);
    }

    op Or32(srcReg: Reg, dstReg: Reg) {
      let lhsInt32 = MASM::getInt32(srcReg);
      let rhsInt32 = MASM::getInt32(dstReg);

      let result = lhsInt32 | rhsInt32;

      MASM::setInt32(dstReg, result);
    }

    op Xor32(srcReg: Reg, dstReg: Reg) {
      let lhsInt32 = MASM::getInt32(srcReg);
      let rhsInt32 = MASM::getInt32(dstReg);

      let result = lhsInt32 ^ rhsInt32;

      MASM::setInt32(dstReg, result);
    }

    op And32(srcReg: Reg, dstReg: Reg) {
      let lhsInt32 = MASM::getInt32(srcReg);
      let rhsInt32 = MASM::getInt32(dstReg);

      let result = lhsInt32 & rhsInt32;

      MASM::setInt32(dstReg, result);
    }

    op FlexibleLshift32(shiftReg: Reg, srcDestReg: Reg) {
      let shiftInt32 = MASM::getInt32(shiftReg) & 31_i32;
      let srcInt32 = MASM::getInt32(srcDestReg);

      let result = srcInt32 << shiftInt32;

      MASM::setInt32(srcDestReg, result);
    }

    op FlexibleRshift32Arithmetic(shiftReg: Reg, srcDestReg: Reg) {
      let shiftInt32 = MASM::getInt32(shiftReg) & 31_i32;
      let srcInt32 = MASM::getInt32(srcDestReg);

      let result = srcInt32 >> shiftInt32;

      MASM::setInt32(srcDestReg, result);
    }

    op FlexibleRshift32(shiftReg: Reg, srcDestReg: Reg) {
      let shiftInt32 = MASM::getInt32(shiftReg) & 31_i32;
      let srcInt32 = MASM::getInt32(srcDestReg);

      let result = ((srcInt32 as UInt32) >> (shiftInt32 as UInt32)) as Int32;

      MASM::setInt32(srcDestReg, result);
    }

    op LoadObjectFixedSlot(objectReg: Reg, slot: Int32, outputReg: ValueReg) {
        let object = MASM::getObject(objectReg);
        MASM::setValue(outputReg, Object::getFixedSlot(object, slot));
    }

    op LoadArgumentsObjectLength(
        objectReg: Reg, outputReg: Reg, label failure: MASM
    ) {
        let obj = MASM::getObject(objectReg);
        let argObj = Object::toArgumentsObject(obj);
        if ArgumentsObject::hasOverriddenLength(argObj) {
            goto failure;
        }
        let length = ArgumentsObject::getInitialLength(argObj);
        MASM::setInt32(outputReg, length)
    }

    op LoadObjectProto(objectReg: Reg, protoReg: ValueReg) {
        let object = MASM::getObject(objectReg);
        MASM::setValue(protoReg, Object::protoOf(object));
    }

    fn getValue(valueReg: ValueReg) -> Value;
    fn setValue(valueReg: ValueReg, value: Value);

    fn getInt32(reg: Reg) -> Int32;
    fn setInt32(reg: Reg, int32: Int32);

    fn getObject(reg: Reg) -> Object;
    fn setObject(reg: Reg, object: Object);

    fn getBool(reg: Reg) -> Bool;
    fn setBool(reg: Reg, bool: Bool);
}

//impl MASM {
    //spec var mut regs: Map<Reg, Value>;
    //spec var mut valueRegs: Map<ValueReg, Value>;

    //fn getValue(valueReg: ValueReg) -> Value;

    //refine fn getValue(valueReg: ValueReg) -> Value {
        //Map::get(MASM::valueRegs, valueReg)
    //}

    //fn setValue(valueReg: ValueReg, value: Value);

    //refine fn setValue(valueReg: ValueReg, value: Value) {
        //MASM::valueRegs = Map::set(MASM::valueRegs, valueReg, value);
    //}

    //spec fn getUnboxedValue(reg: Reg) -> Value {
        //Map::get(MASM::regs, reg)
    //}

    //fn setUnboxedValue(reg: Reg, value: Value);

    //refine fn setUnboxedValue(reg: Reg, value: Value) {
        //MASM::regs = Map::set(MASM::regs, reg, value);
    //}

    //fn getInt32(reg: Reg) -> Int32;

    //refine fn getInt32(reg: Reg) -> Int32 {
        //Value::toInt32(MASM::getUnboxedValue(reg))
    //}

    //fn setInt32(reg: Reg, int32: Int32);

    //refine fn setInt32(reg: Reg, int32: Int32) {
        //MASM::setUnboxedValue(reg, Value::fromInt32(int32));
    //}

    //fn getObject(reg: Reg) -> Object;

    //refine fn getObject(reg: Reg) -> Object {
        //Value::toObject(MASM::getUnboxedValue(reg))
    //}

    //fn setObject(reg: Reg, object: Object);

    //refine fn setObject(reg: Reg, object: Object) {
        //MASM::setUnboxedValue(reg, Value::fromObject(object));
    //}
//}
