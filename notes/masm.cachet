// vim: set tw=99 ts=4 sts=4 sw=4 et:

import "./js.cachet"
import "./jsop.cachet"

enum Reg {
    Rax,
    Rcx,
    Rdx,
    Rbx,
    Rsp,
    Rbp,
    Rsi,
    Rdi,
    R8,
    R9,
    R10,
    R11,
    R12,
    R13,
    R14,
    R15,
}

// #[cfg(cpp)]
struct ValueReg;
// #[cfg(verify)]
// type ValueReg = Reg;

impl ValueReg {
    fn scratchReg(valueReg: ValueReg) -> Reg;
}

enum PhyFloatReg {
    Xmm0,
    Xmm1,
    Xmm2,
    Xmm3,
    Xmm4,
    Xmm5,
    Xmm6,
    Xmm7,
    Xmm8,
    Xmm9,
    Xmm10,
    Xmm11,
    Xmm12,
    Xmm13,
    Xmm14,
    Xmm15,
}

enum FloatContentType {
    Single,
    Double,
    Simd128,
}

struct FloatReg {
   reg: PhyFloatReg,
   type: FloatContentType,
}

impl FloatReg {
    fn new(reg: PhyFloatReg, type: FloatContentType) -> FloatReg {
        let floatReg = (unsafe { FloatReg::newUnchecked(reg, type) });
        assume floatReg.reg == reg;
        assume floatReg.type == type;
        floatReg
    }

    fn newDouble(reg: PhyFloatReg) -> FloatReg {
        FloatReg::new(reg, FloatContentType::Double)
    }

    unsafe fn newUnchecked(reg: PhyFloatReg, type: FloatContentType) -> FloatReg;
}

enum Condition {
    Equal,
    NotEqual,
    Overflow,
    Zero,
    NonZero,
    Signed,
    NotSigned,
    GreaterThan,
    LessThan,
    GreaterThanOrEqual,
    LessThanOrEqual,
    Above,
    Below,
    AboveOrEqual,
    BelowOrEqual,
}

impl Condition {
    fn fromJSOp(jsop: JSOp, isSigned: Bool) -> Condition {
        if isSigned {
            if jsop == JSOp::Eq || jsop == JSOp::StrictEq {
                return Condition::Equal;
            } else if jsop == JSOp::Ne || jsop == JSOp::StrictNe {
                return Condition::NotEqual;
            } else if jsop == JSOp::Lt {
                return Condition::LessThan;
            } else if jsop == JSOp::Le {
                return Condition::LessThanOrEqual;
            } else if jsop == JSOp::Gt {
                return Condition::GreaterThan;
            } else {
                assert jsop == JSOp::Ge;
                return Condition::GreaterThanOrEqual;
            }
        } else {
            if jsop == JSOp::Eq || jsop == JSOp::StrictEq {
                return Condition::Equal;
            } else if jsop == JSOp::Ne || jsop == JSOp::StrictNe {
                return Condition::NotEqual;
            } else if jsop == JSOp::Lt {
                return Condition::Below;
            } else if jsop == JSOp::Le {
                return Condition::BelowOrEqual;
            } else if jsop == JSOp::Gt {
                return Condition::Above;
            } else {
                assert jsop == JSOp::Ge;
                return Condition::AboveOrEqual;
            }
        }
    }
}

struct Address {
    base: Reg,
    offset: Int32,
}

impl Address {
    fn new(base: Reg, offset: Int32) -> Address {
        let address = (unsafe { Address::newUnchecked(base, offset) } );
        assume address.base == base;
        assume address.offset == offset;
        address
    }

    unsafe fn newUnchecked(base: Reg, offset: Int32) -> Address;
}

enum Scale {
    TimesOne,
    TimesTwo,
    TimesFour,
    TimesEight,
}

var ValueScale: Scale = Scale::TimesEight;

struct BaseIndex {
    base: Reg,
    index: Reg,
    scale: Scale,
    offset: UInt32,
}

impl BaseIndex {
    fn new(base: Reg, index: Reg, scale: Scale, offset: UInt32) -> BaseIndex {
        let baseIndex = (unsafe { BaseIndex::newUnchecked(base, index, scale, offset) } );
        assume baseIndex.base == base;
        assume baseIndex.index == index;
        assume baseIndex.scale == scale;
        assume baseIndex.offset == offset;
        baseIndex
    }    

    unsafe fn newUnchecked(base: Reg, index: Reg, scale: Scale, offset: UInt32) -> BaseIndex;
}

struct BaseValueIndex {
    inner: BaseIndex,
}

impl BaseValueIndex {
    fn new(base: Reg, index: Reg, offset: UInt32) -> BaseValueIndex {
        let inner = BaseIndex::new(base, index, ValueScale, offset);
        let baseValueIndex = (unsafe { BaseValueIndex::newUnchecked(inner) } );
        assume baseValueIndex.inner == inner;
        baseValueIndex
    }

    unsafe fn newUnchecked(inner: BaseIndex) -> BaseValueIndex;
}

struct BaseObjectElementIndex {
    inner: BaseValueIndex,
}

impl BaseObjectElementIndex {
    fn new(base: Reg, index: Reg, offset: UInt32) -> BaseObjectElementIndex {
        let inner = BaseValueIndex::new(base, index, offset);
        let baseObjectElementIndex = (unsafe { BaseObjectElementIndex::newUnchecked(inner) } );
        assume baseObjectElementIndex.inner == inner;
        baseObjectElementIndex
    }

    unsafe fn newUnchecked(inner: BaseValueIndex) -> BaseObjectElementIndex;
}

struct BaseObjectSlotIndex {
    inner: BaseValueIndex,
}

impl BaseObjectSlotIndex {
    fn new(base: Reg, index: Reg) -> BaseObjectSlotIndex {
        let inner = BaseValueIndex::new(base, index, 0_u32);
        let baseObjectSlotIndex = (unsafe { BaseObjectSlotIndex::newUnchecked(inner) } );
        assume baseObjectSlotIndex.inner == inner;
        baseObjectSlotIndex
    }

    unsafe fn newUnchecked(inner: BaseValueIndex) -> BaseObjectSlotIndex;
}

ir MASM {
    // NOTE: Needs to be implemented to call the equivalent
    // op with string as argument.
    op AssumeUnreachable() {
        assert false;
    }

    op Mov(srcReg: Reg, dstReg: Reg) {
      MASM::setInt32(dstReg, MASM::getInt32(srcReg));
    }

    op Move32Imm32(srcInt32: Int32, dstReg: Reg) {
        MASM::setInt32(dstReg, srcInt32);
    }

    op MoveValue(srcReg: ValueReg, dstReg: ValueReg) {
        MASM::setValue(dstReg, MASM::getValue(srcReg));
    }

    op MoveDouble(srcReg: FloatReg, dstReg: FloatReg) {
        MASM::setDouble(dstReg, MASM::getDouble(srcReg));
    }

    // this op corresponds to an overload of the MoveValue op
    // that takes an immediate Value operand
    op MoveValueImm(value: Value, dstReg: ValueReg) {
        MASM::setValue(dstReg, value);
    }

    op MovePtrImmGCPtrObject(object: Object, dstReg: Reg) {
        MASM::setObject(dstReg, object);
    }

    op Cmp32Move32(condition: Condition, lhsReg: Reg, rhsReg: Reg, srcReg: Reg, dstReg: Reg) {
        assert (condition == Condition::GreaterThan || condition == Condition::LessThan);

        let lhsInt32 = MASM::getInt32(lhsReg);
        let rhsInt32 = MASM::getInt32(rhsReg);
        let srcInt32 = MASM::getInt32(srcReg);

        if condition == Condition::GreaterThan && lhsInt32 > rhsInt32 {
            MASM::setInt32(dstReg, srcInt32);
        } else if condition == Condition::LessThan && lhsInt32 < rhsInt32 {
            MASM::setInt32(dstReg, srcInt32);
        }
    }

    op StoreBool(bool: Bool, reg: Reg) {
        MASM::setBool(reg, bool);
    }

    op StoreBoolValue(bool: Bool, valueReg: ValueReg) {
        MASM::setValue(valueReg, Value::fromBool(bool));
    }

    op Jump(label target: MASM) {
      goto target;
    }

    op Load32(int32: Int32, dstReg: Reg) {
        MASM::setInt32(dstReg, int32);
    }

    op Load32Address(address: Address, dstReg: Reg) {
        let baseData = MASM::getData(address.base);
        let data = RegData::readData(baseData, address.offset);
        let value = RegData::toValue(data);
        let int32 = Value::toInt32(value);
        MASM::setInt32(dstReg, int32);
    }

    op LoadValueAddress(address: Address, dstReg: ValueReg) {
        let baseData = MASM::getData(address.base);    
        let data = RegData::readData(baseData, address.offset);
        let value = RegData::toValue(data);
        MASM::setValue(dstReg, value);
    }

    op LoadPtrAddress(address: Address, dstReg: Reg) {
        let baseData = MASM::getData(address.base);
        let data = RegData::readData(baseData, address.offset);
        MASM::setData(dstReg, data);
    }

    op TagValue(valTy: ValueType, payload: Reg, dest: ValueReg) {
        // TODO: Don't have getters/setters for other types yet
        if valTy == ValueType::Int32 {
            let i = MASM::getInt32(payload);
            let val = Value::fromInt32(i);
            MASM::setValue(dest, val);
        } else if valTy == ValueType::Bool {
            let b = MASM::getBool(payload);
            let val = Value::fromBool(b);
            MASM::setValue(dest, val);
        } else if valTy == ValueType::String {
            let s = MASM::getString(payload);
            let val = Value::fromString(s);
            MASM::setValue(dest, val);
        } else if valTy == ValueType::Symbol {
            let s = MASM::getSymbol(payload);
            let val = Value::fromSymbol(s);
            MASM::setValue(dest, val);
        } else if valTy == ValueType::BigInt {
            let b = MASM::getBigInt(payload);
            let val = Value::fromBigInt(b);
            MASM::setValue(dest, val);
        }
    }

    op EnsureDouble(srcReg: ValueReg, destReg: FloatReg, label failure: MASM) {
        let value = MASM::getValue(srcReg);
        let valTy = Value::typeOf(value);

        if valTy == ValueType::Double {
            let double = Value::toDouble(value);
            MASM::setDouble(destReg, double);
        } else if valTy == ValueType::Int32 {
            let int32 = Value::toInt32(value);
            let double = int32 as Double;
            MASM::setDouble(destReg, double);
        } else {
            goto failure;
        }
    }

    op BoxDouble(srcReg: FloatReg, valueReg: ValueReg, scratchReg: FloatReg) {
        let double = MASM::getDouble(srcReg);
        let value = Value::fromDouble(double);
        MASM::setValue(valueReg, value);
    }

    op UnboxInt32(valueReg: ValueReg, int32Reg: Reg) {
      let value = MASM::getValue(valueReg);
      MASM::setInt32(int32Reg, Value::toInt32(value)); 
    }

    op UnboxBoolean(valueReg: ValueReg, boolReg: Reg) {
      let value = MASM::getValue(valueReg);
      MASM::setBool(boolReg, Value::toBool(value));
    }

    op UnboxObject(valueReg: ValueReg, objectReg: Reg) {
        let value = MASM::getValue(valueReg);
        MASM::setObject(objectReg, Value::toObject(value));
    }

    // Note: this is a no-op in Firefox since TaggedProtos
    // can be directly treated as Objects without explicit
    // unboxing.
    op UnboxObjectProto(srcReg: Reg, destReg: Reg) {
        let data = MASM::getData(srcReg);
        let proto = RegData::toTaggedProto(data);
        let object = TaggedProto::toObject(proto);
        MASM::setObject(destReg, object);
    } 

    op FallibleUnboxObject(valueReg: ValueReg, objectReg: Reg, label failure: MASM) {
        let value = MASM::getValue(valueReg);
        let valueIsObject = Value::isObject(value);

        if !valueIsObject {
            goto failure;
        }

        let object = Value::toObject(value);
        MASM::setObject(objectReg, object);
    }

    op FallibleUnboxBoolean(valueReg: ValueReg, boolReg: Reg, label failure: MASM) {
        let value = MASM::getValue(valueReg);
        let valueIsBool = Value::isBool(value);

        if !valueIsBool {
            goto failure;
        }

        let bool = Value::toBool(value);
        MASM::setBool(boolReg, bool);
    }

    op UnboxString(valueReg: ValueReg, stringReg: Reg) {
        let value = MASM::getValue(valueReg);
        MASM::setString(stringReg, Value::toString(value));
    }

    op UnboxSymbol(valueReg: ValueReg, symbolReg: Reg) {
        let value = MASM::getValue(valueReg);
        MASM::setSymbol(symbolReg, Value::toSymbol(value));
    }

    op UnboxBigInt(valueReg: ValueReg, bigIntReg: Reg) {
        let value = MASM::getValue(valueReg);
        MASM::setBigInt(bigIntReg, Value::toBigInt(value));
    }

    op UnboxNonDouble(valueReg: ValueReg, dstReg: Reg, valTy: ValueType) {
        assert valTy != ValueType::Double;

        let value = MASM::getValue(valueReg);

        if valTy == ValueType::Object {
            let o = Value::toObject(value);
            MASM::setObject(dstReg, o);
        } else if valTy == ValueType::Int32 {
            let i = Value::toInt32(value);
            MASM::setInt32(dstReg, i);
        } else if valTy == ValueType::Bool {
            let b = Value::toBool(value);
            MASM::setBool(dstReg, b);
        } else if valTy == ValueType::String {
            let s = Value::toString(value);
            MASM::setString(dstReg, s);
        } else if valTy == ValueType::Symbol {
            let s = Value::toSymbol(value);
            MASM::setSymbol(dstReg, s);
        } else if valTy == ValueType::BigInt {
            let b = Value::toBigInt(value);
            MASM::setBigInt(dstReg, b);
        }
    }

    // NOTE: This Op needs to be implemented as a Phantom Op on the
    // C++ side since Firefox implicitly reinterprets booleans
    // as int32 within registers.
    op CastBoolToInt32(int32Reg: Reg) {
        let bool = MASM::getBool(int32Reg);
        if bool {
            MASM::setInt32(int32Reg, 1_i32);
        } else {
            MASM::setInt32(int32Reg, 0_i32);
        }
    }

    op ConvertInt32ValueToDouble(valueReg: ValueReg) {
        let value = MASM::getValue(valueReg);

        if !Value::isInt32(value) {
            return;
        }

        let int32 = Value::toInt32(value);
        let double = int32 as Double;
        MASM::setValue(valueReg, Value::fromDouble(double));
    }

    op BranchTestNumber(
        condition: Condition,
        valueReg: ValueReg,
        label branch: MASM,
    ) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;
        let value = MASM::getValue(valueReg);

        let valueIsNumber = Value::isInt32(value) || Value::isDouble(value);

        if condition == Condition::Equal && valueIsNumber {
            goto branch;
        } else if condition == Condition::NotEqual && !valueIsNumber {
            goto branch;
        }
    }

    op BranchTestNumberTag(
        condition: Condition,
        tagReg: Reg,
        label branch: MASM,
    ) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;

        let tag = MASM::getValueTag(tagReg);

        let valueIsNumber = tag == ValueType::Int32 || tag == ValueType::Double;

        if condition == Condition::Equal && valueIsNumber {
            goto branch;
        } else if condition == Condition::NotEqual && !valueIsNumber {
            goto branch;
        }
    }

    op BranchTestDouble(
        condition: Condition,
        valueReg: ValueReg,
        label branch: MASM,
    ) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;
        let value = MASM::getValue(valueReg);

        let valueIsDouble = Value::isDouble(value);

        if condition == Condition::Equal && valueIsDouble {
            goto branch;
        } else if condition == Condition::NotEqual && !valueIsDouble {
            goto branch;
        }
    }

    op BranchObject(
        condition: Condition,
        lhsReg: Reg,
        rhsReg: Reg,
        label branch: MASM,
    ) {
        let lhs = MASM::getObject(lhsReg);
        let rhs = MASM::getObject(rhsReg);
        let isEqual = lhs == rhs;

        if condition == Condition::Equal {
            if isEqual {
                goto branch;
            }
        }

        if condition == Condition::NotEqual {
            if !isEqual {
                goto branch;
            }
        }
    }

    op ConvertInt32ToDouble(srcReg: Reg, destReg: FloatReg) {
        let int32 = MASM::getInt32(srcReg);
        let double = int32 as Double;
        MASM::setDouble(destReg, double);
    }

    op BranchTestInt32(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;
        let value = MASM::getValue(valueReg);
        let valueIsInt32 = Value::isInt32(value);

        if condition == Condition::Equal && valueIsInt32 {
            goto branch;
        } else if condition == Condition::NotEqual && !valueIsInt32 {
            goto branch;
        }
    }

    op BranchTestInt32Truthy(truthy: Bool, valueReg: ValueReg, label branch: MASM) {
        let value = MASM::getValue(valueReg);
        let int32 = Value::toInt32(value);

        if (!truthy && int32 == 0_i32) || (truthy && int32 != 0_i32) {
            goto branch;
        }
    }

    op BranchTestBoolean(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;
        let value = MASM::getValue(valueReg);
        let valueIsBool = Value::isBool(value);

        if condition == Condition::Equal && valueIsBool {
            goto branch;
        } else if condition == Condition::NotEqual && !valueIsBool {
            goto branch;
        }
    }

    op BranchTestString(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;
        let value = MASM::getValue(valueReg);
        let valueIsString = Value::isString(value);

        if condition == Condition::Equal && valueIsString {
            goto branch;
        } else if condition == Condition::NotEqual && !valueIsString {
            goto branch;
        }
    }

    op BranchTestSymbol(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;
        let value = MASM::getValue(valueReg);
        let valueIsSymbol = Value::isSymbol(value);

        if condition == Condition::Equal && valueIsSymbol {
            goto branch;
        } else if condition == Condition::NotEqual && !valueIsSymbol {
            goto branch;
        }
    }

    op BranchTestBigInt(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;
        let value = MASM::getValue(valueReg);
        let valueIsBigInt = Value::isBigInt(value);

        if condition == Condition::Equal && valueIsBigInt {
            goto branch;
        } else if condition == Condition::NotEqual && !valueIsBigInt {
            goto branch;
        }
    }

    op BranchTestObject(condition: Condition, valueReg: ValueReg, label branch: MASM) {
      assert condition == Condition::Equal || condition == Condition::NotEqual;
      let value = MASM::getValue(valueReg);
      let valueIsObject = Value::isObject(value);

      if condition == Condition::Equal && valueIsObject {
          goto branch;
      }

      if condition == Condition::NotEqual && !valueIsObject {
          goto branch;
      }
    }

    // Note: this is a wrapper around branchTestPtr for when
    // the register contains a TaggedProto
    op BranchTestNullProto(reg: Reg, label branch: MASM) {
        let data = MASM::getData(reg);
        let proto = RegData::toTaggedProto(data);

        if TaggedProto::isNull(proto) {
            goto branch;
        }
    }

    // Note: this is a wrapper around branchPtr for when
    // the register contains a TaggedProto
    op BranchTestLazyProto(reg: Reg, label branch: MASM) {
        let data = MASM::getData(reg);
        let proto = RegData::toTaggedProto(data);

        if TaggedProto::isLazy(proto) {
            goto branch;
        }
    }

    op BranchTestNull(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        let value = MASM::getValue(valueReg);
        let valueIsNull = Value::isNull(value);

        if condition == Condition::Equal {
            if valueIsNull {
                goto branch;
            }
        }

        if condition == Condition::NotEqual {
            if !valueIsNull {
                goto branch;
            }
        }
    }

    op BranchTestUndefined(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;

        let value = MASM::getValue(valueReg);
        let valueIsUndefined = Value::isUndefined(value);

        if condition == Condition::Equal && valueIsUndefined{
            goto branch;
        }

        if condition == Condition::NotEqual && !valueIsUndefined {
            goto branch;
        }
    }

    op BranchTestMagic(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        let value = MASM::getValue(valueReg);
        let valueIsMagic = Value::isMagic(value);

        if condition == Condition::Equal {
            if valueIsMagic {
                goto branch;
            }
        }

        if condition == Condition::NotEqual {
            if !valueIsMagic {
                goto branch;
            }
        }
    }

    op BranchTestObjIsFunction(
        condition: Condition, objectReg: Reg, scratchReg: Reg,
        spectreRegToZero: Reg, label branch: MASM
    ) {

        assert scratchReg != spectreRegToZero;
        assert condition == Condition::Equal || condition == Condition::NotEqual;

        let object = MASM::getObject(objectReg);
        let shape = Object::shapeOf(object);
        let class = Shape::classOf(shape);
        MASM::setData(scratchReg, RegData::fromClass(class));

        let isClass = class == Class::functionClass() || class == Class::extendedFunctionClass();

        if condition == Condition::Equal && isClass {
            goto branch;
        }

        if condition == Condition::NotEqual && !isClass {
            goto branch;
        }

        MASM::setInt32(scratchReg, 0_i32);
    }

    op BranchTestObjIsFunctionNoSpectreMitigations(
        condition: Condition, objectReg: Reg, scratchReg: Reg, label branch: MASM
    ) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;

        let object = MASM::getObject(objectReg);
        let shape = Object::shapeOf(object);
        let class = Shape::classOf(shape);
        MASM::setData(scratchReg, RegData::fromClass(class));

        let isClass = class == Class::functionClass() || class == Class::extendedFunctionClass();
        
        if condition == Condition::Equal && isClass {
            goto branch;
        } else if condition == Condition::NotEqual && !isClass {
            goto branch;
        }
    }

    op BranchTestObjectShape(
        condition: Condition, objectReg: Reg, shape: Shape, scratchReg: Reg, spectreRegToZero: Reg,
        label branch: MASM
    ) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;
        assert objectReg != scratchReg;
        assert spectreRegToZero != scratchReg;

        let object = MASM::getObject(objectReg);
        let objectHasShape = Object::shapeOf(object) == shape;

        MASM::setInt32(scratchReg, 0_i32);

        if condition == Condition::Equal && objectHasShape {
            goto branch;
        } else if condition == Condition::NotEqual && !objectHasShape {
            goto branch;
        }
    }

    op BranchTestObjectShapeNoSpectreMitigations(
        condition: Condition, objectReg: Reg, shape: Shape, label branch: MASM
    ) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;

        let object = MASM::getObject(objectReg);
        let objectHasShape = Object::shapeOf(object) == shape;

        if condition == Condition::Equal && objectHasShape {
            goto branch;
        } else if condition == Condition::NotEqual && !objectHasShape {
            goto branch;
        }
    }

    op BranchTestObjectClass(
        condition: Condition, objectReg: Reg, class: Class, scratchReg: Reg, spectreRegToZero: Reg,
        label branch: MASM
    ) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;
        assert scratchReg != spectreRegToZero;

        let object = MASM::getObject(objectReg);
        let shape = Object::shapeOf(object);
        MASM::setData(scratchReg, RegData::fromClass(class));

        let objectHasClass = Shape::classOf(shape) == class;

        if condition == Condition::Equal && objectHasClass {
            goto branch;
        } else if condition == Condition::NotEqual && !objectHasClass {
            goto branch;
        }

        MASM::setInt32(scratchReg, 0_i32);
    }

    op BranchTestObjectClassNoSpectreMitigations(
        condition: Condition, objectReg: Reg, class: Class, scratchReg: Reg, label branch: MASM
    ) {
        assert condition == Condition::Equal || condition == Condition::NotEqual;

        let object = MASM::getObject(objectReg);
        let shape = Object::shapeOf(object);
        MASM::setData(scratchReg, RegData::fromClass(class));

        let objectHasClass = Shape::classOf(shape) == class;

        if condition == Condition::Equal && objectHasClass {
            goto branch;
        } else if condition == Condition::NotEqual && !objectHasClass {
            goto branch;
        }
    }

    op BranchIfNonNativeObj(objectReg: Reg, scratchReg: Reg, label branch: MASM) {
        let object = MASM::getObject(objectReg);
        let shape = Object::shapeOf(object);
        let class = Shape::classOf(shape);
        MASM::setData(scratchReg, RegData::fromClass(class));
        let objectIsNative = Class::isNativeObject(class);

        if !objectIsNative {
            goto branch;
        }
    }

    op BranchTestObjectIsProxy(proxy: Bool, objectReg: Reg, scratchReg: Reg, label branch: MASM) {
        let object = MASM::getObject(objectReg);
        let shape = Object::shapeOf(object);
        let class = Shape::classOf(shape);
        MASM::setData(scratchReg, RegData::fromClass(class));
        let objectIsProxy = Class::isProxyObject(class);

        if !proxy && !objectIsProxy {
            goto branch;
        } else if proxy && objectIsProxy {
            goto branch;
        }
    }

    op Branch32(condition: Condition, lhsReg: Reg, rhsReg: Reg, label branch: MASM) {
        assert (
            condition == Condition::Equal || condition == Condition::NotEqual ||
            condition == Condition::GreaterThan || condition == Condition::LessThan ||
            condition == Condition::GreaterThanOrEqual || condition == Condition::LessThanOrEqual ||
            condition == Condition::Above || condition == Condition::Below ||
            condition == Condition::AboveOrEqual || condition == Condition::BelowOrEqual

        );

        let lhsInt32 = MASM::getInt32(lhsReg);
        let rhsInt32 = MASM::getInt32(rhsReg);
        
        let lhsUInt32 = lhsInt32 as UInt32;
        let rhsUInt32 = rhsInt32 as UInt32;

        if condition == Condition::Equal && lhsInt32 == rhsInt32 {
            goto branch;
        } else if condition == Condition::NotEqual && lhsInt32 != rhsInt32 {
            goto branch;
        } else if condition == Condition::GreaterThan && lhsInt32 > rhsInt32 {
            goto branch;
        } else if condition == Condition::LessThan && lhsInt32 < rhsInt32 {
            goto branch;
        } else if condition == Condition::GreaterThanOrEqual && lhsInt32 >= rhsInt32 {
            goto branch;
        } else if condition == Condition::LessThanOrEqual && lhsInt32 <= rhsInt32 {
            goto branch;
        } else if condition == Condition::Above && lhsUInt32 > rhsUInt32 {
            goto branch;
        } else if condition == Condition::Below && lhsUInt32 < rhsUInt32 {
            goto branch;
        } else if condition == Condition::AboveOrEqual && lhsUInt32 >= rhsUInt32 {
            goto branch;
        } else if condition == Condition::BelowOrEqual && lhsUInt32 <= rhsUInt32 {
            goto branch;
        }
    }

    op Branch32Tag(condition: Condition, lhsReg: Reg, rhsReg: Reg, label branch: MASM) {
        assert (
            condition == Condition::Equal || condition == Condition::NotEqual
        );

        let lhsData = MASM::getData(lhsReg);
        let rhsData = MASM::getData(rhsReg);

        if condition == Condition::Equal && lhsData == rhsData {
            goto branch;
        } else if condition == Condition::NotEqual && lhsData != rhsData {
            goto branch;
        }
    }

    // NOTE: This Op needs to be implemented on the C++ to delegate to the
    // appropriate overload of Branch32Imm since Cachet doesn't have overloading.
    op Branch32Imm(condition: Condition, lhsReg: Reg, rhsInt32: Int32, label branch: MASM) {
        assert (
            condition == Condition::Equal ||
            condition == Condition::NotEqual ||
            condition == Condition::LessThan
        );

        let lhsInt32 = MASM::getInt32(lhsReg);

        if condition == Condition::Equal && lhsInt32 == rhsInt32 {
            goto branch;
        } else if condition == Condition::NotEqual && lhsInt32 != rhsInt32 {
            goto branch;
        } else if condition == Condition::LessThan && lhsInt32 < rhsInt32 {
            goto branch;
        }
    }

    op Branch32AddressImm32(
        condition: Condition, address: Address, rhsInt32: Int32, label branch:MASM
    ) {
        assert (
            condition == Condition::Equal ||
            condition == Condition::NotEqual ||
            condition == Condition::LessThan
        );


        let baseData = MASM::getData(address.base);
        let data = RegData::readData(baseData, address.offset);
        let lhsInt32 = Value::toInt32(RegData::toUnboxedValue(data));

        if condition == Condition::Equal && lhsInt32 == rhsInt32 {
            goto branch;
        } else if condition == Condition::NotEqual && lhsInt32 != rhsInt32 {
            goto branch;
        } else if condition == Condition::LessThan && lhsInt32 < rhsInt32 {
            goto branch;
        }
    }

    op BranchTest32(condition: Condition, lhsReg: Reg, rhsReg: Reg, label branch: MASM) {
      let lhsInt32 = MASM::getInt32(lhsReg);
      let rhsInt32 = MASM::getInt32(rhsReg);

      let result = lhsInt32 & rhsInt32;

      assert (
        condition == Condition::Zero ||
        condition == Condition::NonZero ||
        condition == Condition::Signed ||
        condition == Condition::NotSigned
      );

      if condition == Condition::Zero {
        if result == 0_i32 {
          goto branch;
        }
      } else if condition == Condition::NonZero {
        if result != 0_i32 {
          goto branch;
        }
      } else if condition == Condition::Signed {
        if result < 0_i32 {
          goto branch;
        }
      } else if condition == Condition::NotSigned {
        if result > 0_i32 {
          goto branch;
        }
      }
    }

    op BranchTest32Imm(condition: Condition, lhsReg: Reg, rhsInt32: Int32, label branch: MASM) {
      let lhsInt32 = MASM::getInt32(lhsReg);

      let result = lhsInt32 & rhsInt32;

      assert (
        condition == Condition::Zero ||
        condition == Condition::NonZero ||
        condition == Condition::Signed ||
        condition == Condition::NotSigned
      );

      if condition == Condition::Zero {
        if result == 0_i32 {
          goto branch;
        }
      } else if condition == Condition::NonZero {
        if result != 0_i32 {
          goto branch;
        }
      } else if condition == Condition::Signed {
        if result < 0_i32 {
          goto branch;
        }
      } else if condition == Condition::NotSigned {
        if result > 0_i32 {
          goto branch;
        }
      }
    }

    op BranchAdd32(condition: Condition, srcReg: Reg, dstReg: Reg, label branch: MASM) {
      let lhsInt32 = MASM::getInt32(srcReg);
      let rhsInt32 = MASM::getInt32(dstReg);

      let result = lhsInt32 + rhsInt32;
      
      assert condition == Condition::Overflow;
      if lhsInt32 > 0_i32 && rhsInt32 > 0_i32 && result < 0_i32 {
          goto branch;
      }

      if lhsInt32 < 0_i32 && rhsInt32 < 0_i32 && result > 0_i32 {
          goto branch;
      }

      MASM::setInt32(dstReg, result);
    }

    // this op corresponds to an overload of the BranchAdd32 MASM op.
    op BranchAdd32Imm(condition: Condition, lhsInt32: Int32, dstReg: Reg, label branch: MASM) {
      let rhsInt32 = MASM::getInt32(dstReg);

      let result = lhsInt32 + rhsInt32;

      assert condition == Condition::Overflow;
      if lhsInt32 > 0_i32 && rhsInt32 > 0_i32 && result < 0_i32 {
          goto branch;
      }

      if lhsInt32 < 0_i32 && rhsInt32 < 0_i32 && result > 0_i32 {
          goto branch;
      }

      MASM::setInt32(dstReg, result);
    }

    op BranchSub32(condition: Condition, srcReg: Reg, dstReg: Reg, label branch: MASM) {
      let lhsInt32 = MASM::getInt32(dstReg);
      let rhsInt32 = MASM::getInt32(srcReg);

      let result = lhsInt32 - rhsInt32;

      assert condition == Condition::Overflow;

      let rhsInt32Neg = -rhsInt32;
      let minInt32 = 1_i32 << 31_i32; // Do it this way until negative literals are a thing

      if rhsInt32 == minInt32 && lhsInt32 >= 0_i32 {
          goto branch;
      } else if lhsInt32 > 0_i32 && rhsInt32 < 0_i32 && result < 0_i32 {
          goto branch;
      }

      if lhsInt32 < 0_i32 && rhsInt32 > 0_i32 && result > 0_i32 {
          goto branch;
      }

      MASM::setInt32(dstReg, result);
    }

    // this op corresponds to an overload of the BranchAdd32 MASM op.
    op BranchSub32Imm(condition: Condition, rhsInt32: Int32, dstReg: Reg, label branch: MASM) {
      let lhsInt32 = MASM::getInt32(dstReg);

      let result = lhsInt32 - rhsInt32;

      assert condition == Condition::Overflow;

      let rhsInt32Neg = -rhsInt32;
      let minInt32 = 1_i32 << 31_i32; // Do it this way until negative literals are a thing

      if rhsInt32 == minInt32 && lhsInt32 >= 0_i32 {
          goto branch;
      } else if lhsInt32 > 0_i32 && rhsInt32 < 0_i32 && result < 0_i32 {
          goto branch;
      }

      if lhsInt32 < 0_i32 && rhsInt32 > 0_i32 && result > 0_i32 {
          goto branch;
      }

      MASM::setInt32(dstReg, result);
    }

    op BranchMul32(condition: Condition, srcReg: Reg, dstReg: Reg, label branch: MASM) {
      let lhsInt32 = MASM::getInt32(dstReg);
      let rhsInt32 = MASM::getInt32(srcReg);

      let result = lhsInt32 * rhsInt32;

      assert condition == Condition::Overflow;

      let resultWide = (lhsInt32 as Int64) * (rhsInt32 as Int64);
      if (result as Int64) != resultWide {
        goto branch;
      }

      MASM::setInt32(dstReg, result);
    }

    // TODO(abhishekc-sharma): handle isUnsigned and volatile registers.
    op FlexibleDivMod32(rhsReg: Reg, lhsOutputReg: Reg, remReg: Reg) {
      let lhsInt32 = MASM::getInt32(lhsOutputReg);
      let rhsInt32 = MASM::getInt32(rhsReg);

      let quotient = lhsInt32 / rhsInt32;
      let remainder = lhsInt32 % rhsInt32;

      MASM::setInt32(lhsOutputReg, quotient);
      MASM::setInt32(remReg, remainder);
    }

    // TODO(abhishekc-sharma): handle isUnsigned and volatile registers.
    op FlexibleRemainder32(rhsReg: Reg, lhsOutputReg: Reg) {
      let lhsInt32 = MASM::getInt32(lhsOutputReg);
      let rhsInt32 = MASM::getInt32(rhsReg);

      let remainder = lhsInt32 % rhsInt32;
      MASM::setInt32(lhsOutputReg, remainder);
    }

    op Neg32(valueReg: Reg) {
      let valueInt32 = MASM::getInt32(valueReg);
      let result = -valueInt32;

      MASM::setInt32(valueReg, result);
    }

    op Not32(valueReg: Reg) {
      let valueInt32 = MASM::getInt32(valueReg);
      let result = ~valueInt32;

      MASM::setInt32(valueReg, result);
    }

    op Or32(srcReg: Reg, dstReg: Reg) {
      let lhsInt32 = MASM::getInt32(srcReg);
      let rhsInt32 = MASM::getInt32(dstReg);

      let result = lhsInt32 | rhsInt32;

      MASM::setInt32(dstReg, result);
    }

    op Xor32(srcReg: Reg, dstReg: Reg) {
      let lhsInt32 = MASM::getInt32(srcReg);
      let rhsInt32 = MASM::getInt32(dstReg);

      let result = lhsInt32 ^ rhsInt32;

      MASM::setInt32(dstReg, result);
    }

    op And32(srcReg: Reg, dstReg: Reg) {
      let lhsInt32 = MASM::getInt32(srcReg);
      let rhsInt32 = MASM::getInt32(dstReg);

      let result = lhsInt32 & rhsInt32;

      MASM::setInt32(dstReg, result);
    }

    op FlexibleLshift32(shiftReg: Reg, srcDestReg: Reg) {
      let shiftInt32 = MASM::getInt32(shiftReg) & 31_i32;
      let srcInt32 = MASM::getInt32(srcDestReg);

      let result = srcInt32 << shiftInt32;

      MASM::setInt32(srcDestReg, result);
    }

    op FlexibleRshift32Arithmetic(shiftReg: Reg, srcDestReg: Reg) {
      let shiftInt32 = MASM::getInt32(shiftReg) & 31_i32;
      let srcInt32 = MASM::getInt32(srcDestReg);

      let result = srcInt32 >> shiftInt32;

      MASM::setInt32(srcDestReg, result);
    }

    op FlexibleRshift32(shiftReg: Reg, srcDestReg: Reg) {
      let shiftInt32 = MASM::getInt32(shiftReg) & 31_i32;
      let srcInt32 = MASM::getInt32(srcDestReg);

      let result = ((srcInt32 as UInt32) >> (shiftInt32 as UInt32)) as Int32;

      MASM::setInt32(srcDestReg, result);
    }

    op TestObjectSet(condition: Condition, valueReg: ValueReg, dstReg: Reg) {
        assert (condition == Condition::Equal || condition == Condition::NotEqual);

        let value = MASM::getValue(valueReg);
        let isObject = Value::isObject(value);

        MASM::setBool(dstReg, false);

        if condition == Condition::Equal && isObject {
            MASM::setBool(dstReg, true);
        } else if condition == Condition::NotEqual && !isObject {
            MASM::setBool(dstReg, true);
        }
    }

    op LoadObjectFixedSlot(objectReg: Reg, slot: Int32, outputReg: ValueReg) {
        let object = MASM::getObject(objectReg);
        MASM::setValue(outputReg, Object::getFixedSlot(object, slot as UInt32));
    }

    op LoadArgumentsObjectLength(
        objectReg: Reg, outputReg: Reg, label failure: MASM
    ) {
        let obj = MASM::getObject(objectReg);
        let argObj = Object::toArgumentsObject(obj);
        let length = ArgumentsObject::getInitialLength(argObj);
        MASM::setInt32(outputReg, length as Int32);
        if length & ArgumentsObject::lengthOverridenBit != 0_u32 {
            goto failure;
        }
        MASM::setInt32(outputReg, (length >> ArgumentsObject::packedBitsCount) as Int32)
    }

    op LoadObjectProto(objectReg: Reg, protoReg: Reg) {
        let object = MASM::getObject(objectReg);

        let shape = Object::shapeOf(object);
        let baseShape = Shape::baseShapeOf(shape);
        let proto = BaseShape::protoOf(baseShape);
        let data = RegData::fromTaggedProto(proto);

        MASM::setData(protoReg, data);
    }

    fn extractTag(valueReg: ValueReg, scratchReg: Reg) emits MASM -> Reg {
        //TODO(abhishek) assert scratchReg != R11
        let value = MASM::getValue(valueReg);
        let tag = Value::typeOf(value);
        MASM::setValueTag(scratchReg, tag);
        return scratchReg;
    }

    fn getData(reg: Reg) -> RegData;
    fn setData(reg: Reg, data: RegData);

    fn getValueTag(reg: Reg) -> ValueType {
        RegData::toValueType(MASM::getData(reg))
    }

    fn setValueTag(reg:Reg, tag: ValueType) {
        MASM::setData(reg, RegData::fromValueType(tag));
    }

    fn getValue(valueReg: ValueReg) -> Value;
    fn setValue(valueReg: ValueReg, value: Value);

    fn getInt32(reg: Reg) -> Int32;
    fn setInt32(reg: Reg, int32: Int32);

    fn getObject(reg: Reg) -> Object;
    fn setObject(reg: Reg, object: Object);

    fn getBool(reg: Reg) -> Bool;
    fn setBool(reg: Reg, bool: Bool);

    fn getString(reg: Reg) -> String;
    fn setString(reg: Reg, string: String);

    fn getSymbol(reg: Reg) -> Symbol;
    fn setSymbol(reg: Reg, symbol: Symbol);

    fn getBigInt(reg: Reg) -> BigInt;
    fn setBigInt(reg: Reg, bigInt: BigInt);

    fn getDouble(floatReg: FloatReg) -> Double;
    fn setDouble(floatReg: FloatReg, double: Double);
}

//impl MASM {
    //spec var mut regs: Map<Reg, Value>;
    //spec var mut valueRegs: Map<ValueReg, Value>;

    //fn getValue(valueReg: ValueReg) -> Value;

    //refine fn getValue(valueReg: ValueReg) -> Value {
        //Map::get(MASM::valueRegs, valueReg)
    //}

    //fn setValue(valueReg: ValueReg, value: Value);

    //refine fn setValue(valueReg: ValueReg, value: Value) {
        //MASM::valueRegs = Map::set(MASM::valueRegs, valueReg, value);
    //}

    //spec fn getUnboxedValue(reg: Reg) -> Value {
        //Map::get(MASM::regs, reg)
    //}

    //fn setUnboxedValue(reg: Reg, value: Value);

    //refine fn setUnboxedValue(reg: Reg, value: Value) {
        //MASM::regs = Map::set(MASM::regs, reg, value);
    //}

    //fn getInt32(reg: Reg) -> Int32;

    //refine fn getInt32(reg: Reg) -> Int32 {
        //Value::toInt32(MASM::getUnboxedValue(reg))
    //}

    //fn setInt32(reg: Reg, int32: Int32);

    //refine fn setInt32(reg: Reg, int32: Int32) {
        //MASM::setUnboxedValue(reg, Value::fromInt32(int32));
    //}

    //fn getObject(reg: Reg) -> Object;

    //refine fn getObject(reg: Reg) -> Object {
        //Value::toObject(MASM::getUnboxedValue(reg))
    //}

    //fn setObject(reg: Reg, object: Object);

    //refine fn setObject(reg: Reg, object: Object) {
        //MASM::setUnboxedValue(reg, Value::fromObject(object));
    //}
//}
