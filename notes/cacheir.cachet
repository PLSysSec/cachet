// vim: set tw=99 ts=4 sts=4 sw=4 et:

import "./masm.cachet";

enum OperandLocationKind {
    Uninitialized,
    PayloadReg,
    ValueReg,
}

struct OperandLocation;

impl OperandLocation {
    fn kind(loc: OperandLocation) -> OperandLocationKind; 

    fn newUninitialized() -> OperandLocation {
        let loc = (unsafe { OperandLocation::newUninitializedUnchecked() });
        assume OperandLocation::kind(loc) == OperandLocationKind::Uninitialized;
        loc
    }

    unsafe fn newUninitializedUnchecked() -> OperandLocation;

    fn setValueReg(out loc: OperandLocation, valueReg: ValueReg) {
        (unsafe { OperandLocation::setValueRegUnchecked(out loc, valueReg) }); 
        assume OperandLocation::kind(loc) == OperandLocationKind::ValueReg;
        assume (unsafe { OperandLocation::getValueRegUnchecked(loc) } ) == valueReg;
    }

    unsafe fn setValueRegUnchecked(out loc: OperandLocation, valueReg: ValueReg);

    fn getValueReg(loc: OperandLocation) -> ValueReg {
        assert OperandLocation::kind(loc) == OperandLocationKind::ValueReg;
        let valueReg = (unsafe { OperandLocation::getValueRegUnchecked(loc) });
        valueReg
    }

    unsafe fn getValueRegUnchecked(loc: OperandLocation) -> ValueReg;

    fn setPayloadReg(out loc: OperandLocation, reg: Reg, type: ValueType) {
        (unsafe { OperandLocation::setPayloadRegUnchecked(out loc, reg, type) }); 
        assume OperandLocation::kind(loc) == OperandLocationKind::PayloadReg;
        assume (unsafe { OperandLocation::getPayloadRegUnchecked(loc) } ) == reg;
        assume (unsafe { OperandLocation::getPayloadTypeUnchecked(loc) } ) == type;
    }

    unsafe fn setPayloadRegUnchecked(out loc: OperandLocation, reg: Reg, type: ValueType);

    fn getPayloadReg(loc: OperandLocation) -> Reg {
        assert OperandLocation::kind(loc) == OperandLocationKind::PayloadReg;
        let reg = (unsafe { OperandLocation::getPayloadRegUnchecked(loc) });
        reg
    }

    unsafe fn getPayloadRegUnchecked(loc: OperandLocation) -> Reg;

    fn getPayloadType(loc: OperandLocation) -> ValueType {
        assert OperandLocation::kind(loc) == OperandLocationKind::PayloadReg;
        let type = (unsafe { OperandLocation::getPayloadTypeUnchecked(loc) });
        type
    }

    unsafe fn getPayloadTypeUnchecked(loc: OperandLocation) -> ValueType;
}

struct OperandId;

impl OperandId {
    fn id(operandId: OperandId) -> UInt16;

    fn toValueId(operandId: OperandId) -> ValueId {
        ValueId::fromId(OperandId::id(operandId))
    }

    fn toObjectId(operandId: OperandId) -> ObjectId {
        ObjectId::fromId(OperandId::id(operandId))
    }

    fn toStringId(operandId: OperandId) -> StringId {
        StringId::fromId(OperandId::id(operandId))
    }

    fn toSymbolId(operandId: OperandId) -> SymbolId {
        SymbolId::fromId(OperandId::id(operandId))
    }

    fn toBoolId(operandId: OperandId) -> BoolId {
        BoolId::fromId(OperandId::id(operandId))
    }

    fn toInt32Id(operandId: OperandId) -> Int32Id {
        Int32Id::fromId(OperandId::id(operandId))
    }

    fn toNumberId(operandId: OperandId) -> NumberId {
        NumberId::fromId(OperandId::id(operandId))
    }

    fn toBigIntId(operandId: OperandId) -> BigIntId {
        BigIntId::fromId(OperandId::id(operandId))
    }

    fn toValueTagId(operandId: OperandId) -> ValueTagId {
        ValueTagId::fromId(OperandId::id(operandId))
    }

    fn toIntPtrId(operandId: OperandId) -> IntPtrId {
        IntPtrId::fromId(OperandId::id(operandId))
    }

    fn toRawId(operandId: OperandId) -> RawId {
        RawId::fromId(OperandId::id(operandId))
    }
}

struct ValueId <: OperandId;

impl ValueId {
    fn fromId(id: UInt16) -> ValueId {
        let valueId = unsafe { ValueId::fromIdUnchecked(id) };
        assume OperandId::id(valueId) == id;
        valueId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> ValueId;
}

struct ObjectId <: OperandId;

impl ObjectId {
    fn fromId(id: UInt16) -> ObjectId {
        let objectId = unsafe { ObjectId::fromIdUnchecked(id) };
        assume OperandId::id(objectId) == id;
        objectId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> ObjectId;
}

struct StringId <: OperandId;

impl StringId {
    fn fromId(id: UInt16) -> StringId {
        let stringId = unsafe { StringId::fromIdUnchecked(id) };
        assume OperandId::id(stringId) == id;
        stringId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> StringId;
}

struct SymbolId <: OperandId;

impl SymbolId {
    fn fromId(id: UInt16) -> SymbolId {
        let symbolId = unsafe { SymbolId::fromIdUnchecked(id) };
        assume OperandId::id(symbolId) == id;
        symbolId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> SymbolId;
}

struct BoolId <: OperandId;

impl BoolId {
    fn fromId(id: UInt16) -> BoolId {
        let boolId = unsafe { BoolId::fromIdUnchecked(id) };
        assume OperandId::id(boolId) == id;
        boolId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> BoolId;
}

struct Int32Id <: OperandId;

impl Int32Id {
    fn fromId(id: UInt16) -> Int32Id {
        let int32Id = unsafe { Int32Id::fromIdUnchecked(id) };
        assume OperandId::id(int32Id) == id;
        int32Id
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> Int32Id;
}

struct NumberId <: ValueId;

impl NumberId {
    fn fromId(id: UInt16) -> NumberId {
        let numberId = unsafe { NumberId::fromIdUnchecked(id) };
        assume OperandId::id(numberId) == id;
        numberId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> NumberId;
}

struct BigIntId <: OperandId;

impl BigIntId {
    fn fromId(id: UInt16) -> BigIntId {
        let bigIntId = unsafe { BigIntId::fromIdUnchecked(id) };
        assume OperandId::id(bigIntId) == id;
        bigIntId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> BigIntId;
}

struct ValueTagId <: OperandId;

impl ValueTagId {
    fn fromId(id: UInt16) -> ValueTagId {
        let valueTagId = unsafe { ValueTagId::fromIdUnchecked(id) };
        assume OperandId::id(valueTagId) == id;
        valueTagId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> ValueTagId;
}

struct IntPtrId <: OperandId;

impl IntPtrId {
    fn fromId(id: UInt16) -> IntPtrId {
        let intPtrId = unsafe { IntPtrId::fromIdUnchecked(id) };
        assume OperandId::id(intPtrId) == id;
        intPtrId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> IntPtrId;
}

// TODO(spinda): This isn't an actual `OperandId` subtype on the C++ side.
// Figure out what this maps to.
struct RawId <: OperandId;

impl RawId {
    fn fromId(id: UInt16) -> RawId {
        let rawId = unsafe { RawId::fromIdUnchecked(id) };
        assume OperandId::id(rawId) == id;
        rawId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> RawId;
}

struct TypedId <: OperandId;

impl TypedId {
    fn type(typedId: TypedId) -> ValueType;

    fn new(id: UInt16, type: ValueType) -> TypedId {
        let typedId = unsafe { TypedId::newUnchecked(id, type) };
        assume OperandId::id(typedId) == id;
        assume TypedId::type(typedId) == type;
        typedId
    }

    unsafe fn newUnchecked(id: UInt16, type: ValueType) -> TypedId;

    fn fromObjectId(objectId: ObjectId) -> TypedId {
        TypedId::new(OperandId::id(objectId), ValueType::Object)
    }

    fn toObjectId(typedId: TypedId) -> ObjectId {
        assert TypedId::type(typedId) == ValueType::Object;
        OperandId::toObjectId(typedId)
    }

    fn fromStringId(stringId: StringId) -> TypedId {
        TypedId::new(OperandId::id(stringId), ValueType::String)
    }

    fn toStringId(typedId: TypedId) -> StringId {
        assert TypedId::type(typedId) == ValueType::String;
        OperandId::toStringId(typedId)
    }

    fn fromSymbolId(symbolId: SymbolId) -> TypedId {
        TypedId::new(OperandId::id(symbolId), ValueType::Symbol)
    }

    fn toSymbolId(typedId: TypedId) -> SymbolId {
        assert TypedId::type(typedId) == ValueType::Symbol;
        OperandId::toSymbolId(typedId)
    }

    fn fromBoolId(boolId: BoolId) -> TypedId {
        TypedId::new(OperandId::id(boolId), ValueType::Bool)
    }

    fn toBoolId(typedId: TypedId) -> BoolId {
        assert TypedId::type(typedId) == ValueType::Bool;
        OperandId::toBoolId(typedId)
    }

    fn fromInt32Id(int32Id: Int32Id) -> TypedId {
        TypedId::new(OperandId::id(int32Id), ValueType::Int32)
    }

    fn toInt32Id(typedId: TypedId) -> Int32Id {
        assert TypedId::type(typedId) == ValueType::Int32;
        OperandId::toInt32Id(typedId)
    }

    fn fromBigIntId(bigIntId: BigIntId) -> TypedId {
        TypedId::new(OperandId::id(bigIntId), ValueType::BigInt)
    }

    fn toBigIntId(typedId: TypedId) -> BigIntId {
        assert TypedId::type(typedId) == ValueType::BigInt;
        OperandId::toBigIntId(typedId)
    }
}

struct Int32Field;

impl Int32Field {
    fn fromOffset(offset: UInt32) -> Int32Field;
}

struct IntPtrField;

impl IntPtrField {
    fn fromOffset(offset: UInt32) -> IntPtrField;
}

struct ShapeField;

impl ShapeField {
    fn fromOffset(offset: UInt32) -> ShapeField;
}

// FIXME(spinda): Not a real field type.
struct ClassField;

impl ClassField {
    fn fromOffset(offset: UInt32) -> ClassField;
}

struct GetterSetterField;

impl GetterSetterField {
    fn fromOffset(offset: UInt32) -> GetterSetterField;
}

struct ObjectField;

impl ObjectField {
    fn fromOffset(offset: UInt32) -> ObjectField;
}

struct SymbolField;

impl SymbolField {
    fn fromOffset(offset: UInt32) -> SymbolField;
}

struct StringField;

impl StringField {
    fn fromOffset(offset: UInt32) -> StringField;
}

struct BaseScriptField;

impl BaseScriptField {
    fn fromOffset(offset: UInt32) -> BaseScriptField;
}

struct IdField;

impl IdField {
    fn fromOffset(offset: UInt32) -> IdField;
}

struct AllocSiteField;

impl AllocSiteField {
    fn fromOffset(offset: UInt32) -> AllocSiteField;
}

struct Int64Field;

impl Int64Field {
    fn fromOffset(offset: UInt32) -> Int64Field;
}

struct ValueField;

impl ValueField {
    fn fromOffset(offset: UInt32) -> ValueField;
}

enum GuardClassKind {
    Array,
    PlainObject,
    ArrayBuffer,
    SharedArrayBuffer,
    DataView,
    MappedArguments,
    UnmappedArguments,
    WindowProxy,
    JSFunction,
    Set,
    Map,
}

ir CacheIR emits MASM {
    op ReturnFromIC() {}

    op GuardIsNumber(valueId: ValueId) {
        let valueReg = CacheIR::useValueId(valueId);
        CacheIR::addFailurePath(out label failure);
        emit MASM::BranchTestNumber(Condition::NotEqual, valueReg, failure);
    }

    op GuardIsNullOrUndefined(valueId: ValueId) {
        let valueReg = CacheIR::useValueId(valueId);
        CacheIR::addFailurePath(out label failure);

        label success: MASM;
        emit MASM::BranchTestNull(Condition::Equal, valueReg, success);
        emit MASM::BranchTestUndefined(Condition::NotEqual, valueReg, failure);

        bind success;
    }

    op GuardIsNull(valueId: ValueId){
        let valueReg = CacheIR::useValueId(valueId);
        CacheIR::addFailurePath(out label failure);
        emit MASM::BranchTestNull(Condition::NotEqual, valueReg, failure);
    }

    op GuardIsUndefined(valueId: ValueId) {
        let valueReg = CacheIR::useValueId(valueId);
        CacheIR::addFailurePath(out label failure);
        emit MASM::BranchTestUndefined(Condition::NotEqual, valueReg, failure);
    }

    op GuardIsNativeObject(objectId: ObjectId) {
        let objectReg = CacheIR::useObjectId(objectId);
        let scratchReg = CacheIR::allocateReg();
        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchIfNonNativeObj(objectReg, scratchReg, failure);

        CacheIR::releaseReg(scratchReg);
    }

    op GuardIsProxy(objectId: ObjectId) {
        let objectReg = CacheIR::useObjectId(objectId);
        let scratchReg = CacheIR::allocateReg();
        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestObjectIsProxy(false, objectReg, scratchReg, failure);

        CacheIR::releaseReg(scratchReg);
    }

    op GuardInt32IsNonNegative(indexId: Int32Id) {
        let indexReg = CacheIR::useInt32Id(indexId);
        CacheIR::addFailurePath(out label failure);
        emit MASM::Branch32Imm(Condition::LessThan, indexReg, 0_i32, failure);
    }

    op IsObjectResult(inputId: ValueId) {
        let scratchReg = CacheIR::allocateReg();
        let valueReg = CacheIR::useValueId(inputId);

        emit MASM::TestObjectSet(Condition::Equal, valueReg, scratchReg);
        emit MASM::TagValue(ValueType::Bool, scratchReg, CacheIR::outputReg);

        CacheIR::releaseReg(scratchReg);
    }

    op GuardNonDoubleType(valueId: ValueId, type: ValueType) {
        let valueReg = CacheIR::useValueId(valueId);

        CacheIR::addFailurePath(out label failure);

        if type == ValueType::String {
            emit MASM::BranchTestString(Condition::NotEqual, valueReg, failure);
        } else if type == ValueType::Symbol {
            emit MASM::BranchTestSymbol(Condition::NotEqual, valueReg, failure);
        } else if type == ValueType::BigInt {
            emit MASM::BranchTestBigInt(Condition::NotEqual, valueReg, failure);
        } else if type == ValueType::Bool {
            emit MASM::BranchTestBoolean(Condition::NotEqual, valueReg, failure);
        } else if type == ValueType::Undefined {
            emit MASM::BranchTestUndefined(Condition::NotEqual, valueReg, failure);
        } else if type == ValueType::Null {
            emit MASM::BranchTestNull(Condition::NotEqual, valueReg, failure);
        } else {
            assert false;
        }
    }

    op GuardClass(objId: ObjectId, kind: GuardClassKind) {
        let objReg = CacheIR::useObjectId(objId);
        let scratchReg = CacheIR::allocateReg();
    
        CacheIR::addFailurePath(out label failure);

        if kind == GuardClassKind::JSFunction {
            if CacheIR::objectGuardNeedsSpectreMitigations(objId) {
                emit MASM::BranchTestObjIsFunction(Condition::NotEqual, objReg, scratchReg, objReg,
                                                    failure);
            } else {
                emit MASM::BranchTestObjIsFunctionNoSpectreMitigations(Condition::NotEqual, objReg,
                                                                        scratchReg, failure);
            }

            return;
        }

        let class = ArrayObject::class();

        if kind == GuardClassKind::Array {
            class = ArrayObject::class();
        } else if kind == GuardClassKind::PlainObject {
            class = PlainObject::class();
        } else if kind == GuardClassKind::ArrayBuffer {
            class = ArrayBufferObject::class();
        } else if kind == GuardClassKind::SharedArrayBuffer {
            class = SharedArrayBufferObject::class();
        } else if kind == GuardClassKind::DataView {
            class = DataViewObject::class();
        } else if kind == GuardClassKind::MappedArguments {
            class = MappedArgumentsObject::class();
        } else if kind == GuardClassKind::UnmappedArguments {
            class = UnmappedArgumentsObject::class();
        } else if kind == GuardClassKind::WindowProxy {
            class = Class::windowProxyClass();
        } else if kind == GuardClassKind::Set {
            class = SetObject::class();
        } else if kind == GuardClassKind::Map {
            class = MapObject::class();
        } else if kind == GuardClassKind::JSFunction {
            assert false; // this case was handled before
        }

        if CacheIR::objectGuardNeedsSpectreMitigations(objId) {
            emit MASM::BranchTestObjectClass(Condition::NotEqual, objReg, class, scratchReg, objReg,
                    failure);
        } else {
            emit MASM::BranchTestObjectClassNoSpectreMitigations(Condition::NotEqual, objReg, class,
                    scratchReg, failure);
        }

        CacheIR::releaseReg(scratchReg);
    }

    op GuardBooleanToInt32(valueId: ValueId, int32Id: Int32Id) {
        let int32Reg = CacheIR::defineInt32Id(int32Id);
        let valueReg = CacheIR::useValueId(valueId);

        CacheIR::addFailurePath(out label failure);
        emit MASM::FallibleUnboxBoolean(valueReg, int32Reg, failure);
        emit MASM::CastBoolToInt32(int32Reg);
    }

    op GuardToObject(valueId: ValueId) {
        let valueReg = CacheIR::useValueId(valueId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestObject(Condition::NotEqual, valueReg, failure);
    }

    op GuardShape(objectId: ObjectId, shapeField: ShapeField) {
      let objectReg = CacheIR::useObjectId(objectId);
      let shape = CacheIR::readShapeField(shapeField);

      CacheIR::addFailurePath(out label failure);

      let needsSpectreMitigations = CacheIR::objectGuardNeedsSpectreMitigations(objectId);

      if needsSpectreMitigations {
        let scratchReg = CacheIR::allocateReg();
        emit MASM::BranchTestObjectShape(
            Condition::NotEqual, objectReg, shape, scratchReg, objectReg, failure
            );
        CacheIR::releaseReg(scratchReg);
      } else {
        emit MASM::BranchTestObjectShapeNoSpectreMitigations(
            Condition::NotEqual, objectReg, shape, failure
            );
      }
    }

    op GuardAnyClass(objectId: ObjectId, classField: ClassField) {
        let objectReg = CacheIR::useObjectId(objectId);
        let scratchReg = CacheIR::allocateReg();
        let class = CacheIR::readClassField(classField);

        CacheIR::addFailurePath(out label failure);

        let needsSpectreMitigations = CacheIR::objectGuardNeedsSpectreMitigations(objectId);

        if needsSpectreMitigations {
            emit MASM::BranchTestObjectClass(
                Condition::NotEqual, objectReg, class, scratchReg, objectReg, failure
            );
        } else {
            emit MASM::BranchTestObjectClassNoSpectreMitigations(
                Condition::NotEqual, objectReg, class, scratchReg, failure
            );
        }

        CacheIR::releaseReg(scratchReg);
    }

    op GuardFixedSlotValue(objId: ObjectId,
                           offsetOffset: Int32Field,
                           valOffset: ValueField) {
        let obj = CacheIR::useObjectId(objId);
        let offset = CacheIR::allocateReg();
        let scratchVal = CacheIR::allocateValueReg();

        CacheIR::addFailurePath(out label failure);

        CacheIR::emitLoadInt32StubField(offsetOffset, offset);
        CacheIR::emitLoadValueStubField(valOffset, scratchVal);

        let slotVal = BaseIndex::new(obj, offset, Scale::TimesOne, 0_u32);
        emit MASM::BranchTestValue(
            Condition::NotEqual, slotVal, scratchVal, failure
        );

        CacheIR::releaseReg(offset);
        CacheIR::releaseValueReg(scratchVal);
    }

    op GuardDynamicSlotValue(objId: ObjectId,
                           offsetOffset: Int32Field,
                           valOffset: ValueField) {
        let obj = CacheIR::useObjectId(objId);
        let objSlots = CacheIR::allocateReg();
        let offset = CacheIR::allocateReg();
        let scratchVal = CacheIR::allocateValueReg();

        CacheIR::addFailurePath(out label failure);

        let objOffsetAddr = Address::new(obj, NativeObject::offsetOfSlots as Int32);
        emit MASM::LoadPtrAddress(objOffsetAddr, objSlots);

        CacheIR::emitLoadInt32StubField(offsetOffset, offset);
        CacheIR::emitLoadValueStubField(valOffset, scratchVal);

        let slotVal = BaseIndex::new(objSlots, offset, Scale::TimesOne, 0_u32);
        emit MASM::BranchTestValue(
            Condition::NotEqual, slotVal, scratchVal, failure
        );

        CacheIR::releaseReg(objSlots);
        CacheIR::releaseReg(offset);
        CacheIR::releaseValueReg(scratchVal);
    }

    op GuardToString(valueId: ValueId) {
        let valueReg = CacheIR::useValueId(valueId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestString(Condition::NotEqual, valueReg, failure);
    }

    op GuardToSymbol(valueId: ValueId) {
        let valueReg = CacheIR::useValueId(valueId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestSymbol(Condition::NotEqual, valueReg, failure);
    }

    op GuardToInt32(valueId: ValueId) {
        let valueReg = CacheIR::useValueId(valueId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestInt32(Condition::NotEqual, valueReg, failure);
    }

    op GuardToBoolean(valueId: ValueId) {
        let valueReg = CacheIR::useValueId(valueId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestBoolean(Condition::NotEqual, valueReg, failure);
    }

    op GuardToBigInt(valueId: ValueId) {
        let valueReg = CacheIR::useValueId(valueId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestBigInt(Condition::NotEqual, valueReg, failure);
    }

    op GuardNoDenseElements(objectId: ObjectId) {
        let objectReg = CacheIR::useObjectId(objectId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::LoadPtrAddress(
            Address::new(objectReg, NativeObject::offsetOfElements as Int32), scratchReg
        );

        let initLength = Address::new(scratchReg, NativeObjectElements::offsetOfInitializedLength as Int32);

        emit MASM::Branch32AddressImm32(Condition::NotEqual, initLength, 0_i32, failure);

        CacheIR::releaseReg(scratchReg);
    }

    op BooleanToNumber(boolId: BoolId, numberId: NumberId) {
        let boolReg = CacheIR::useBoolId(boolId);
        let numberReg = CacheIR::useNumberId(numberId);

        emit MASM::CastBoolToInt32(boolReg);
        emit MASM::TagValue(ValueType::Int32, boolReg, numberReg);
    }

    op LoadObject(resultId: ObjectId, objField: ObjectField) {
        let resultReg = CacheIR::defineObjectReg(resultId);
        CacheIR::emitLoadObjectStubField(objField, resultReg);
    }

    op LoadProto(objectId: ObjectId, resultId: ObjectId) {
        let objectReg = CacheIR::useObjectId(objectId);
        let resultReg = CacheIR::defineObjectReg(resultId);

        emit MASM::LoadObjectProto(objectReg, resultReg);
        emit MASM::UnboxObjectProto(resultReg, resultReg);
    }

    op LoadFixedSlotResult(objectId: ObjectId, slotField: Int32Field) {
        let objectReg = CacheIR::useObjectId(objectId);
        let slotOffset = CacheIR::readInt32Field(slotField);

        // Note: this uses TypedOrValueRegister but assuming here
        // that CacheIR::outputReg is always a Value
        emit MASM::LoadValueAddress(Address::new(objectReg, slotOffset), CacheIR::outputReg);
    }

    op LoadDynamicSlotResult(objectId: ObjectId, slotField: Int32Field) {
        let objectReg = CacheIR::useObjectId(objectId);
        let slotOffset = CacheIR::readInt32Field(slotField);

        let scratchReg = CacheIR::allocateReg();
        emit MASM::LoadPtrAddress(
            Address::new(objectReg, NativeObject::offsetOfSlots as Int32), scratchReg
        );
        // Note: this uses TypedOrValueRegister but assuming here
        // that CacheIR::outputReg is always a Value
        emit MASM::LoadValueAddress(
            Address::new(scratchReg, slotOffset), CacheIR::outputReg
        );

        CacheIR::releaseReg(scratchReg);
    }

    op LoadInt32ArrayLengthResult(objectId: ObjectId) {
        let objectReg = CacheIR::useObjectId(objectId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::LoadPtrAddress(
            Address::new(objectReg, NativeObject::offsetOfElements as Int32), scratchReg
        );
        emit MASM::Load32Address(
            Address::new(scratchReg, NativeObjectElements::offsetOfLength), scratchReg
        );

        emit MASM::BranchTest32(Condition::Signed, scratchReg, scratchReg, failure);
        emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

        CacheIR::releaseReg(scratchReg);
    }

    op LoadArgumentsObjectLengthResult(objectId: ObjectId) {
        let objectReg = CacheIR::useObjectId(objectId);
        let argObjLengthReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::LoadArgumentsObjectLength(objectReg, argObjLengthReg, failure);
        emit MASM::TagValue(ValueType::Int32, argObjLengthReg, CacheIR::outputReg);

        CacheIR::releaseReg(argObjLengthReg);
    }

    op LoadInstanceOfObjectResult(lhsId: ValueId, protoId: ObjectId) {
        let lhsReg = CacheIR::useValueId(lhsId);
        let protoReg = CacheIR::useObjectId(protoId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        label returnFalse: MASM;
        label returnTrue: MASM;
        label done: MASM;

        emit MASM::FallibleUnboxObject(lhsReg, scratchReg, failure);
        emit MASM::LoadObjectProto(scratchReg, scratchReg);

        label loopHead: MASM;
        bind loopHead;

        emit MASM::BranchTestNullProto(scratchReg, returnFalse);
        emit MASM::BranchTestLazyProto(scratchReg, failure);
        emit MASM::UnboxObjectProto(scratchReg, scratchReg);
        emit MASM::BranchObject(Condition::Equal, scratchReg, protoReg, returnTrue);

        emit MASM::LoadObjectProto(scratchReg, scratchReg);
        //emit MASM::StoreBool(true, protoReg); <-- uncomment to induce error
        emit MASM::Jump(loopHead);

        bind returnFalse;
        emit MASM::StoreBoolValue(false, CacheIR::outputReg);
        emit MASM::Jump(done);

        bind returnTrue;
        emit MASM::StoreBoolValue(true, CacheIR::outputReg);

        bind done;

        CacheIR::releaseReg(scratchReg);
    }

    op LoadStringResult(stringId: StringId) {
        let stringReg = CacheIR::useStringId(stringId);
        emit MASM::TagValue(ValueType::String, stringReg, CacheIR::outputReg);
    }

    op LoadSymbolResult(symbolId: SymbolId) {
        let symbolReg = CacheIR::useSymbolId(symbolId);
        emit MASM::TagValue(ValueType::Symbol, symbolReg, CacheIR::outputReg);
    }

    op LoadInt32Result(int32Id: Int32Id) {
        let int32Reg = CacheIR::useInt32Id(int32Id);
        emit MASM::TagValue(ValueType::Int32, int32Reg, CacheIR::outputReg);
    }

    op LoadBooleanResult(bool: Bool) {
        let value = Value::fromBool(bool);
        emit MASM::MoveValueImm(value, CacheIR::outputReg);
    }

    op LoadUndefinedResult() {
        let value = Value::getUndefined();
        emit MASM::MoveValueImm(value, CacheIR::outputReg);
    }

    op LoadBigIntResult(bigIntId: BigIntId) {
        let bigIntReg = CacheIR::useBigIntId(bigIntId);
        emit MASM::TagValue(ValueType::BigInt, bigIntReg, CacheIR::outputReg);
    }

    op LoadDoubleResult(numberId: NumberId) {
        let numberReg = CacheIR::useNumberId(numberId);

        // ifdef DEBUG
        // label ok: MASM;
        // emit MASM::BranchTestDouble(Condition::Equal, numberReg, ok);
        // emit MASM::BranchTestInt32(Condition::Equal, numberReg, ok);
        // emit MASM::AssumeUnreachable();
        // bind ok;
        // endif

        emit MASM::MoveValue(numberReg, CacheIR::outputReg);
        emit MASM::ConvertInt32ValueToDouble(CacheIR::outputReg);
    }

    op LoadInt32Constant(valField: Int32Field, resultId: Int32Id) {
        let resultReg = CacheIR::defineInt32Id(resultId);

        CacheIR::emitLoadInt32StubField(valField, resultReg);
    }

    op LoadInt32TruthyResult(inputId: ValueId) {
        let valueReg = CacheIR::useValueId(inputId);

        label ifFalse: MASM;
        label done: MASM;
        emit MASM::BranchTestInt32Truthy(false, valueReg, ifFalse);
        emit MASM::MoveValueImm(Value::fromBool(true), CacheIR::outputReg);
        emit MASM::Jump(done);

        bind ifFalse;
        emit MASM::MoveValueImm(Value::fromBool(false), CacheIR::outputReg);

        bind done;
    }

    op Int32AddResult(lhsId: Int32Id, rhsId: Int32Id) {
      let lhsReg = CacheIR::useInt32Id(lhsId);
      let rhsReg = CacheIR::useInt32Id(rhsId);
      let scratchReg = CacheIR::allocateReg();

      CacheIR::addFailurePath(out label failure);

      emit MASM::Mov(rhsReg, scratchReg);
      emit MASM::BranchAdd32(Condition::Overflow, lhsReg, scratchReg, failure);
      emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

      CacheIR::releaseReg(scratchReg);
    }

    op Int32SubResult(lhsId: Int32Id, rhsId: Int32Id) {
      let lhsReg = CacheIR::useInt32Id(lhsId);
      let rhsReg = CacheIR::useInt32Id(rhsId);
      let scratchReg = CacheIR::allocateReg();

      CacheIR::addFailurePath(out label failure);

      emit MASM::Mov(lhsReg, scratchReg);
      emit MASM::BranchSub32(Condition::Overflow, rhsReg, scratchReg, failure);
      emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

      CacheIR::releaseReg(scratchReg);
    }

    op Int32MulResult(lhsId: Int32Id, rhsId: Int32Id) {
      let lhsReg = CacheIR::useInt32Id(lhsId);
      let rhsReg = CacheIR::useInt32Id(rhsId);

      let scratchReg = CacheIR::allocateReg();
      let scratch2Reg = CacheIR::allocateReg();

      CacheIR::addFailurePath(out label failure);

      label maybeNegZero: MASM;
      label done: MASM;

      emit MASM::Mov(lhsReg, scratchReg);
      emit MASM::BranchMul32(Condition::Overflow, rhsReg, scratchReg, failure);
      emit MASM::BranchTest32(Condition::Zero, scratchReg, scratchReg, maybeNegZero);
      emit MASM::Jump(done);

      bind maybeNegZero;
      emit MASM::Mov(lhsReg, scratch2Reg);
      emit MASM::Or32(rhsReg, scratch2Reg);
      emit MASM::BranchTest32(Condition::Signed, scratch2Reg, scratch2Reg, failure);

      bind done;
      emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

      CacheIR::releaseReg(scratchReg);
    }

    op Int32DivResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Id(lhsId);
        let rhsReg = CacheIR::useInt32Id(rhsId);

        let remReg = CacheIR::allocateReg();
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        // prevent division by 0.
        emit MASM::BranchTest32(Condition::Zero, rhsReg, rhsReg, failure);

        // prevent -2147483648 / -1.
        label notOverflow: MASM;
        emit MASM::Branch32Imm(Condition::NotEqual, lhsReg, -2147483647_i32 - 1_i32, notOverflow);
        emit MASM::Branch32Imm(Condition::Equal, rhsReg, -1_i32, failure);
        bind notOverflow;

        // prevent negative 0.
        label notZero: MASM;
        emit MASM::BranchTest32(Condition::NonZero, lhsReg, lhsReg, notZero);
        emit MASM::BranchTest32(Condition::Signed, rhsReg, rhsReg, failure);
        bind notZero;

        emit MASM::Mov(lhsReg, scratchReg);
        // TODO(abhishekc-sharma): volatile registers
        emit MASM::FlexibleDivMod32(rhsReg, scratchReg, remReg);

        // A remainder implies a double result.
        emit MASM::BranchTest32(Condition::NonZero, remReg, remReg, failure);

        emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

        CacheIR::releaseReg(remReg);
        CacheIR::releaseReg(scratchReg);
    }

    op Int32ModResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Id(lhsId);
        let rhsReg = CacheIR::useInt32Id(rhsId);

        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        // x % 0 results in NaN.
        emit MASM::BranchTest32(Condition::Zero, rhsReg, rhsReg, failure);

        // Prevent -2147483648 % -1.
        label notOverflow: MASM;
        emit MASM::Branch32Imm(Condition::NotEqual, lhsReg, -2147483647_i32 - 1_i32, notOverflow);
        emit MASM::Branch32Imm(Condition::Equal, rhsReg, -1_i32, failure);
        bind notOverflow;

        emit MASM::Mov(lhsReg, scratchReg);
        // TODO(abhishekc-sharma): volatile registers
        emit MASM::FlexibleRemainder32(rhsReg, scratchReg);

        // Modulo takes the sign of the dividend; we can't return negative zero here.
        label notZero: MASM;
        emit MASM::BranchTest32(Condition::NonZero, scratchReg, scratchReg, notZero);
        emit MASM::BranchTest32(Condition::Signed, lhsReg, lhsReg, failure);
        bind notZero;

        emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

        CacheIR::releaseReg(scratchReg); 
    }

    op Int32BitOrResult(lhsId: Int32Id, rhsId: Int32Id) {
      let lhsReg = CacheIR::useInt32Id(lhsId);
      let rhsReg = CacheIR::useInt32Id(rhsId);

      let scratchReg = CacheIR::allocateReg();
      emit MASM::Mov(rhsReg, scratchReg);
      emit MASM::Or32(lhsReg, scratchReg);
      emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

      CacheIR::releaseReg(scratchReg);
    }

    op Int32BitXorResult(lhsId: Int32Id, rhsId: Int32Id) {
      let lhsReg = CacheIR::useInt32Id(lhsId);
      let rhsReg = CacheIR::useInt32Id(rhsId);

      let scratchReg = CacheIR::allocateReg();
      emit MASM::Mov(rhsReg, scratchReg);
      emit MASM::Xor32(lhsReg, scratchReg);
      emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

      CacheIR::releaseReg(scratchReg);
    }

    op Int32BitAndResult(lhsId: Int32Id, rhsId: Int32Id) {
      let lhsReg = CacheIR::useInt32Id(lhsId);
      let rhsReg = CacheIR::useInt32Id(rhsId);

      let scratchReg = CacheIR::allocateReg();
      emit MASM::Mov(rhsReg, scratchReg);
      emit MASM::And32(lhsReg, scratchReg);
      emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

      CacheIR::releaseReg(scratchReg);
    }

    op Int32LeftShiftResult(lhsId: Int32Id, rhsId: Int32Id) {
      let lhsReg = CacheIR::useInt32Id(lhsId);
      let rhsReg = CacheIR::useInt32Id(rhsId);

      let scratchReg = CacheIR::allocateReg();
      emit MASM::Mov(lhsReg, scratchReg);
      emit MASM::FlexibleLshift32(rhsReg, scratchReg);
      emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

      CacheIR::releaseReg(scratchReg);
    }

    op Int32RightShiftResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Id(lhsId);
        let rhsReg = CacheIR::useInt32Id(rhsId);

        let scratchReg = CacheIR::allocateReg();
        emit MASM::Mov(lhsReg, scratchReg);
        emit MASM::FlexibleRshift32Arithmetic(rhsReg, scratchReg);
        emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

        CacheIR::releaseReg(scratchReg);
    }

    // TODO(abhishekc-sharma): handle forceDouble.
    op Int32URightShiftResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Id(lhsId);
        let rhsReg = CacheIR::useInt32Id(rhsId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);
    
        emit MASM::Mov(lhsReg, scratchReg);
        emit MASM::FlexibleRshift32(rhsReg, scratchReg);
        emit MASM::BranchTest32(Condition::Signed, scratchReg, scratchReg, failure);
        emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

        CacheIR::releaseReg(scratchReg);
    }

    op Int32NegationResult(inputId: Int32Id) {
      let inputReg = CacheIR::useInt32Id(inputId);
      let scratchReg = CacheIR::allocateReg();

      CacheIR::addFailurePath(out label failure);

      emit MASM::BranchTest32Imm(Condition::Zero, inputReg, 0_i32, failure);
      emit MASM::Mov(inputReg, scratchReg);
      emit MASM::Neg32(scratchReg);
      emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

      CacheIR::releaseReg(scratchReg);
    }

    op Int32IncResult(inputId: Int32Id) {
        let inputReg = CacheIR::useInt32Id(inputId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::Mov(inputReg, scratchReg);
        emit MASM::BranchAdd32Imm(Condition::Overflow, 1_i32, scratchReg, failure);
        emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

        CacheIR::releaseReg(scratchReg);
    }

    op Int32DecResult(inputId: Int32Id) {
        let inputReg = CacheIR::useInt32Id(inputId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::Mov(inputReg, scratchReg);
        emit MASM::BranchAdd32Imm(Condition::Overflow, 1_i32, scratchReg, failure);
        emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

        CacheIR::releaseReg(scratchReg);
    }

    op Int32NotResult(inputId: Int32Id) {
        let inputReg = CacheIR::useInt32Id(inputId);
        let scratchReg = CacheIR::allocateReg();

        emit MASM::Mov(inputReg, scratchReg);
        emit MASM::Not32(scratchReg);
        emit MASM::TagValue(ValueType::Int32, scratchReg, CacheIR::outputReg);

        CacheIR::releaseReg(scratchReg);
    }

    op Int32MinMax(isMax: Bool, firstId: Int32Id, secondId: Int32Id, resultId: Int32Id) {
        let firstReg = CacheIR::useInt32Id(firstId);
        let secondReg = CacheIR::useInt32Id(secondId);
        let resultReg = CacheIR::defineInt32Id(resultId);

        emit MASM::Mov(firstReg, resultReg);
        if isMax {
            emit MASM::Cmp32Move32(Condition::GreaterThan, secondReg,
                firstReg, secondReg, resultReg);
        } else {
            emit MASM::Cmp32Move32(Condition::LessThan, secondReg,
                firstReg, secondReg, resultReg);
        }
    }

    fn addFailurePath(out label failure: MASM);

    fn allocateReg() -> Reg;
    fn allocateKnownReg(reg: Reg);
    fn releaseReg(reg: Reg);

    fn allocateValueReg() -> ValueReg;
    fn releaseValueReg(valueReg: ValueReg);

    fn defineTypedId(typedId: TypedId) -> Reg;
    fn defineValueId(valueId: ValueId) -> ValueReg;

    #[refined]
    fn defineObjectId(id: ObjectId) -> Reg {
        let typedId = TypedId::fromObjectId(id);
        CacheIR::defineTypedId(typedId)
    }

    #[refined]
    fn defineInt32Id(id: Int32Id) -> Reg {
        let typedId = TypedId::fromInt32Id(id);
        CacheIR::defineTypedId(typedId)
    }

    #[refined]
    fn defineNumberId(id: NumberId) -> ValueReg {
        let valueId = id as ValueId;
        CacheIR::defineValueId(valueId)
    }
        
    #[refined]
    fn defineBoolId(id: BoolId) -> Reg {
        let typedId = TypedId::fromBoolId(id);
        CacheIR::defineTypedId(typedId)
    }

    #[refined]
    fn defineStringId(id: StringId) -> Reg {
        let typedId = TypedId::fromStringId(id);
        CacheIR::defineTypedId(typedId)
    }

    #[refined]
    fn defineSymbolId(id: SymbolId) -> Reg {
        let typedId = TypedId::fromSymbolId(id);
        CacheIR::defineTypedId(typedId)
    }
    
    #[refined]
    fn defineBigIntId(id: BigIntId) -> Reg {
        let typedId = TypedId::fromBigIntId(id);
        CacheIR::defineTypedId(typedId)
    }

    fn getOperandLocation(id: OperandId) -> OperandLocation;
    fn setOperandLocation(id: OperandId, loc: OperandLocation);

    #[refined]
    fn useTypedId(id: TypedId) emits MASM -> Reg {
        let operandId = id as OperandId; 
        let location = CacheIR::getOperandLocation(operandId);
        let locationKind = OperandLocation::kind(location);

        if locationKind == OperandLocationKind::PayloadReg {
            return OperandLocation::getPayloadReg(location);
        } else if locationKind == OperandLocationKind::ValueReg {
            let valueReg = OperandLocation::getValueReg(location);
            CacheIR::releaseValueReg(valueReg);
            let reg = ValueReg::scratchReg(valueReg);
            CacheIR::allocateKnownReg(reg);
            emit MASM::UnboxNonDouble(valueReg, reg, TypedId::type(id));
            OperandLocation::setPayloadReg(out location, reg, TypedId::type(id));
            CacheIR::setOperandLocation(operandId, location);
            return reg;
        } else {
            assert false;
        }
        return OperandLocation::getPayloadReg(location);
    }

    #[refined]
    fn useValueId(valueId: ValueId) emits MASM -> ValueReg {
        let operandId = valueId as OperandId; 
        let location = CacheIR::getOperandLocation(operandId);
        let locationKind = OperandLocation::kind(location);

        if locationKind == OperandLocationKind::ValueReg {
            return OperandLocation::getValueReg(location);
        } else if locationKind == OperandLocationKind::PayloadReg {
            let reg = OperandLocation::getPayloadReg(location);
            let valTy = OperandLocation::getPayloadType(location);
            let valueReg = CacheIR::allocateValueReg();
            emit MASM::TagValue(valTy, reg, valueReg);
            OperandLocation::setValueReg(out location, valueReg);
            CacheIR::releaseReg(reg);
            return valueReg;
        } else {
            assert false;
        }
        return OperandLocation::getValueReg(location);
    }

    #[refined]
    fn useObjectId(id: ObjectId) emits MASM -> Reg {
        let typedId = TypedId::fromObjectId(id);
        CacheIR::useTypedId(typedId)
    }

    #[refined]
    fn useInt32Id(id: Int32Id) emits MASM -> Reg {
        let typedId = TypedId::fromInt32Id(id);
        CacheIR::useTypedId(typedId)
    }

    #[refined]
    fn useNumberId(id: NumberId) emits MASM -> ValueReg {
        let valueId = id as ValueId;
        CacheIR::useValueId(valueId)
    }

    #[refined]
    fn useBoolId(id: BoolId) emits MASM -> Reg {
        let typedId = TypedId::fromBoolId(id);
        CacheIR::useTypedId(typedId)
    }

    #[refined]
    fn useStringId(id: StringId) emits MASM -> Reg {
        let typedId = TypedId::fromStringId(id);
        CacheIR::useTypedId(typedId)
    }

    #[refined]
    fn useSymbolId(id: SymbolId) emits MASM -> Reg {
        let typedId = TypedId::fromSymbolId(id);
        CacheIR::useTypedId(typedId)
    }

    #[refined]
    fn useBigIntId(id: BigIntId) emits MASM -> Reg {
        let typedId = TypedId::fromBigIntId(id);
        CacheIR::useTypedId(typedId)
    }

    var outputReg: ValueReg;

    #[refined]
    fn emitLoadInt32StubField(int32Field: Int32Field, dstReg: Reg) emits MASM {
       emit MASM::Move32Imm32(CacheIR::readInt32Field(int32Field), dstReg);
    }

    #[refined]
    fn emitLoadValueStubField(valueField: ValueField, dstReg: ValueReg) emits MASM {
       emit MASM::MoveValueImm(CacheIR::readValueField(valueField), dstReg);
    }

    #[refined]
    fn emitLoadObjectStubField(objectField: ObjectField, dstReg: Reg) emits MASM {
        emit MASM::MovePtrImmGCPtrObject(CacheIR::readObjectField(objectField), dstReg);
    }

    fn readValueField(valueField: ValueField) -> Value;
    fn readObjectField(objectField: ObjectField) -> Object;
    fn readInt32Field(int32Field: Int32Field) -> Int32;
    fn readShapeField(shapeField: ShapeField) -> Shape;
    fn readClassField(classField: ClassField) -> Class;
    fn readInt64Field(int64Field: Int64Field) -> Int64;
    fn readValueField(valueField: ValueField) -> Value;

    fn objectGuardNeedsSpectreMitigations(objectId: ObjectId) -> Bool;
}



//spec struct RegAllocState;

//impl CacheIR {
    //spec var mut regAllocState: RegAllocState;

    //spec var mut allocatedRegs: Set<Reg>;
    //spec var mut allocatedValueRegs: Set<ValueReg>;

    //#[reads(CacheIR::regAllocState)]
    //#[writes(CacheIR::regAllocState)]
    //fn allocateReg() -> Reg;

    //refine fn allocateReg() -> Reg {
        //let reg = raw CacheIR::allocateReg();
        //assume !Set::contains(CacheIR::allocatedRegs, reg);
        //CacheIR::allocatedRegs = Set::add(CacheIR::allocatedRegs, reg);
        //reg
    //}

    //#[writes(CacheIR::regAllocState)]
    //fn releaseReg(reg: Reg);

    //refine fn releaseReg(reg: Reg) {
        //raw CacheIR::releaseReg(reg);
        //CacheIR::allocatedRegs = Set::remove(CacheIR::allocatedRegs, reg);
    //}

    //#[reads(CacheIR::regAllocState)]
    //#[writes(CacheIR::regAllocState)]
    //fn allocateValueReg() -> ValueReg;

    //refine fn allocateValueReg() -> ValueReg {
        //let valueReg = raw CacheIR::allocateValueReg();
        //assume !Set::contains(CacheIR::allocatedValueRegs, valueReg);
        //CacheIR::allocatedValueRegs = Set::add(CacheIR::allocatedValueRegs, valueReg);
        //valueReg
    //}

    //#[writes(CacheIR::regAllocState)]
    //fn releaseValueReg(valueReg: ValueReg);

    //refine fn releaseValueReg(valueReg: ValueReg) {
        //raw CacheIR::releaseValueReg(valueReg);
        //CacheIR::allocatedValueRegs = Set::remove(CacheIR::allocatedValueRegs, valueReg);
    //}
//}

// interpreter version:
//ir CacheIR {
    //op LoadInstanceOfObjectResult(lhsId: ValueId, protoId: ObjectId) {
        //CacheIR::getFailurePath(out label failure);

        //let lhs = CacheIR::getValue(lhsId);
        //let proto = CacheIR::getObject(protoId);

        //if !Value::isObject(lhs) {
            //goto failure;
        //}
        //let mut currentObject = Value::toObject(lhs);
        //let mut currentProto = Object::getProto(currentObject);

        //loop {
            //if Value::isNull(currentProto) {
                //CacheIR::setOutput(Value::fromBool(false));
                //return;
            //}
            //if Value::isMagic(currentProto) {
                //goto failure;
            //}

            //if !Value::isObject(currentProto) {
                //CacheIR::setOutput(Value::fromBool(false));
                //return;
            //}
            //currentObject = Value::toObject(currentProto);
            //if currentObject == proto {
                //CacheIR::setOutput(Value::fromBool(true));
                //return;
            //}

            //currentProto = Object::getProto(currentObject);
        //}
    //}
//}
