import "../cacheir.cachet"
import "../utils.cachet"

ir CacheStub emits CacheIR {
    op Add(
        lhsValueId: ValueId,
        rhsValueId: ValueId,
    ) {
        initRegState();
        addAvailableReg(Reg::Rcx);
        addAvailableFloatReg(FloatReg::Xmm0);
        addAvailableFloatReg(FloatReg::Xmm1);

        initValueInput(lhsValueId, ValueReg::fromReg(Reg::Rax));
        initValueInput(rhsValueId, ValueReg::fromReg(Reg::Rdx));
        assume CacheIR::outputReg == ValueReg::fromReg(Reg::Rcx);

        emit CacheIR::GuardToInt32(lhsValueId);
        let lhsInt32Id = ValueId::toInt32Id(lhsValueId);
        emit CacheIR::GuardToInt32(rhsValueId);
        let rhsInt32Id = ValueId::toInt32Id(rhsValueId);
        emit CacheIR::Int32AddResult(lhsInt32Id, rhsInt32Id);
    }
}
