import "../cacheir.cachet";
import "../utils.cachet";

ir CacheStub emits CacheIR {
    op GetProp(
        objId: ValueId,
        strId: ValueId,
        atomField: StringField,
        shapeField: ShapeField,
        offsetField: Int32Field,
    ) {
        initRegState();

        initOperandId(objId);
        initInputValueId(objId);

        initOperandId(strId);
        initInputValueId(strId);

        initValueOutput();

        let string = CacheIR::readStringField(atomField);
        assume String::isAtom(string);

        let shape = CacheIR::readShapeField(shapeField);
        assume Shape::hasFixedSlot(shape, 0_u32);

        let baseShape = Shape::baseShapeOf(shape);
        assume Class::isNativeObject(BaseShape::classOf(baseShape));
        assume TaggedProto::isObject(BaseShape::protoOf(baseShape));

        assume CacheIR::readInt32Field(offsetField) == 24_i32;

        emit CacheIR::GuardToObject(objId);
        emit CacheIR::GuardToString(strId);
        let strId = OperandId::toStringId(strId);
        emit CacheIR::GuardSpecificAtom(strId, atomField);
        let objId = OperandId::toObjectId(objId);
        emit CacheIR::GuardShape(objId, shapeField);
        emit CacheIR::LoadFixedSlotResult(objId, offsetField);
    }
}
