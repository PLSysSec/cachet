import "../cacheir.cachet";
import "../utils.cachet";

ir ToPropertyKey emits CacheIR {
    op All(value: Value) {
        CacheIR::initStub();
        let valueId = CacheIR::defineInputValueId();
        CacheIR::setValueOutput();

        if Value::isInt32(value) {
            emit CacheIR::GuardToInt32(valueId);
            let int32Id = OperandId::toInt32Id(valueId);
            emit CacheIR::LoadInt32Result(int32Id);
        } else if Value::isNumber(value) {
            // We allow negative zero here because ToPropertyKey(-0.0) is 0.
            if (!Float64::equalsInt32(Value::toNumber(value))) {
                return;
            }

            let int32Id = CacheIR::newInt32Id();
            emit CacheIR::GuardToInt32Index(valueId, int32Id);
            emit CacheIR::LoadInt32Result(int32Id);
        } else if Value::isString(value) {
            emit CacheIR::GuardToString(valueId);
            let stringId = OperandId::toStringId(valueId);
            emit CacheIR::LoadStringResult(stringId);
        } else if Value::isSymbol(value) {
            emit CacheIR::GuardToSymbol(valueId);
            let symbolId = OperandId::toSymbolId(valueId);
            emit CacheIR::LoadSymbolResult(symbolId);
        }

        emit CacheIR::ReturnFromIC();
    }
}
