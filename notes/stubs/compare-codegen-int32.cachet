import "../cacheir.cachet";
import "../codegen.cachet";
import "../js.cachet";
import "../utils.cachet";

ir CompareIRGenerator emits CacheIR {
    var lhsValue: Value;
    var rhsValue: Value;
    var op_: JSOp;

    op TryAttachInt32() {
        initRegState();
        let lhsValueId = CacheIR::defineInputValueId();
        let rhsValueId = CacheIR::defineInputValueId();
        initValueOutput();

        assume CompareIRGenerator::op_ == JSOp::Eq ||
            CompareIRGenerator::op_ == JSOp::StrictEq ||
            CompareIRGenerator::op_ == JSOp::Ne ||
            CompareIRGenerator::op_ == JSOp::StrictNe ||
            CompareIRGenerator::op_ == JSOp::Lt ||
            CompareIRGenerator::op_ == JSOp::Le ||
            CompareIRGenerator::op_ == JSOp::Gt ||
            CompareIRGenerator::op_ == JSOp::Ge;

        if !canConvertToInt32ForToNumber(CompareIRGenerator::lhsValue) ||
            !canConvertToInt32ForToNumber(CompareIRGenerator::rhsValue)
        {
            return;
        }
        let lhsInt32Id = emitGuardToInt32ForToNumber(lhsValueId, CompareIRGenerator::lhsValue);
        let rhsInt32Id = emitGuardToInt32ForToNumber(rhsValueId, CompareIRGenerator::rhsValue);

        emit CacheIR::CompareInt32Result(CompareIRGenerator::op_, lhsInt32Id, rhsInt32Id);
        emit CacheIR::ReturnFromIC();
    }
}
