import "../cacheir.cachet";
import "../codegen.cachet";
import "../js.cachet";
import "../utils.cachet";

ir GetElemIRGenerator emits CacheIR {
    var value: Value;
    var keyValue: Value;

    op TryAttachNativeFixed() {
        CacheIR::initStub();
        let valueId = CacheIR::defineInputValueId();
        let keyValueId = CacheIR::defineInputValueId();
        CacheIR::setValueOutput();

        if !PropertyKey::nameOrSymbolFromValue(
            GetElemIRGenerator::keyValue, out let key, out let nameOrSymbol
        ) {
            clearPendingException();
            return;
        }

        if Value::isObject(GetElemIRGenerator::value) {
            let object = Value::toObject(GetElemIRGenerator::value);
            emit CacheIR::GuardToObject(valueId);
            let objectId = OperandId::toObjectId(valueId);

            if nameOrSymbol {
                emitIdGuard(keyValueId, GetElemIRGenerator::keyValue, key);

                let kind = canAttachNativeGetProp(object, key, out let holder, out let propInfo);
                if kind == NativeGetPropKind::Slot {
                    let nativeObject = Object::toNativeObject(object);

                    let shape = Object::shapeOf(nativeObject);
                    let shapeField = CacheIR::writeShapeField(shape);
                    emit CacheIR::GuardShape(objectId, shapeField);

                    let holder = MaybeNativeObject::toNativeObject(holder);
                    let propInfo = MaybePropertyInfo::toPropertyInfo(propInfo);
                    let slot = PropertyInfo::slot(propInfo);

                    if nativeObject == holder {
                        if NativeObject::hasFixedSlot(nativeObject, slot) {
                            let offset = NativeObject::offsetOfFixedSlot(slot);
                            let offsetField = CacheIR::writeInt32Field(offset as Int32);
                            emit CacheIR::LoadFixedSlotResult(objectId, offsetField);
                            emit CacheIR::ReturnFromIC();
                        }
                    }
                }
            }
        }
    }
}
