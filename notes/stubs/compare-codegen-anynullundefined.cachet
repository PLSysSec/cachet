import "../cacheir.cachet";
import "../codegen.cachet";
import "../js.cachet";
import "../utils.cachet";

ir CompareIRGenerator emits CacheIR {
    var lhsValue: Value;
    var rhsValue: Value;
    var op_: JSOp;

    op TryAttachAnyNullUndefined() {
        initRegState();
        let lhsValueId = CacheIR::defineInputValueId();
        let rhsValueId = CacheIR::defineInputValueId();
        initValueOutput();

        assume CompareIRGenerator::op_ == JSOp::Eq ||
            CompareIRGenerator::op_ == JSOp::StrictEq ||
            CompareIRGenerator::op_ == JSOp::Ne ||
            CompareIRGenerator::op_ == JSOp::StrictNe;

        // Either RHS or LHS needs to be null/undefined.
        if !Value::isNullOrUndefined(CompareIRGenerator::lhsValue) &&
            !Value::isNullOrUndefined(CompareIRGenerator::rhsValue)
        {
            return;
        }

        // We assume that the side with null/undefined is usually constant, in
        // code like `if (x === undefined) { x = {}; }`.
        // That is why we don't attach when both sides are undefined/null,
        // because we would basically need to decide by chance which side is
        // the likely constant.
        // The actual generated code however handles null/undefined of course.
        if Value::isNullOrUndefined(CompareIRGenerator::lhsValue) &&
            Value::isNullOrUndefined(CompareIRGenerator::rhsValue)
        {
            return;
        }

        if Value::isNullOrUndefined(CompareIRGenerator::rhsValue) {
            if Value::isNull(CompareIRGenerator::rhsValue) {
                emit CacheIR::GuardIsNull(rhsValueId);
                emit CacheIR::CompareNullUndefinedResult(CompareIRGenerator::op_, false, 
                    lhsValueId);
            } else {
                emit CacheIR::GuardIsUndefined(rhsValueId);
                emit CacheIR::CompareNullUndefinedResult(CompareIRGenerator::op_, true,
                    lhsValueId);
            }
        } else {
            if Value::isNull(CompareIRGenerator::lhsValue) {
                emit CacheIR::GuardIsNull(lhsValueId);
                emit CacheIR::CompareNullUndefinedResult(CompareIRGenerator::op_, false,
                    rhsValueId);
            } else {
                emit CacheIR::GuardIsUndefined(lhsValueId);
                emit CacheIR::CompareNullUndefinedResult(CompareIRGenerator::op_, true,
                    rhsValueId);
            }
        }

        emit CacheIR::ReturnFromIC();
    }
}
