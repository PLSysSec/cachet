import "../cacheir.cachet";
import "../codegen.cachet";
import "../js.cachet";
import "../utils.cachet";

ir BinaryArithIRGenerator emits CacheIR {
    var lhsValue: Value;
    var rhsValue: Value;
    var resValue: Value;
    var op_: JSOp;

    op TryAttachBitwise() {
        initRegState();
        let lhsValueId = CacheIR::defineInputValueId();
        let rhsValueId = CacheIR::defineInputValueId();
        initValueOutput();

        // Only bit-wise and shifts.
        if BinaryArithIRGenerator::op_ != JSOp::BitOr &&
            BinaryArithIRGenerator::op_ != JSOp::BitXor &&
            BinaryArithIRGenerator::op_ != JSOp::BitAnd &&
            BinaryArithIRGenerator::op_ != JSOp::Lsh &&
            BinaryArithIRGenerator::op_ != JSOp::Rsh &&
            BinaryArithIRGenerator::op_ != JSOp::Ursh
        {
            return;
        }

        // Check guard conditions.
        if !canTruncateToInt32(BinaryArithIRGenerator::lhsValue) ||
            !canTruncateToInt32(BinaryArithIRGenerator::rhsValue)
        {
            return;
        }
        let lhsInt32Id = emitTruncateToInt32Guard(lhsValueId, BinaryArithIRGenerator::lhsValue);
        let rhsInt32Id = emitTruncateToInt32Guard(rhsValueId, BinaryArithIRGenerator::rhsValue);

        if BinaryArithIRGenerator::op_ == JSOp::BitOr {
            emit CacheIR::Int32BitOrResult(lhsInt32Id, rhsInt32Id);
        } else if BinaryArithIRGenerator::op_ == JSOp::BitXor {
            emit CacheIR::Int32BitXorResult(lhsInt32Id, rhsInt32Id);
        } else if BinaryArithIRGenerator::op_ == JSOp::BitAnd {
            emit CacheIR::Int32BitAndResult(lhsInt32Id, rhsInt32Id);
        } else if BinaryArithIRGenerator::op_ == JSOp::Lsh {
            emit CacheIR::Int32LeftShiftResult(lhsInt32Id, rhsInt32Id);
        } else if BinaryArithIRGenerator::op_ == JSOp::Rsh {
            emit CacheIR::Int32RightShiftResult(lhsInt32Id, rhsInt32Id);
        } else if BinaryArithIRGenerator::op_ == JSOp::Ursh {
            emit CacheIR::Int32URightShiftResult(lhsInt32Id, rhsInt32Id,
                Value::isDouble(BinaryArithIRGenerator::resValue));
        } else {
            return;
        }

        emit CacheIR::ReturnFromIC();
    }
}
