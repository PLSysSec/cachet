import "cacheir.cachet";
import "js.cachet";

enum NativeGetPropKind {
    None,
    Slot,
    NativeGetter,
    ScriptedGetter,
}

fn canAttachNativeGetProp(
    object: Object, key: PropertyKey, out holder: MaybeNativeObject, out propInfo: MaybePropertyInfo
) -> NativeGetPropKind {
    assert PropertyKey::isString(key) || PropertyKey::isSymbol(key);

    if !Object::lookupPropertyPure(object, key, out holder, out let prop) {
        return NativeGetPropKind::None;
    }

    let nativeObject = Object::toNativeObject(object);

    if PropertyResult::isNativeProperty(prop) {
        propInfo = MaybePropertyInfo::fromPropertyInfo(PropertyResult::propertyInfo(prop));

        if isCacheableGetPropSlot(
            nativeObject, MaybeNativeObject::toNativeObject(holder),
            MaybePropertyInfo::toPropertyInfo(propInfo)
        ) {
            return NativeGetPropKind::Slot;
        }

        return NativeGetPropKind::None;
    }

    propInfo = MaybePropertyInfo::none();
    return NativeGetPropKind::None;
}

fn isCacheableProtoChain(object: NativeObject, holder: NativeObject) -> Bool;

fn isCacheableGetPropSlot(object: NativeObject, holder: NativeObject, prop: PropertyInfo) -> Bool {
    assert isCacheableProtoChain(object, holder);
    PropertyInfo::isDataProperty(prop)
}

fn canTruncateToInt32(value: Value) -> Bool {
    Value::isInt32(value) || //Value::isNumber(value) ||
      Value::isBool(value) ||
      Value::isNullOrUndefined(value) // ||
      //Value::isString(value)
}

fn emitTruncateToInt32Guard(valueId: ValueId, value: Value) emits CacheIR -> Int32Id {
    assert canTruncateToInt32(value);

    if Value::isInt32(value) {
        emit CacheIR::GuardToInt32(valueId);
        return OperandId::toInt32Id(valueId);
    } else if Value::isBool(value) {
        let int32Id = CacheIR::newInt32Id();
        emit CacheIR::GuardBooleanToInt32(valueId, int32Id);
        return int32Id;
    } else if Value::isNullOrUndefined(value) {
        emit CacheIR::GuardIsNullOrUndefined(valueId);

        let zeroField = CacheIR::writeInt32Field(0_i32);
        let int32Id = CacheIR::newInt32Id();
        emit CacheIR::LoadInt32Constant(zeroField, int32Id);
        return int32Id;
    } else {
//        let numberId: NumberId;
//
//        if Value::isString(value) {
//            emit CacheIR::GuardToString(valueId);
//            let stringId = OperandId::toStringId(valueId);
//
//            emit CacheIR::GuardStringToNumber(stringId);
//            numberId = OperandId::toNumberId(stringId);
//        } else {
//            assert Value::isDouble(value);
//            
//            emit CacheIR::GuardIsNumber(valueId);
//            numberId = OperandId::toNumberId(valueId);
//        }

        assert false;
        return OperandId::toInt32Id(valueId);
    }
}

fn canConvertToInt32ForToNumber(value: Value) -> Bool {
    Value::isInt32(value) || Value::isBool(value) || Value::isNull(value)
}

fn emitGuardToInt32ForToNumber(valueId: ValueId, value: Value) emits CacheIR -> Int32Id {
    if Value::isInt32(value) {
        emit CacheIR::GuardToInt32(valueId);
        return OperandId::toInt32Id(valueId);
    } else if Value::isNull(value) {
        emit CacheIR::GuardIsNull(valueId);

        let zeroField = CacheIR::writeInt32Field(0_i32);
        let int32Id = CacheIR::newInt32Id();
        emit CacheIR::LoadInt32Constant(zeroField, int32Id);
        return int32Id;
    } else {
        assert Value::isBool(value);

        let int32Id = CacheIR::newInt32Id();
        emit CacheIR::GuardBooleanToInt32(valueId, int32Id);
        return int32Id;
    }
}

fn emitIdGuard(keyValueId: ValueId, keyValue: Value, key: PropertyKey) emits CacheIR {
    if PropertyKey::isSymbol(key) {
        let symbol = PropertyKey::toSymbol(key);
        assert Value::toSymbol(keyValue) == symbol;

        emit CacheIR::GuardToSymbol(keyValueId);
        let symbolId = OperandId::toSymbolId(keyValueId);

        let symbolField = CacheIR::writeSymbolField(symbol);
        emit CacheIR::GuardSpecificSymbol(symbolId, symbolField);
    } else {
        assert PropertyKey::isString(key);

        if Value::isUndefined(keyValue) {
            assert PropertyKey::isAtom(key, AtomState::undefined);
            emit CacheIR::GuardIsUndefined(keyValueId);
        } else if Value::isNull(keyValue) {
            assert PropertyKey::isAtom(key, AtomState::null);
            emit CacheIR::GuardIsNull(keyValueId);
        } else {
            assert Value::isString(keyValue);

            emit CacheIR::GuardToString(keyValueId);
            let stringId = OperandId::toStringId(keyValueId);

            let stringField = CacheIR::writeStringField(PropertyKey::toAtom(key));
            emit CacheIR::GuardSpecificAtom(stringId, stringField);
        }
    }
}
