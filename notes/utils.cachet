import "./cacheir.cachet"
import "./masm.cachet"
import "./js.cachet"

fn initRegState();
fn addAvailableReg(reg: Reg);
fn addAvailableFloatReg(floatReg: FloatReg);

fn initInputOperandLocation(typedId: TypedId);
fn initValueInputOperandLocation(valueId: ValueId);

fn initValueReg(valueReg: ValueReg);

fn initValueInput(id: ValueId, valueReg: ValueReg) {
    initValueInputOperandLocation(id);
    let location = CacheIR::getOperandLocation(id);
    OperandLocation::setValueReg(out location, valueReg);
    CacheIR::setOperandLocation(id, location);
    initValueReg(valueReg);
}

fn initObjectInput(id: ObjectId, reg: Reg) {
    let typedId = TypedId::fromObjectId(id);
    initInputOperandLocation(typedId);
    let location = CacheIR::getOperandLocation(id);
    OperandLocation::setPayloadReg(out location, reg, ValueType::Object);
    CacheIR::setOperandLocation(id, location);
}

fn initInt32InputOperandLocation(id: Int32Id) {
    let typedId = TypedId::fromInt32Id(id);
    initInputOperandLocation(typedId);
}

fn initInt32Input(id: Int32Id, reg: Reg) {
    let typedId = TypedId::fromInt32Id(id);
    initInputOperandLocation(typedId);
    let location = CacheIR::getOperandLocation(id);
    OperandLocation::setPayloadReg(out location, reg, ValueType::Object);
    CacheIR::setOperandLocation(id, location);
}
