import "./cacheir.cachet";
import "./masm.cachet";
import "./js.cachet";

fn initOperandId(operandId: OperandId);

fn initInputValueId(valueId: ValueId);

fn initInputObjectId(objectId: ObjectId) {
    let reg = CacheIR::defineTypedId(TypedId::fromObjectId(objectId));
    let data = MASM::getData(reg);
    assume RegData::isUnboxedValue(data);
    assume Value::isObject(RegData::toUnboxedValue(data));
}

fn initInputInt32Id(int32Id: Int32Id) {
    let reg = CacheIR::defineTypedId(TypedId::fromInt32Id(int32Id));
    let data = MASM::getData(reg);
    assume RegData::isUnboxedValue(data);
    assume Value::isInt32(RegData::toUnboxedValue(data));
}

fn initInputNumberId(numberId: NumberId) {
    initInputValueId(OperandId::toValueId(numberId));
}

fn initInputBoolId(boolId: BoolId) {
    let reg = CacheIR::defineTypedId(TypedId::fromBoolId(boolId));
    let data = MASM::getData(reg);
    assume RegData::isUnboxedValue(data);
    assume Value::isBool(RegData::toUnboxedValue(data));
}

fn initInputStringId(stringId: StringId) {
    let reg = CacheIR::defineTypedId(TypedId::fromStringId(stringId));
    let data = MASM::getData(reg);
    assume RegData::isUnboxedValue(data);
    assume Value::isString(RegData::toUnboxedValue(data));
}

fn initInputSymbolId(symbolId: SymbolId) {
    let reg = CacheIR::defineTypedId(TypedId::fromSymbolId(symbolId));
    let data = MASM::getData(reg);
    assume RegData::isUnboxedValue(data);
    assume Value::isSymbol(RegData::toUnboxedValue(data));
}

fn initInputBigIntId(bigIntId: BigIntId) {
    let reg = CacheIR::defineTypedId(TypedId::fromBigIntId(bigIntId));
    let data = MASM::getData(reg);
    assume RegData::isUnboxedValue(data);
    assume Value::isBigInt(RegData::toUnboxedValue(data));
}
