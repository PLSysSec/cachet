import "./cacheir.cachet"
import "./masm.cachet"
import "./js.cachet"

fn initInputTypedIdOperandLocation(typedId: TypedId);
fn initInputValueIdOperandLocation(valueId: ValueId);

fn initValueReg(valueReg: ValueReg);

fn initInputValueId(id: ValueId) {
    initInputValueIdOperandLocation(id);
    let valueReg = CacheIR::defineValueId(id);
    initValueReg(valueReg);
}

fn initInputObjectId(id: ObjectId) {
    let typedId = TypedId::fromObjectId(id);
    initInputTypedIdOperandLocation(typedId);
    let reg = CacheIR::defineTypedId(typedId);
}

fn initInputInt32IdOperandLocation(id: Int32Id) {
    let typedId = TypedId::fromInt32Id(id);
    initInputTypedIdOperandLocation(typedId);
}

fn initInputInt32Id(id: Int32Id) {
    let typedId = TypedId::fromInt32Id(id);
    initInputTypedIdOperandLocation(typedId);
    let reg = CacheIR::defineTypedId(typedId);
}

fn initInputNumberId(id: NumberId) {
    let valueId = id as ValueId;
    initInputValueId(valueId);
    let valueReg = CacheIR::defineValueId(valueId);
}

fn initInputBoolId(id: BoolId) {
    let typedId = TypedId::fromBoolId(id);
    initInputTypedIdOperandLocation(typedId);
    let reg = CacheIR::defineTypedId(typedId);
}

fn initInputStringId(id: StringId) {
    let typedId = TypedId::fromStringId(id);
    initInputTypedIdOperandLocation(typedId);
    let reg = CacheIR::defineTypedId(typedId);
}

fn initInputSymbolId(id: SymbolId) {
    let typedId = TypedId::fromSymbolId(id);
    initInputTypedIdOperandLocation(typedId);
    let reg = CacheIR::defineTypedId(typedId);
}

fn initInputBigIntId(id: BigIntId) {
    let typedId = TypedId::fromBigIntId(id);
    initInputTypedIdOperandLocation(typedId);
    let reg = CacheIR::defineTypedId(typedId);
}
