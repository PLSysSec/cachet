// vim: set tw=99 ts=4 sts=4 sw=4 et:

struct Heap;
var mut heap: Heap;

enum ValueType {
  Double,
  Int32,
  Bool,
  Undefined,
  Null,
  Magic,
  String,
  Symbol,
  PrivateGCThing,
  BigInt,
  Object,
}

struct Value;

impl Value {
    fn typeOf(in value: Value) -> ValueType;

    // ...

    fn isInt32(in value: Value) -> Bool {
        Value::typeOf(in value) == ValueType::Int32
    }

    fn fromInt32(int32: Int32) -> Value {
        let value = (unsafe { Value::fromInt32Unchecked(int32) });
        assume Value::isInt32(in value);
        assume (unsafe { Value::toInt32Unchecked(in value) }) == int32;
        value
    }

    unsafe fn fromInt32Unchecked(int32: Int32) -> Value;

    fn toInt32(in value: Value) -> Int32 {
        assert Value::isInt32(in value);
        let int32 = (unsafe { Value::toInt32Unchecked(in value) });
        assume (unsafe { Value::fromInt32Unchecked(int32) }) == value;
        int32
    }

    unsafe fn toInt32Unchecked(in value: Value) -> Int32;

    fn isBool(in value: Value) -> Bool {
        Value::typeOf(in value) == ValueType::Bool
    }

    fn fromBool(bool: Bool) -> Value {
        let value = (unsafe { Value::fromBoolUnchecked(bool) });
        assume Value::isBool(in value);
        assume (unsafe { Value::toBoolUnchecked(in value) }) == bool;
        value
    }

    unsafe fn fromBoolUnchecked(bool: Bool) -> Value;

    fn toBool(in value: Value) -> Bool {
        assert Value::isBool(in value);
        let bool = (unsafe { Value::toBoolUnchecked(in value) });
        assume (unsafe { Value::fromBoolUnchecked(bool) }) == value;
        bool
    }

    unsafe fn toBoolUnchecked(in value: Value) -> Bool;

    fn isNull(in value: Value) -> Bool {
        Value::typeOf(in value) == ValueType::Null
    }

    fn isMagic(in value: Value) -> Bool {
        Value::typeOf(in value) == ValueType::Magic
    }

    fn isObject(in value: Value) -> Bool {
        Value::typeOf(in value) == ValueType::Object
    }

    fn fromObject(in object: Object) -> Value {
        let value = (unsafe { Value::fromObjectUnchecked(in object) });
        assume Value::isObject(in value);
        assume (unsafe { Value::toObjectUnchecked(in value) }) == object;
        value
    }

    unsafe fn fromObjectUnchecked(in object: Object) -> Value;

    fn toObject(in value: Value) -> Object {
        assert Value::isObject(in value);
        let object = (unsafe { Value::toObjectUnchecked(in value) });
        assume (unsafe { Value::fromObjectUnchecked(in object) }) == value;
        object
    }

    unsafe fn toObjectUnchecked(in value: Value) -> Object;
}

struct Object;

impl Object {
    // #[reads(heap)]
    // fn protoOf(object: Object) -> Value;
    fn protoOf(in object: Object) -> Value {
        (unsafe { Object::protoOfUnchecked(heap, in object) })
    }

    unsafe fn protoOfUnchecked(heap: Heap, in object: Object) -> Value;
}

struct Reg;
struct ValueReg;

enum Condition {
    Equal,
    NotEqual,
}

ir MASM {
    op Jump(label dst: MASM) {
        goto dst;
    }

    op StoreBool(bool: Bool, reg: Reg) {
        MASM::setBool(reg, bool);
    }

    op StoreBoolValue(bool: Bool, valueReg: ValueReg) {
        let value = Value::fromBool(bool);
        MASM::setValue(valueReg, in value);
    }

    op BranchTestObject(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        let value = MASM::getValue(valueReg);
        let valueIsObject = Value::isObject(in value);

        if condition == Condition::Equal {
            if valueIsObject {
                goto branch;
            }
        }

        if condition == Condition::NotEqual {
            if !valueIsObject {
                goto branch;
            }
        }
    }

    op BranchTestNull(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        let value = MASM::getValue(valueReg);
        let valueIsNull = Value::isNull(in value);

        if condition == Condition::Equal {
            if valueIsNull {
                goto branch;
            }
        }

        if condition == Condition::NotEqual {
            if !valueIsNull {
                goto branch;
            }
        }
    }

    op BranchTestMagic(condition: Condition, valueReg: ValueReg, label branch: MASM) {
        let value = MASM::getValue(valueReg);
        let valueIsMagic = Value::isMagic(in value);

        if condition == Condition::Equal {
            if valueIsMagic {
                goto branch;
            }
        }

        if condition == Condition::NotEqual {
            if !valueIsMagic {
                goto branch;
            }
        }
    }

    op BranchObject(
        condition: Condition,
        lhsReg: Reg,
        rhsReg: Reg,
        label branch: MASM,
    ) {
        let lhs = MASM::getObject(lhsReg);
        let rhs = MASM::getObject(rhsReg);
        let isEqual = lhs == rhs;

        if condition == Condition::Equal {
            if isEqual {
                goto branch;
            }
        }

        if condition == Condition::NotEqual {
            if !isEqual {
                goto branch;
            }
        }
    }


    op UnboxObject(valueReg: ValueReg, objectReg: Reg) {
        let value = MASM::getValue(valueReg);
        let object = Value::toObject(in value);
        MASM::setObject(objectReg, in object);
    }

    op LoadObjectProto(objectReg: Reg, protoReg: ValueReg) {
        let object = MASM::getObject(objectReg);
        let value = Object::protoOf(in object);
        MASM::setValue(protoReg, in value);
    }

    fn getValue(valueReg: ValueReg) -> Value;
    fn setValue(valueReg: ValueReg, in value: Value);

    fn getBool(reg: Reg) -> Bool;
    fn setBool(reg: Reg, bool: Bool);

    fn getObject(reg: Reg) -> Object;
    fn setObject(reg: Reg, in object: Object);
}

struct ValueId;
struct ObjectId;

ir CacheIR emits MASM {
    op GuardToObject(valueId: ValueId, objectId: ObjectId) {
        let valueReg = CacheIR::useValueReg(valueId);
        let objectReg = CacheIR::useObjectReg(objectId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestObject(Condition::NotEqual, valueReg, failure);
        emit MASM::UnboxObject(valueReg, objectReg);
    }

    op LoadInstanceOfObjectResult(lhsId: ValueId, protoId: ObjectId) {
        let lhsReg = CacheIR::useValueReg(lhsId);
        let protoReg = CacheIR::useObjectReg(protoId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        label loopHead: MASM;
        label returnFalse: MASM;
        label returnTrue: MASM;
        label done: MASM;

        emit MASM::BranchTestObject(Condition::NotEqual, lhsReg, returnFalse);
        emit MASM::UnboxObject(lhsReg, scratchReg);
        emit MASM::LoadObjectProto(scratchReg, lhsReg);

        bind loopHead;
        emit MASM::BranchTestNull(Condition::Equal, lhsReg, returnFalse);
        emit MASM::BranchTestMagic(Condition::Equal, lhsReg, failure);

        emit MASM::BranchTestObject(Condition::NotEqual, lhsReg, returnFalse);
        emit MASM::UnboxObject(lhsReg, scratchReg);
        emit MASM::BranchObject(Condition::Equal, scratchReg, protoReg, returnTrue);

        emit MASM::LoadObjectProto(scratchReg, lhsReg);
        //emit MASM::StoreBool(true, protoReg); <-- uncomment to induce error
        emit MASM::Jump(loopHead);

        bind returnFalse;
        emit MASM::StoreBoolValue(false, CacheIR::outputReg);
        emit MASM::Jump(done);

        bind returnTrue;
        emit MASM::StoreBoolValue(true, CacheIR::outputReg);

        bind done;

        CacheIR::releaseReg(scratchReg);
    }

    fn addFailurePath(out label failure: MASM);

    fn allocateReg() -> Reg;
    fn releaseReg(reg: Reg);

    fn allocateValueReg() -> ValueReg;
    fn releaseValueReg(valueReg: ValueReg);

    fn useValueReg(valueId: ValueId) -> ValueReg;
    fn useObjectReg(objectId: ObjectId) -> Reg;

    var outputReg: ValueReg;
}

// interpreter version:
//ir CacheIR {
    //op LoadInstanceOfObjectResult(lhsId: ValueId, protoId: ObjectId) {
        //CacheIR::getFailurePath(out label failure);

        //let lhs = CacheIR::getValue(lhsId);
        //let proto = CacheIR::getObject(protoId);

        //if !Value::isObject(lhs) {
            //goto failure;
        //}
        //let mut currentObject = Value::toObject(lhs);
        //let mut currentProto = Object::getProto(currentObject);

        //loop {
            //if Value::isNull(currentProto) {
                //CacheIR::setOutput(Value::fromBool(false));
                //return;
            //}
            //if Value::isMagic(currentProto) {
                //goto failure;
            //}

            //if !Value::isObject(currentProto) {
                //CacheIR::setOutput(Value::fromBool(false));
                //return;
            //}
            //currentObject = Value::toObject(currentProto);
            //if currentObject == proto {
                //CacheIR::setOutput(Value::fromBool(true));
                //return;
            //}

            //currentProto = Object::getProto(currentObject);
        //}
    //}
//}

ir CacheStub emits CacheIR {
    op InstanceOf(lhsId: ValueId, rhsId: ValueId, protoId: ObjectId) {
        assume CacheIR::useValueReg(lhsId) == CacheIR::allocateValueReg();
        assume CacheIR::useValueReg(rhsId) == CacheIR::allocateValueReg();
        assume CacheIR::useObjectReg(protoId) == CacheIR::allocateReg();

        emit CacheIR::GuardToObject(rhsId, protoId);
        emit CacheIR::LoadInstanceOfObjectResult(lhsId, protoId);
    }
}
